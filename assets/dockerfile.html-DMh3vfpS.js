import{_ as e,o as a,c as o,a as t}from"./app-BhJnf_CU.js";const c="/assets/common_command-Ck23SBAW.png",r={},n=t(`<h2 id="dockerfile-介绍" tabindex="-1"><a class="header-anchor" href="#dockerfile-介绍"><span>Dockerfile 介绍</span></a></h2><p>  Dockerfile 是 Docker 用来构建镜像的文本文件，包含自定义的指令和格式。可以通过<code>docker build</code>命令从 Dockerfile 中构建镜像。用户可以用这些统一的语法命令来根据需求进行配置，通过这份统一的配置文件，在不同的平台上进行分发，需要使用时就可以根据配置文件自动化构建，这解决了开发人员构建镜像的复杂过程。同时 Dockerfile 与镜像配合使用，使 Docker 在构建时可以充分利用镜像的功能进行缓存，大大提升了 Docker 的使用率。</p><h2 id="dockerfile-构建过程" tabindex="-1"><a class="header-anchor" href="#dockerfile-构建过程"><span>Dockerfile 构建过程</span></a></h2><p>  Dockerfile 描述了组装镜像的步骤，其中每条指令都是单独执行的。除了 FROM 指令，其它每一条指令都会在上一条指令所生成镜像的基础上执行执行完后会生成一个新的镜像层，新的镜像层覆盖在原来的镜像之上从而形成了新的镜像。Dockerfile 所生成的最终镜像就是在基础镜像上面叠加一层层的镜像层组建的。</p><p>  为了提高镜像构建的速度，Docker daemon 会缓存构建过程中的中间镜像。当从一个已在缓存中的基础镜像开始构建新镜像时，会将 Dockerfile 中的下一条指令和基础镜像的所有子镜像做比较，如果有一个镜像是由相同的指令生成的，则命中缓存，直接使用该镜像，而不用再生成一个新的镜像。</p><p>  在寻找缓存的过程中，<code>COPY</code>和<code>ADD</code>指令与其它指令稍有不同，其它指令只对比生成镜像的指令字符串是否相同；而<code>COPY</code>和<code>ADD</code>指令还会对比源文件的内容是否相同，只有当源文件的内容与之前构建时完全一致时，才会命中缓存。</p><p>  此外，镜像构建过程中，一旦缓存失效，则后续的指令都将生成新的镜像，而不再使用缓存。</p><h2 id="dockerfile-指令" tabindex="-1"><a class="header-anchor" href="#dockerfile-指令"><span>Dockerfile 指令</span></a></h2><p><strong>基本格式</strong>：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Comment</span>
INSTRUCTION arguments
</code></pre></div><p>  指令(INSTRUCTION)不区分大小写，但是为了与参数区分，推荐大写。Docker 会顺序执行 Dockerfile 中的指令，第一条指令必须是<code>FROM</code>指令，它用于指定构建镜像的基础镜像。在 Dockerfile 中以<code>#</code>开头的行是注释，而其它位置出现会被当做参数，示例如下：</p><div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Comment</span>
RUN <span class="token builtin class-name">echo</span> <span class="token string">&#39;we are running some # of cool things&#39;</span>
</code></pre></div><p>  Dockerfile 中的指令有 FROM、MAINTAINER、RUN、CMD、EXPOSE、ENV、ADD、COPY、ENTRYPOINT、VOLUME、USER、WORKDIR、ONBUILD 和 HEALTHCHECK 等。</p><figure><img src="`+c+'" alt="常用指令.png" width="500" tabindex="0" loading="lazy"><figcaption>常用指令.png</figcaption></figure><h3 id="env" tabindex="-1"><a class="header-anchor" href="#env"><span>ENV</span></a></h3><h3 id="from" tabindex="-1"><a class="header-anchor" href="#from"><span>FROM</span></a></h3><h3 id="copy" tabindex="-1"><a class="header-anchor" href="#copy"><span>COPY</span></a></h3><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add"><span>ADD</span></a></h3><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span>RUN</span></a></h3><h3 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd"><span>CMD</span></a></h3><h3 id="entrypoint" tabindex="-1"><a class="header-anchor" href="#entrypoint"><span>ENTRYPOINT</span></a></h3><h3 id="onbuild" tabindex="-1"><a class="header-anchor" href="#onbuild"><span>ONBUILD</span></a></h3>',22),l=[n];function i(d,s){return a(),o("div",null,l)}const h=e(r,[["render",i],["__file","dockerfile.html.vue"]]),k=JSON.parse('{"path":"/backend/docker/dockerfile.html","title":"Dockerfile","lang":"zh-CN","frontmatter":{"title":"Dockerfile","icon":"file","order":4,"author":"Mr.Zhang","category":["后端"],"tag":["Docker"],"date":"2024-03-06T00:00:00.000Z","description":"Dockerfile 介绍 Dockerfile 是 Docker 用来构建镜像的文本文件，包含自定义的指令和格式。可以通过docker build命令从 Dockerfile 中构建镜像。用户可以用这些统一的语法命令来根据需求进行配置，通过这份统一的配置文件，在不同的平台上进行分发，需要使用时就可以根据配置文件自动化构建，这解决了开发人员构建镜像的复...","head":[["meta",{"property":"og:url","content":"https://doc.bt66.cn/backend/docker/dockerfile.html"}],["meta",{"property":"og:title","content":"Dockerfile"}],["meta",{"property":"og:description","content":"Dockerfile 介绍 Dockerfile 是 Docker 用来构建镜像的文本文件，包含自定义的指令和格式。可以通过docker build命令从 Dockerfile 中构建镜像。用户可以用这些统一的语法命令来根据需求进行配置，通过这份统一的配置文件，在不同的平台上进行分发，需要使用时就可以根据配置文件自动化构建，这解决了开发人员构建镜像的复..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-06T15:21:15.000Z"}],["meta",{"property":"article:author","content":"Mr.Zhang"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2024-03-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-06T15:21:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-06T15:21:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Zhang\\"}]}"]]},"headers":[{"level":2,"title":"Dockerfile 介绍","slug":"dockerfile-介绍","link":"#dockerfile-介绍","children":[]},{"level":2,"title":"Dockerfile 构建过程","slug":"dockerfile-构建过程","link":"#dockerfile-构建过程","children":[]},{"level":2,"title":"Dockerfile 指令","slug":"dockerfile-指令","link":"#dockerfile-指令","children":[{"level":3,"title":"ENV","slug":"env","link":"#env","children":[]},{"level":3,"title":"FROM","slug":"from","link":"#from","children":[]},{"level":3,"title":"COPY","slug":"copy","link":"#copy","children":[]},{"level":3,"title":"ADD","slug":"add","link":"#add","children":[]},{"level":3,"title":"RUN","slug":"run","link":"#run","children":[]},{"level":3,"title":"CMD","slug":"cmd","link":"#cmd","children":[]},{"level":3,"title":"ENTRYPOINT","slug":"entrypoint","link":"#entrypoint","children":[]},{"level":3,"title":"ONBUILD","slug":"onbuild","link":"#onbuild","children":[]}]}],"git":{"createdTime":1709738475000,"updatedTime":1709738475000,"contributors":[{"name":"yn-zxj","email":"331134138@qq.com","commits":1}]},"readingTime":{"minutes":2.38,"words":714},"filePathRelative":"backend/docker/dockerfile.md","localizedDate":"2024年3月6日","autoDesc":true}');export{h as comp,k as data};
