import{_ as a,o as n,c as s,a as e}from"./app-0d603fc9.js";const t={},o=e(`<h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h2><h3 id="oracle-数据库的端口号、mysql-端口、sqlserver-端口" tabindex="-1"><a class="header-anchor" href="#oracle-数据库的端口号、mysql-端口、sqlserver-端口" aria-hidden="true">#</a> oracle 数据库的端口号、mysql 端口、sqlserver 端口?</h3><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>Oracle:1521   Mysql:3306   Sqlserver:1433
</code></pre></div><h3 id="解释一下-dql、dml、ddl、dcl、tcl" tabindex="-1"><a class="header-anchor" href="#解释一下-dql、dml、ddl、dcl、tcl" aria-hidden="true">#</a> 解释一下:DQL、DML、DDL、DCL、TCL</h3><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>DQL: Date Query Language--数据查询语言(SELECT)
DML: Data Manipulation Language--数据操作语言(INSERT、DELETE、UPDATE)
DDL: Data Definition Language--数据定义语言(CREATE、ALTER、DROP)
DCL: Data Control Language--数据控制语言(GRANT、INVOKE)
TCL: Transition Control Language--事务控制语言(COMMIT、ROLLBACK、SAVEPOINT)
</code></pre></div><h3 id="oracle-数据分页" tabindex="-1"><a class="header-anchor" href="#oracle-数据分页" aria-hidden="true">#</a> Oracle 数据分页?</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>Oracle分页首先要解决三个问题:①解决排序<span class="token punctuation">;</span>②解决生成伪列<span class="token punctuation">;</span>③解决获取某一页数据<span class="token punctuation">;</span>

分页:数据库得到两个参数:pageindex<span class="token punctuation">(</span>当前页<span class="token punctuation">)</span>，pagesize<span class="token punctuation">(</span>每页记录数<span class="token punctuation">)</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>
 <span class="token punctuation">(</span><span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token operator">*</span>，rownum rn <span class="token keyword">from</span>  <span class="token comment"># 生成伪列</span>
  <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> empno <span class="token keyword">asc</span><span class="token punctuation">)</span> e <span class="token punctuation">)</span>  <span class="token comment"># 解决排序--得到一个结果集</span>
<span class="token keyword">where</span> rn <span class="token operator">between</span> startposition <span class="token operator">and</span> endposition

startposition <span class="token operator">=</span> <span class="token punctuation">(</span>pageindex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pagesize <span class="token operator">+</span> <span class="token number">1</span>
endposition <span class="token operator">=</span> pagesize <span class="token operator">*</span> pageindex
</code></pre></div><h3 id="mysql-分页-sql" tabindex="-1"><a class="header-anchor" href="#mysql-分页-sql" aria-hidden="true">#</a> mysql 分页 SQL?</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>Mysql分页: <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> startindex<span class="token punctuation">,</span> pagesize

startindex <span class="token operator">=</span>  <span class="token punctuation">(</span>pageindex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pagesize
</code></pre></div><h3 id="什么是事务" tabindex="-1"><a class="header-anchor" href="#什么是事务" aria-hidden="true">#</a> 什么是事务?</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>事务是一个工作单元，可以封装一系列操作，事务要求此系列操作要么都成功，要么都失败;事务执行完后，是不能回滚的;</p></div><h3 id="事务的特性" tabindex="-1"><a class="header-anchor" href="#事务的特性" aria-hidden="true">#</a> 事务的特性</h3><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>原子性: 系列操作是不能分割的
一致性: 事务操作后数据必须操作一致
隔离性: 事务的操作不受其它事务影响
持久性: 事务一旦完成，将持久写入数据
</code></pre></div><h3 id="什么是视图" tabindex="-1"><a class="header-anchor" href="#什么是视图" aria-hidden="true">#</a> 什么是视图?</h3><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>视图:基于源表查询得到的结果，视图是不存放数据的(数据存在源表中) -- 虚拟表
</code></pre></div><h3 id="什么是索引-如何创建索引" tabindex="-1"><a class="header-anchor" href="#什么是索引-如何创建索引" aria-hidden="true">#</a> 什么是索引? 如何创建索引?</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>索引服务于查询，索引是数据库的一个对象，索引对象类似图书目录;当对象创建索引后，在查询时，数据库会自动使用索引;当对表数据进行增删改，数据库会自动维护索引;</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> <span class="token operator">&lt;</span>index_name<span class="token operator">&gt;</span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>table_name<span class="token operator">&gt;</span><span class="token punctuation">(</span>字段 <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><h3 id="过程与函数的区别" tabindex="-1"><a class="header-anchor" href="#过程与函数的区别" aria-hidden="true">#</a> 过程与函数的区别?</h3><table><thead><tr><th>函数</th><th>过程</th></tr></thead><tbody><tr><td>一般用于计算数据</td><td>完成特定的任务</td></tr><tr><td>声明为 FUNCTION</td><td>声明为 PROCEDURE /prəˈsiːdʒə(r)/</td></tr><tr><td>需要描述返回类型，且 PL/SQL 块中至少有一个有效的 RETURN 语句</td><td>无返回类型，可通过 OUT、IN OUT 参数返回多个值</td></tr><tr><td>不能独立运行，必须作为表达式的一部分</td><td>可作为一个独立的 PL/SQL 语句运行</td></tr><tr><td>在 DML 和 DQL 中调用函数</td><td>在 DML 和 DQL 中不可调用过程</td></tr></tbody></table><h3 id="oracle-数据库中的约束有哪些" tabindex="-1"><a class="header-anchor" href="#oracle-数据库中的约束有哪些" aria-hidden="true">#</a> Oracle 数据库中的约束有哪些?</h3><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>主键约束(primay):一般建表是需要添加主键约束的(主键是确定表数据的唯一标识) -- 主键约束要求:非空 + 唯一
非空约束(NOT NULL):值不能为空
检查约束(check):验证属性值的有效性
外键约束(foreign):表中的属性值关联外部表的某一个属性值
唯一约束(unique):值不重复(可以为空值，但只能有一个空值)
</code></pre></div><h3 id="union-与-union-all-的区别" tabindex="-1"><a class="header-anchor" href="#union-与-union-all-的区别" aria-hidden="true">#</a> union 与 union all 的区别?</h3><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>union对多个查询的结果如果存在相同数据，union会合并相同的结果
union all 会显示所有数据，所以union all 效率要高于union
</code></pre></div><h3 id="比较-truncate-和-delete-命令" tabindex="-1"><a class="header-anchor" href="#比较-truncate-和-delete-命令" aria-hidden="true">#</a> 比较 truncate 和 delete 命令 ?</h3><div class="language-txt" data-ext="txt"><pre class="language-txt"><code>(1)truncate在各种表上无论是大的还是小的都非常快。如果有rollback命令delete将被撤销，而truncate则不会被撤销;
(2)truncate是一个DDL(Data Definition Language，数据定义语言)语言，而delete是一个DML(Data Manipulation Language，数据操作语言)语言，向其他所有的DDL语言一样，他将被隐式提交，不能对truncate使用rollback命令;
(3)用法上:DELETE FROM table [WHERE...]      |      TRUNCATE table
(4)truncate不能触发触发器，delete会触发触发器
</code></pre></div>`,25),p=[o];function r(l,c){return n(),s("div",null,p)}const i=a(t,[["render",r],["__file","java-database.html.vue"]]);export{i as default};
