import{_ as d,j as e,o as r,c as l,f as s,i as n,g as t,w as p,a}from"./app-6e29f1c2.js";const k="/assets/Geometry-a90e90ca.png",u="/assets/Mutipart-879546e3.png",i={},h=a(`<h2 id="mysql-中的数据类型" tabindex="-1"><a class="header-anchor" href="#mysql-中的数据类型" aria-hidden="true">#</a> MySQL 中的数据类型</h2><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td><code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT(或 INTEGER)</code> 、<code>BIGINT</code></td></tr><tr><td>浮点类型</td><td><code>FLOAT</code>、<code>DOUBLE</code></td></tr><tr><td>定点数类型</td><td><code>DECIMAL</code></td></tr><tr><td>位类型</td><td><code>BIT</code></td></tr><tr><td>日期时间类型</td><td><code>YEAR</code>、<code>TIME</code>、<code>DATE</code>、<code>DATETIME</code>、<code>TIMESTAMP</code></td></tr><tr><td>文本字符串类型</td><td><code>CHAR</code>、<code>VARCHAR</code>、<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>、<code>LONGTEXT</code></td></tr><tr><td>枚举类型</td><td><code>ENUM</code></td></tr><tr><td>集合类型</td><td><code>SET</code></td></tr><tr><td>二进制字符串类型</td><td><code>BINARY</code>、<code>VARBINARY</code>、<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code>、<code>LONGBLOB</code></td></tr><tr><td>JSON 类型</td><td><code>JSON 对象</code>、<code>JSON 数组</code></td></tr><tr><td>空间数据类型</td><td>单值:<code>GEOMETRY</code> <code>POINT</code> <code>LINESTRING</code> <code>POLYGON</code><br><br>集合:<code>MULTIPOINT</code> <code>MULTILINESTRING</code> <code>MULTIPOLYGON</code> <code>GEOMETRYCOLLECTION</code></td></tr></tbody></table><p>常见数据类型的属性如下：</p><table><thead><tr><th>MySQL 关键字</th><th>含义</th></tr></thead><tbody><tr><td><code>NULL</code></td><td>数据列可包含 NULL 值</td></tr><tr><td><code>NOT NULL</code></td><td>数据列不允许包含 NULL 值</td></tr><tr><td><code>DEFAULT</code></td><td>默认值</td></tr><tr><td><code>PRIMARY KEY</code></td><td>主键</td></tr><tr><td><code>AUTO_INCREMENT</code></td><td>自动递增，适用于整数类型</td></tr><tr><td><code>UNSIGNED</code></td><td>无符号</td></tr><tr><td><code>CHARACTER SET name</code></td><td>指定字符集</td></tr></tbody></table><h2 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型" aria-hidden="true">#</a> 整数类型</h2><h3 id="类型介绍" tabindex="-1"><a class="header-anchor" href="#类型介绍" aria-hidden="true">#</a> 类型介绍</h3><p>整数类型一共有 5 种，包括<code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT(INTERGER)</code>和<code>BIGINT</code>。</p><p>它们的区别如下：</p><table><thead><tr><th>整数类型</th><th>字节</th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>1</td><td>- 128 ~ 127</td><td>0 ~ 255</td></tr><tr><td><code>SMALLINT</code></td><td>2</td><td>- 32768 ~ 32767</td><td>0 ~ 65535</td></tr><tr><td><code>MEDIUMINT</code></td><td>3</td><td>- 8388608 ~ 8388607</td><td>0 ~ 16777215</td></tr><tr><td><code>INT</code><br><code>INTEGER</code></td><td>4</td><td>- 2147483648 ~ 2147483647</td><td>0 ~ 4294967295</td></tr><tr><td><code>BIGINT</code></td><td>8</td><td>-2<sup>63</sup> ~ 2<sup>63</sup>-1</td><td>0 ~ 2<sup>64</sup>-1</td></tr></tbody></table><h3 id="可选属性" tabindex="-1"><a class="header-anchor" href="#可选属性" aria-hidden="true">#</a> 可选属性</h3><p><code>M</code>:<br>   表示显示宽度，M 的取值范围是( 0 , 255 )。例如，int( 5 )：当数据宽度小于 5 位的时候在数字前面需要用字符填满宽度。该项功能需要配合<code>ZEROFILL</code>使用，表示用<code>0</code>填满宽度，否则指定显示宽度无效。</p><div class="hint-container tip"><p class="hint-container-title">如果设置了显示宽度，那么插入的数据宽度超过显示宽度限制，会不会截断或插入失败？</p><p>  <mark>不会对插入的数据有任何影响</mark>，还是按照类型的实际宽度进行保存，即显示宽度与类型可以存储的值范围无关。 <mark>从 MySQL 8. 0. 17 开始，整数数据类型不推荐使用显示宽度属性</mark>。</p></div><p>  整型数据类型可以在定义表结构时指定所需要的显示宽度，如果不指定，则系统为每一种类型指定默认的宽度值。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_int <span class="token punctuation">(</span> x <span class="token keyword">TINYINT</span><span class="token punctuation">,</span> y <span class="token keyword">SMALLINT</span><span class="token punctuation">,</span> z <span class="token keyword">MEDIUMINT</span><span class="token punctuation">,</span> m <span class="token keyword">INT</span><span class="token punctuation">,</span> n <span class="token keyword">BIGINT</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># MySQL 5.7中显示如下，MySQL 8中不再显示范围</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> test_int<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> x     <span class="token operator">|</span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> y     <span class="token operator">|</span> <span class="token keyword">smallint</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> z     <span class="token operator">|</span> <span class="token keyword">mediumint</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> m     <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> n     <span class="token operator">|</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+-------+</span>
<span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre></div><p><code>TINYINT</code>有符号数和无符号数的取值范围分别为 -128 ~ 127 和 0 ~ 255 ，由于负号占了一个数字位，因此<code>TINYINT</code>默认的显示宽度为 4 。同理，其他整数类型的默认显示宽度与其有符号数的最小值的宽度相同。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_int <span class="token punctuation">(</span> f1 <span class="token keyword">INT</span><span class="token punctuation">,</span> f2 <span class="token keyword">INT</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> f3 <span class="token keyword">INT</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span> ZEROFILL <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_int <span class="token punctuation">(</span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">123</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_int <span class="token punctuation">(</span> f1<span class="token punctuation">,</span> f2 <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">123456</span><span class="token punctuation">,</span> <span class="token number">123456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_int <span class="token punctuation">(</span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">123456</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">,</span> <span class="token number">123456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> test_int<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+--------------------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>                     <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+--------------------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> f1    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>                  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> f2    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                   <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> f3    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> zerofill <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+--------------------------+------+-----+---------+-------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_int<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------+--------+--------+</span>
<span class="token operator">|</span> f1     <span class="token operator">|</span> f2     <span class="token operator">|</span> f3     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+--------+--------+</span>
<span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>    <span class="token number">123</span> <span class="token operator">|</span>  <span class="token number">00123</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">123456</span> <span class="token operator">|</span> <span class="token number">123456</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>   <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">123456</span> <span class="token operator">|</span> <span class="token number">123456</span> <span class="token operator">|</span> <span class="token number">123456</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+--------+--------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre></div><p><code>UNSIGNED</code>:<br>   无符号类型(非负)，所有的整数类型都有一个可选的属性 <mark>UNSIGNED（无符号属性）</mark>，无符号整数类型的最小取值为 0 。所以，如果需要在 MySQL 数据库中保存非负整数值时，可以将整数类型设置为无符号类型。<br>   INT 类型默认显示宽度为 INT(11)，无符号 INT 类型默认显示宽度为 INT(10)</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_int <span class="token punctuation">(</span> f1 <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> test_int<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+------------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>             <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+------------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> f1    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+------------------+------+-----+---------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre></div><p><code>ZEROFILL</code>:<br>   0 填充,（如果某列是 ZEROFILL，那么 MySQL 会<mark>自动</mark>为当前列添加 UNSIGNED 属性），如果指定了 ZEROFILL 只是表示不够 M 位时，用 0 在左边填充，如果超过 M 位，只要不超过数据存储范围即可。<br>   原来，在 int(M) 中，M 的值跟 int(M) <mark>所占多少存储空间并无任何关系</mark>。int(3)、int(4)、int(8) 在磁盘上都是占用 4 bytes 的存储空间。也就是说，int(M)，必须和 UNSIGNED ZEROFILL 一起使用才有意义。如果整数值超过 M 位，就按照实际位数存储，只是无须再用字符 0 进行填充。</p><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h3><p><code>TINYINT</code>：一般用于<mark>枚举数据</mark>，比如系统设定取值范围很小且固定的场景。</p><p><code>SMALLINT</code>：可以用于<mark>较小范围</mark>的统计数据，比如统计工厂的固定资产库存数量等。</p><p><code>MEDIUMINT</code>：用于<mark>较大整数</mark>的计算，比如车站每日的客流量等。</p><p><code>INT 或 INTEGER</code>：<mark>取值范围足够大</mark>，一般情况下不用考虑超限问题，用得最多。比如商品编号。</p><p><code>BIGINT</code>：只有当你处理<mark>特别巨大</mark>的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证券公司衍生产品持仓等。</p><h3 id="如何选择" tabindex="-1"><a class="header-anchor" href="#如何选择" aria-hidden="true">#</a> 如何选择</h3><p>  在评估用哪种整数类型的时候，你需要考虑<code>存储空间</code>和<code>可靠性</code>的平衡问题：一方面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间，使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起系统错误，影响可靠性。</p><p>  举个例子，商品编号采用的数据类型是 INT。原因就在于，客户门店中流通的商品种类较多，而且，每天都有旧商品下架，新商品上架，这样不断迭代，日积月累。</p><p>  如果使用 SMALLINT 类型，虽然占用字节数比 INT 类型的整数少，但是却不能保证数据不会超出范围 65535 。相反，使用 INT，就能确保有足够大的取值范围，不用担心数据超出范围影响可靠性的问题。</p><p>  你要注意的是，在实际工作中，<mark>系统故障产生的成本远远超过增加几个字段存储空间所产生的成本</mark>。因此，我建议你首先确保数据不会超过取值范围，在这个前提之下，再去考虑如何节省存储空间。</p><h2 id="浮点类型" tabindex="-1"><a class="header-anchor" href="#浮点类型" aria-hidden="true">#</a> 浮点类型</h2><h3 id="类型介绍-1" tabindex="-1"><a class="header-anchor" href="#类型介绍-1" aria-hidden="true">#</a> 类型介绍</h3><p>浮点数和定点数类型的特点是可以处理小数，MySQL 支持的浮点数类型，分别是<code>FLOAT(单精度浮点数)</code>、<code>DOUBLE(双精度浮点数)</code>、<code>REAL</code>；</p><blockquote><p><code>REAL</code>默认就是<code>DOUBLE</code>。如果你把 SQL 模式设定为启用<code>REAL_AS_FLOAT</code>，那么，MySQL 就认为<code>REAL</code>是<code>FLOAT</code>。如果要启用可以通过以下 SQL 语句实现：</p></blockquote><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询当前配置的sql_mode</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;sql_mode&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">SET</span> sql_mode <span class="token operator">=</span> <span class="token string">&quot;REAL_AS_FLOAT&quot;</span><span class="token punctuation">;</span>
</code></pre></div><table><thead><tr><th>类型</th><th>字节</th><th>说明</th><th>格式</th></tr></thead><tbody><tr><td><code>FLOAT</code></td><td>4</td><td>单精度浮点型</td><td>1 位符号(S)，8 位指数(E)，23 位小数(M)</td></tr><tr><td><code>DOUBLE</code></td><td>8</td><td>双精度浮点型</td><td>1 位符号(S)，11 位指数(E)，52 位小数(M)</td></tr></tbody></table>`,36),M={href:"https://baike.baidu.com/item/IEEE%20754/3869922",target:"_blank",rel:"noopener noreferrer"},T=a(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>① <code>FLOAT</code>和<code>DOUBLE</code>这两种数据类型的区别<br><code>FLOAT</code>占用字节数少，取值范围小；<code>DOUBLE</code>占用字节数多，取值范围也大。</p><p>② 为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于有符号数取值范围大于等于零的部分呢？<br> MySQL 存储浮点数的格式为：符号(S)、尾数(M)和阶码(E)。因此，无论有没有符号，MySQL 的浮点数都会存储表示符号的部分。因此，所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p></div><h3 id="数据精度" tabindex="-1"><a class="header-anchor" href="#数据精度" aria-hidden="true">#</a> 数据精度</h3><p>(1) MySQL 允许使用非标准语法 <mark>(其他数据库未必支持)</mark>：<code>FLOAT(M,D)</code>或<code>DOUBLE(M,D)</code>。<code>M</code>称为<mark>精度</mark>，<code>D</code>称为<mark>标度</mark>。(M, D)中<code>M = 整数位 + 小数位</code>，<code>D = 小数位</code>。(D &lt;= M &lt;= 255，0 &lt;= D &lt;= 30)</p><blockquote><p>例如，定义为<code>FLOAT(5, 2)</code>的一个列可以显示为 -999.99 ~ 999.99，如果超过这个范围会报错。</p></blockquote><p>(2) <code>FLOAT</code>和<code>DOUBLE</code>类型在不指定(M, D)时，默认会按照实际的精度（由实际的硬件和操作系统决定）来显示</p><blockquote><p>说明：浮点类型，也可以加<code>UNSIGNED</code>，但是不会改变数据范围，例如：<code>FLOAT(3, 2) UNSIGNED</code>仍然只能表示 0 ~ 9.99 的范围</p></blockquote><p>(3) 不管是否显式设置了精度(M, D)，这里 MySQL 的处理方案如下：</p><ul><li>存储时，整数部分超出了范围，MySQL 就会报错，不允许存这样的值</li><li>存储时，小数点部分若超出范围，分以下情况： <ul><li>若四舍五入后，整数部分没有超出范围<code>eg:FLOAT(5, 2) → 999.009 → 999.01</code></li><li>若四舍五入后，整数部分超出范围，则 MySQL 报错，并拒绝处理<code>eg:FLOAT(5, 2) → 999.995 → 报错</code></li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>从 MySQL 8. 0. 17 开始，FLOAT(M,D) 和 DOUBLE(M,D)用法在官方文档中已经明确<mark>不推荐</mark>使用，将来可能被移除。另外，关于浮点型 FLOAT 和 DOUBLE 的 UNSIGNED 也不推荐使用了，将来也可能被移除。</p></div><p><strong>示例</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_double <span class="token punctuation">(</span>
  f1 <span class="token keyword">FLOAT</span><span class="token punctuation">,</span>
  f2 <span class="token keyword">FLOAT</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  f3 <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span>
  f4 <span class="token keyword">DOUBLE</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_double <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token number">123.456</span><span class="token punctuation">,</span> <span class="token number">123.456</span><span class="token punctuation">,</span> <span class="token number">123.4567</span><span class="token punctuation">,</span> <span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># Out of range value for column &#39;f2&#39; at row 1 → f2 整数部分超范围</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_double <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token number">123.456</span><span class="token punctuation">,</span> <span class="token number">1234.456</span><span class="token punctuation">,</span> <span class="token number">123.4567</span><span class="token punctuation">,</span> <span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="精度误差" tabindex="-1"><a class="header-anchor" href="#精度误差" aria-hidden="true">#</a> 精度误差</h3><p>  浮点数类型有个缺陷，就是不精准。比如，我们设计一个表，有 f1 这个字段，插入值分别为 0.47, 0.44, 0.19，我们期待的运行结果是： 0. 47 + 0. 44 + 0. 19 = 1.1 。而使用 sum 之后查询：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_double <span class="token punctuation">(</span>f1 <span class="token keyword">DOUBLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_double <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">0.47</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.44</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token keyword">FROM</span> test_double<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token operator">|</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span>            <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token operator">|</span> <span class="token number">1.0999999999999999</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.1</span> <span class="token operator">=</span> <span class="token number">1.1</span> <span class="token keyword">FROM</span> test_double<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------+</span>
<span class="token operator">|</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.1</span> <span class="token operator">|</span> <span class="token number">1.1</span> <span class="token operator">=</span> <span class="token number">1.1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------+</span>
<span class="token operator">|</span>             <span class="token number">0</span> <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>  虽然误差很小，但确实有误差。为什么会存在这样的误差呢？<br>   问题还是出在 MySQL 对浮点类型数据的存储方式上，MySQL 用 4 个字节存储 FLOAT 类型数据，用 8 个字节来存储 DOUBLE 类型数据。无论哪个，都是采用二进制的方式来进行存储的，如果尾数不是 0 或 5（比如 9.624），你就无法用一个二进制数来精确表达。进而，就只好在取值允许的范围内进行四舍五入。</p><p>  在编程中，如果用到浮点数，要特别注意误差问题，因为<mark>浮点数是不准确的</mark>，所以我们要避免使用&quot;=&quot;来判断两个数是否相等。同时，在一些对精确度要求较高的项目中，千万不要使用浮点数，不然会导致结果错误，甚至是造成不可挽回的损失。</p></div><h2 id="定点类型" tabindex="-1"><a class="header-anchor" href="#定点类型" aria-hidden="true">#</a> 定点类型</h2><table><thead><tr><th>数据类型</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td><code>DECIMAL(M,D)</code><br><code>或 DEC(M,D)</code><br><code>或 NUMERIC(M,D)</code></td><td>M+2 字节</td><td>有效范围由 M 和 D 决定</td></tr></tbody></table><blockquote><p>使用<code>DECIMAL(M, D)</code>的方式表示高精度小数。其中，M 被称为精度，D 被称为标度（0 &lt;= M &lt;= 65，0 &lt;= D &lt;= 30，D &lt; M）。例如，定义 DECIMAL(5, 2)的类型，表示该列取值范围是 -999.99 ~ 999.99。</p></blockquote><p>(1) MySQL 中的定点数类型只有 DECIMAL 一种类型；<br> (2) DECIMAL(M, D)的最大取值范围与 DOUBLE 类型一样，但是有效的数据范围是由 M 和 D 决定的；<br> (3) 定点数在 MySQL 内部是以字符串的形式进行存储，这就决定了它一定是精准的；<br> (4) 当 DECIMAL 类型不指定精度和标度时，<mark>其默认为 DECIMAL(10, 0)</mark>。当数据的精度超出了定点数类型的精度范围时，则 MySQL 同样会进行四舍五入处理。</p><div class="hint-container tip"><p class="hint-container-title">浮点数与定点数对比</p><p>  浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）；<br>   定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景（比如涉及金额计算的场景）。</p></div><p>利用定点数解决上面浮点数精确丢失问题：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_double <span class="token punctuation">(</span>f1 <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_double <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">0.47</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.44</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token keyword">FROM</span> test_double<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------+</span>
<span class="token operator">|</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+</span>
<span class="token operator">|</span> <span class="token number">1.10</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>
</code></pre></div><h2 id="位类型" tabindex="-1"><a class="header-anchor" href="#位类型" aria-hidden="true">#</a> 位类型</h2><p>BIT 类型中存储的是二进制值，类似 010110 。</p><table><thead><tr><th>二进制字符串类型</th><th>长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td><code>BIT(M)</code></td><td>M</td><td>1 &lt;= M &lt;= 64</td><td>约为(M + 7)/8 个字节</td></tr></tbody></table><blockquote><p><code>M</code>是表示二进制的位数，位数最小值为 1 ，最大值为 64，<mark>如果没有指定(M)，默认是 1 位</mark></p></blockquote><p><strong>示例</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_bit <span class="token punctuation">(</span>
  f1 <span class="token keyword">BIT</span><span class="token punctuation">,</span>
  f2 <span class="token keyword">BIT</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  f3 <span class="token keyword">BIT</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_bit<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># Data too long for column &#39;f1&#39; at row 1</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_bit<span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_bit<span class="token punctuation">(</span>f2<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">23</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>注意：<br> (1) 在向 BIT 类型的字段插入数据时，一定要确保数据在 BIT 类型支持的范围内<br> (2) 使用<code>SELECT</code>查询位字段时，可以使用 BIN()或 HEX()函数进行读取</p><h2 id="日期与时间类型" tabindex="-1"><a class="header-anchor" href="#日期与时间类型" aria-hidden="true">#</a> 日期与时间类型</h2><p>  MySQL 有多种表示日期和时间的数据类型，不同的版本可能有所差异，MySQL 8. 0 版本支持的日期和时间类型主要有：YEAR 类型、TIME 类型、DATE 类型、DATETIME 类型和 TIMESTAMP 类型。</p><table><thead><tr><th>类型</th><th>名称</th><th>字节</th><th>日期格式</th></tr></thead><tbody><tr><td><code>YEAR</code></td><td>年</td><td>1</td><td><code>YYYY</code> 或 <code>YY</code></td></tr><tr><td><code>TIME</code></td><td>时间</td><td>3</td><td><code>HH:MM:SS</code></td></tr><tr><td><code>DATE</code></td><td>日期</td><td>3</td><td><code>YYYY-MM-DD</code></td></tr><tr><td><code>DATETIME</code></td><td>日期 时间</td><td>8</td><td><code>YYYY-MM-DD HH:MM:SS</code></td></tr><tr><td><code>TIMESTAMP</code></td><td>日期 时间</td><td>4</td><td><code>YYYY-MM-DD HH:MM:SS</code></td></tr></tbody></table><h3 id="year-类型" tabindex="-1"><a class="header-anchor" href="#year-类型" aria-hidden="true">#</a> YEAR 类型</h3><p>在 MySQL 中，YEAR 有以下几种存储格式：<br> (1) 以 4 位字符串或数字格式表示 YEAR 类型，其格式为 YYYY，最小值为 1901 ，最大值为 2155<br> (2) 以 2 位字符串格式表示 YEAR 类型，最小值为 00 ，最大值为 99<br>   1) 当取值为 01 到 69 时，表示 2001 到 2069；<br>   2) 当取值为 70 到 99 时，表示 1970 到 1999；<br>   3) 当取值整数的 0 或 00 添加的话，那么是 0000 年；<br>   4) 当取值是日期/字符串的&#39;0&#39;添加的话，是 2000 年。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>从 MySQL 5.5.27 开始，2 位格式的 YEAR 已经不推荐使用。YEAR 默认格式就是&quot;YYYY&quot;，没必要写成 YEAR(4)，从 MySQL 8.0.19 开始，不推荐使用指定显示宽度的 YEAR(4)数据类型。</p></div><h3 id="date-类型" tabindex="-1"><a class="header-anchor" href="#date-类型" aria-hidden="true">#</a> DATE 类型</h3><p>  DATE 类型表示日期，没有时间部分，格式为<code>YYYY-MM-DD</code>，其中，<code>YYYY</code>表示年份，<code>MM</code>表示月份，<code>DD</code>表示日期。需要 3 个字节的存储空间。在向 DATE 类型的字段插入数据时，同样需要满足一定的格式条件。</p><p>(1) 以<code>YYYY-MM-DD</code>格式或者<code>YYYYMMDD</code>格式表示的字符串日期，其最小取值为<code>1000-01-01</code>，最大取值为<code>9999-12-03</code>。<mark><code>YYYYMMDD</code>格式会被转化为<code>YYYY-MM-DD</code>格式</mark></p>`,38),E=s("code",null,"YY-MM-DD",-1),L=s("code",null,"YYMMDD",-1),m=s("mark",null,"YEAR 类型",-1),y=a('<p>(3) 使用<code>CURRENT_DATE()</code>或者<code>NOW()</code>函数，会插入当前系统的<mark>日期</mark></p><h3 id="time-类型" tabindex="-1"><a class="header-anchor" href="#time-类型" aria-hidden="true">#</a> TIME 类型</h3><p>  TIME 类型用来表示时间，不包含日期部分。在 MySQL 中，需要 3 个字节的存储空间来存储 TIME 类型的数据，可以使用<code>HH:MM:SS</code>格式来表示 TIME 类型，其中，<code>HH</code>表示小时，<code>MM</code>表示分钟，<code>SS</code>表示秒。</p><p>在 MySQL 中，向 TIME 类型的字段插入数据时，也可以使用几种不同的格式：</p><p>(1) 可以使用带有冒号的<mark>字符串</mark>，比如<code>D HH:MM:SS</code>、<code>HH:MM:SS</code>、<code>HH:MM</code>、<code>D HH:MM</code>、<code>D HH</code>或<code>SS</code>格式，都能被正确地插入 TIME 类型的字段中。其中 D 表示天，其最小值为 0，最大值为 34。如果使用带有 D 格式的字符串插入 TIME 类型的字段时，D 会被转化为小时，计算格式为<code>D * 24 + HH</code>。当使用带有冒号并且不带 D 的字符串表示时间时，表示当天的时间，比如<code>12:10</code>表示<code>12:10:00</code>，而不是<code>00:12:10</code></p><p>(2) 可以使用不带有冒号的<mark>字符串或者数字</mark>，格式为<code>HHMMSS</code>或者<code>&#39;HHMMSS&#39;</code>。如果插入一个不合法的字符串或者数字，MySQL 在存储数据时，会将其自动转化为<code>00:00:00</code>进行存储。比如<code>1210</code>，MySQL 会将<mark>最右边的两位</mark>解析成秒，表示<code>00:12:10</code>，而不是<code>12:10:00</code></p><p>(3) 使用<code>CURRENT_TIME()</code>或者<code>NOW()</code>，会插入当前系统的<mark>时间</mark></p><h3 id="datetime-类型" tabindex="-1"><a class="header-anchor" href="#datetime-类型" aria-hidden="true">#</a> DATETIME 类型</h3><p>  DATETIME 类型在所有的日期时间类型中占用的存储空间最大，总共需要 8 个字节的存储空间。在格式上为 DATE 类型和 TIME 类型的组合，可以表示为<code>YYYY-MM-DD HH:MM:SS</code>，其中<code>YYYY</code>表示年份，<code>MM</code>表示月份，<code>DD</code>表示日期，<code>HH</code>表示小时，<code>MM</code>表示分钟，<code>SS</code>表示秒。</p><p>在 MySQL 中，在向 DATETIME 类型的字段插入数据时，同样需要满足一定的格式条件：</p><p>(1) 以<code>YYYY-MM-DD HH:MM:SS</code>或<code>YYYYMMDDHHMMSS</code>格式的字符串插入 DATETIME 类型的字段时，最小值为<code>1000-01-01 00:00:00</code>，最大值为<code>9999-12-03 23:59:59</code></p><blockquote><p>以<code>YYYYMMDDHHMMSS</code>格式的数字插入 DATETIME 类型的字段时，会被转化为<code>YYYY-MM-DD HH:MM:SS</code>格式。</p></blockquote>',12),b=s("code",null,"YY-MM-DD HH:MM:SS",-1),I=s("code",null,"YYMMDDHHMMSS",-1),A=a(`<p>(3) 使用函数<code>CURRENT_TIMESTAMP()</code>和<code>NOW()</code>，可以向 DATETIME 类型的字段插入系统的当前<mark>日期和时间</mark></p><h3 id="timestamp-类型" tabindex="-1"><a class="header-anchor" href="#timestamp-类型" aria-hidden="true">#</a> TIMESTAMP 类型</h3><p>  TIMESTAMP 类型也可以表示日期时间，其显示格式与 DATETIME 类型相同，都是<code>YYYY-MM-DD HH:MM:SS</code>，需要 4 个字节的存储空间。但是 TIMESTAMP 存储的时间范围比 DATETIME 要小很多，只能存储<code>1970-01-01 00:00:01 UTC</code>到<code>2038-01-19 03:14:07 UTC</code>之间的时间。其中，UTC 表示世界统一时间，也叫作世界标准时间。</p><p>  向 TIMESTAMP 类型的字段插入数据时，当插入的数据格式满足<code>YY-MM-DD HH:MM:SS</code>和<code>YYMMDDHHMMSS</code>时，两位数值的年份同样符合 YEAR 类型的规则条件，只不过表示的时间范围要小很多。</p><p>  如果向 TIMESTAMP 类型的字段插入的时间超出了 TIMESTAMP 类型的范围，则 MySQL 会抛出错误信息。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。因此，使用 TIMESTAMP 存储的同一个时间值，在不同的时区查询时会显示不同的时间。</p></div><h3 id="开发中经验" tabindex="-1"><a class="header-anchor" href="#开发中经验" aria-hidden="true">#</a> 开发中经验</h3><p>  <mark>用得最多的日期时间类型，就是 DATETIME</mark>。虽然 MySQL 也支持 YEAR（年）、 TIME（时间）、DATE（日期），以及 TIMESTAMP 类型，但是在实际项目中，尽量用 DATETIME 类型。因为这个数据类型包括了完整的日期和时间信息，取值范围也最大，使用起来比较方便。毕竟，如果日期时间信息分散在好几个字段，很不容易记，而且查询的时候，SQL 语句也会更加复杂。</p><p>  此外，一般存<mark>注册时间、商品发布时间等</mark>，不建议使用 DATETIME 存储，而是使用<mark>时间戳</mark>，因为 DATETIME 虽然直观，但不便于计算。</p><h2 id="文本字符串类型" tabindex="-1"><a class="header-anchor" href="#文本字符串类型" aria-hidden="true">#</a> 文本字符串类型</h2><p>MySQL 中，文本字符串总体上分为<code>CHAR</code>、<code>VARCHAR</code>、<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>、<code>LONGTEXT</code>、<code>ENUM</code>、<code>SET</code>等类型。</p><table><thead><tr><th>文本字符串类型</th><th>值的长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td><code>CHAR(M)</code></td><td>M</td><td>0 &lt;= M &lt;= 255</td><td>M 个字节</td></tr><tr><td><code>VARCHAR(M)</code></td><td>M</td><td>0 &lt;= M &lt;= 65535</td><td><code>实际长度</code> + 1 个字节</td></tr><tr><td><code>TINYTEXT</code></td><td>L</td><td>0 &lt;= L &lt;= 255</td><td>L + 2 个字节</td></tr><tr><td><code>TEXT</code></td><td>L</td><td>0 &lt;= L &lt;= 65535</td><td>L + 2 个字节</td></tr><tr><td><code>MEDIUMTEXT</code></td><td>L</td><td>0 &lt;= L &lt;= 2<sup>24</sup>-1</td><td>L + 3 个字节</td></tr><tr><td><code>LONGTEXT</code></td><td>L</td><td>0 &lt;= L &lt;= 2<sup>32</sup>-1</td><td>L + 4 个字节</td></tr><tr><td><code>ENUM</code></td><td>L</td><td>1 &lt;= L &lt;= 65535</td><td>1 或 2 个字节</td></tr><tr><td><code>SET</code></td><td>L</td><td>0 &lt;= L &lt;= 64</td><td>1、2、3、4 或 8 个字节</td></tr></tbody></table><h3 id="char-与-varchar-类型" tabindex="-1"><a class="header-anchor" href="#char-与-varchar-类型" aria-hidden="true">#</a> CHAR 与 VARCHAR 类型</h3><table><thead><tr><th>字符串(文本)类型</th><th>特点</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td><code>CHAR(M)</code></td><td>固定长度</td><td>M</td><td>0 &lt;= M &lt;= 255</td><td>M 个字节</td></tr><tr><td><code>VARCHAR(M)</code></td><td>可变长度</td><td>M</td><td>0 &lt;= M &lt;= 65535</td><td><code>(实际长度 + 1)</code> 个字节</td></tr></tbody></table><p><strong>CHAR 类型</strong>：</p><p>(1) CHAR(M) 类型一般需要预先定义字符串长度。<mark>如果不指定 M，则表示长度默认是 1 个字符</mark>。</p><p>(2) 如果保存时，数据的实际长度比 CHAR 类型声明的长度小，则会在<code>右侧填充空格</code>以达到指定的长度。当 MySQL 检索 CHAR 类型的数据时，CHAR 类型的字段<mark>会去除尾部的空格</mark>。</p><p>(3) 定义 CHAR 类型字段时，<mark>声明的字段长度即为 CHAR 类型字段所占的存储空间的字节数</mark>。</p><hr><p><strong>VARCHAR 类型</strong>：</p><p>(1) VARCHAR(M) 定义时，<mark>必须指定长度 M，否则报错</mark>。</p><p>(2) MySQL4.0 版本以下，VARCHAR(20)：指的是 20 字节，如果存放 UTF8 汉字时，只能存 6 个（每个汉字 3 字节）；MySQL5.0 版本以上，VARCHAR(20)：指的是 20 字符。</p><p>(3) 检索 VARCHAR 类型的字段数据时，会保留数据尾部的空格。<mark>VARCHAR 类型的字段所占用的存储空间为字符串实际长度加 1 个字节</mark>。</p><hr><p>占用空间比较：</p><table><thead><tr><th>Value</th><th>CHAR(4)</th><th>Storage Required</th><th>VARCHAR(4)</th><th>Storage Required</th></tr></thead><tbody><tr><td>&#39;&#39;</td><td>&#39; &#39;</td><td>4 bytes</td><td>&#39;&#39;</td><td>1 byte</td></tr><tr><td>&#39;ab&#39;</td><td>&#39;ab &#39;</td><td>4 bytes</td><td>&#39;ab&#39;</td><td>3 bytes</td></tr><tr><td>&#39;abcd&#39;</td><td>&#39;abcd&#39;</td><td>4 bytes</td><td>&#39;abcd&#39;</td><td>5 bytes</td></tr><tr><td>&#39;abcdefgh&#39;</td><td>&#39;abcd&#39;</td><td>4 bytes</td><td>&#39;abcd&#39;</td><td>5 bytes</td></tr></tbody></table><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> vc <span class="token punctuation">(</span>v <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> vc <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;ab  &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ab  &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 尾部空格保留情况</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> vc<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------------+---------------------+</span>
<span class="token operator">|</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------+---------------------+</span>
<span class="token operator">|</span> <span class="token punctuation">(</span>ab  <span class="token punctuation">)</span>              <span class="token operator">|</span> <span class="token punctuation">(</span>ab<span class="token punctuation">)</span>                <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------+---------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.06</span> sec<span class="token punctuation">)</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">CHAR 和 VARCHAR 如何选择?</p><table><thead><tr><th>类型</th><th>特点</th><th>空间上</th><th>时间上</th><th>适用场景</th></tr></thead><tbody><tr><td><code>CHAR(M)</code></td><td>固定长度</td><td>浪费存储空间</td><td>效率高</td><td>存储不大，速度要求高</td></tr><tr><td><code>VARCHAR(M)</code></td><td>可变长度</td><td>节省存储空间</td><td>效率低</td><td>非 CHAR 的情况</td></tr></tbody></table><p><strong>情况 1</strong>：存储很短的信息。比如门牌号码 101、201……这样很短的信息应该用 char，因为 varchar 还要占个 byte 用于存储信息长度，本来打算节约存储的，结果得不偿失。</p><p><strong>情况 2</strong>：固定长度的。比如使用 uuid 作为主键，那用 char 应该更合适。因为他固定长度，varchar 动态根据长度的特性就消失了，而且还要占个长度信息。</p><p><strong>情况 3</strong>：十分频繁改变的 column。因为 varchar 每次存储都要有额外的计算，得到长度等工作，如果一个非常频繁改变的，那就要有很多的精力用于计算，而这些对于 char 来说是不需要的。</p><p><strong>情况 4</strong>：具体存储引擎中的情况：</p><p>① <code>MyISAM</code> 数据存储引擎和数据列：MyISAM 数据表，最好使用固定长度(CHAR)的数据列代替可变长度(VARCHAR)的数据列。这样使得整个表静态化，从而使数据检索更快，用空间换时间。<br> ② <code>MEMORY</code> 存储引擎和数据列：MEMORY 数据表目前都使用固定长度的数据行存储，因此无论使用 CHAR 或 VARCHAR 列都没有关系，两者都是作为 CHAR 类型处理的。<br> ③ <code>InnoDB</code> 存储引擎，建议使用 VARCHAR 类型。因为对于 InnoDB 数据表，内部的行存储格式并没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），而且主要影响性能的因素是数据行使用的存储总量，由于 char 平均占用的空间多于 varchar，所以除了简短并且固定长度的，其他考虑 varchar。这样节省空间，对磁盘 I/O 和数据存储总量比较好。</p></div><h3 id="text-类型" tabindex="-1"><a class="header-anchor" href="#text-类型" aria-hidden="true">#</a> TEXT 类型</h3><table><thead><tr><th>文本字符串类型</th><th>特点</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td><code>TINYTEXT</code>小文本</td><td>可变长度</td><td>L</td><td>0 &lt;= L &lt;= 255</td><td>L + 2 个字节</td></tr><tr><td><code>TEXT</code>文本</td><td>可变长度</td><td>L</td><td>0 &lt;= L &lt;= 65535</td><td>L + 2 个字节</td></tr><tr><td><code>MEDIUMTEXT</code>中等文本</td><td>可变长度</td><td>L</td><td>0 &lt;= L &lt;= 16777215</td><td>L + 3 个字节</td></tr><tr><td><code>LONGTEXT</code>大文本</td><td>可变长度</td><td>L</td><td>0 &lt;= L&lt;= 2<sup>32</sup>-1(相当于 4GB)</td><td>L + 4 个字节</td></tr></tbody></table><p>(1) 在 MySQL 中，TEXT 用来保存文本类型的字符串，总共包含 4 种类型，分别为 <code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>和<code>LONGTEXT</code>类型。</p><p>(2) 在向 TEXT 类型的字段保存和查询数据时，系统自动按照实际长度存储，不需要预先定义长度。这一点和 VARCHAR 类型相同。</p><p>(3) 由于实际存储的长度不确定，<mark>MySQL 不允许 TEXT 类型的字段做主键</mark>。遇到这种情况，你只能采用 CHAR(M)或者 VARCHAR(M)。</p><hr><div class="hint-container tip"><p class="hint-container-title">开发中经验</p><p>  TEXT 文本类型，可以存比较大的文本段，搜索速度稍慢，因此如果不是特别大的内容，建议使用 CHAR、VARCHAR 来代替。还有 TEXT 类型不用加默认值，加了也没用。而且 text 和 blob 类型的数据删除后容易导致&quot;空洞&quot;，使得文件碎片比较多，所以频繁使用的表不建议包含 TEXT 类型字段，建议单独分出去，单独用一个表。</p></div><h2 id="enum-类型" tabindex="-1"><a class="header-anchor" href="#enum-类型" aria-hidden="true">#</a> ENUM 类型</h2><p>  ENUM 类型也叫作枚举类型，ENUM 类型的取值范围需要在定义字段时进行指定。设置字段值时，ENUM 类型只允许从成员中<mark>选取单个值</mark>，不能一次选取多个值。</p><table><thead><tr><th>文本字符串类型</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td><code>ENUM</code></td><td>L</td><td>1 &lt;= L &lt;= 65535</td><td>1 或 2 个字节</td></tr></tbody></table><blockquote><p>当其包含 1~255 个成员时，需要一个字节存储<br> 当其包含 256~65535 个成员时，需要两个字节存储</p></blockquote><p><strong>示例</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_enum<span class="token punctuation">(</span>
  season <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">&#39;春&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;夏&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;秋&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;冬&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;unknow&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;春&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;秋&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 忽略大小写</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;UNKNOW&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 允许按照角标的方式获取指定索引位置的枚举值</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># Data truncated for column &#39;season&#39; at row 1</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 当ENUM类型的字段没有声明为NOT NULL时，插入NULL也是有效的</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_enum <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="set-类型" tabindex="-1"><a class="header-anchor" href="#set-类型" aria-hidden="true">#</a> SET 类型</h2><p>  SET 表示一个字符串对象，<mark>可以包含 0 个或多个成员</mark>，但成员个数的上限为 64 。<mark>设置字段值时，可以取取值范围内的 0 个或多个值</mark>。<br> 当 SET 类型包含的成员个数不同时，其所占用的存储空间也是不同的，具体如下：</p><table><thead><tr><th>成员个数范围（L 表示实际成员个数）</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>1 &lt;= L &lt;= 8</td><td>1 个字节</td></tr><tr><td>9 &lt;= L &lt;= 16</td><td>2 个字节</td></tr><tr><td>17 &lt;= L &lt;= 24</td><td>3 个字节</td></tr><tr><td>25 &lt;= L &lt;= 32</td><td>4 个字节</td></tr><tr><td>33 &lt;= L &lt;= 64</td><td>8 个字节</td></tr></tbody></table><p><strong>示例</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_set<span class="token punctuation">(</span>
  s <span class="token keyword">SET</span> <span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_set <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;A,B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 插入重复的SET类型成员时，MySQL会自动删除重复的成员</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_set <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;A,B,C,A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 向SET类型的字段插入SET成员中不存在的值时，MySQL会抛出错误。</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_set <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;A,B,C,D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_10-二进制字符串类型" tabindex="-1"><a class="header-anchor" href="#_10-二进制字符串类型" aria-hidden="true">#</a> 10.二进制字符串类型</h2><p>  MySQL 中的二进制字符串类型主要存储一些二进制数据，比如可以存储图片、音频和视频等二进制数据。</p><p>  MySQL 中支持的二进制字符串类型主要包括<code>BINARY</code>、<code>VARBINARY</code>、<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code>和<code>LONGBLOB</code>类型。</p><h3 id="binary-与-varbinary-类型" tabindex="-1"><a class="header-anchor" href="#binary-与-varbinary-类型" aria-hidden="true">#</a> BINARY 与 VARBINARY 类型</h3><table><thead><tr><th>二进制字符串类型</th><th>特点</th><th>值的长度</th><th>占用空间</th></tr></thead><tbody><tr><td><code>BINARY(M)</code></td><td>固定长度</td><td>M (0 &lt;= M &lt;= 255)</td><td>M 个字节</td></tr><tr><td><code>VARBINARY(M)</code></td><td>可变长度</td><td>M (0 &lt;= M &lt;= 65535)</td><td>M+ 1 个字节</td></tr></tbody></table><p>(1) <code>BINARY</code>和<code>VARBINARY</code>类似于<code>CHAR</code>和<code>VARCHAR</code>，只是它们存储的是二进制字符串。</p><p>(2) <code>BINARY(M)</code>为固定长度的二进制字符串，M 表示最多能存储的字节数，取值范围是 0~255 个字符。如果未指定 M，表示只能存储 1 个字节。例如<code>BINARY(8)</code>，表示最多能存储 8 个字节，如果字段值不足 M 个字节，将在右边填充<code>\\0</code>以补齐指定长度。</p><p>(3) <code>VARBINARY(M)</code>为可变长度的二进制字符串，M 表示最多能存储的字节数，总字节数不能超过行的字节长度限制 65535 ，另外还要考虑额外字节开销，<code>VARBINARY</code>类型的数据除了存储数据本身外，还需要 1 或 2 个字节来存储数据的字节数。<mark><code>VARBINARY</code>类型必须指定 M，否则报错</mark>。</p><h3 id="blob-类型" tabindex="-1"><a class="header-anchor" href="#blob-类型" aria-hidden="true">#</a> BLOB 类型</h3><table><thead><tr><th>二进制字符串类型</th><th>值的长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td><code>TINYBLOB</code></td><td>L</td><td>0 &lt;= L &lt;= 255</td><td>L + 1 个字节</td></tr><tr><td><code>BLOB</code></td><td>L</td><td>0 &lt;= L &lt;= 65535（相当于 64KB）</td><td>L + 2 个字节</td></tr><tr><td><code>MEDIUMBLOB</code></td><td>L</td><td>0 &lt;= L &lt;= 16777215 （相当于 16MB）</td><td>L + 3 个字节</td></tr><tr><td><code>LONGBLOB</code></td><td>L</td><td>0 &lt;= L &lt;= 4294967295（相当于 4GB）</td><td>L + 4 个字节</td></tr></tbody></table><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。</p><p>MySQL 中的 BLOB 类型包括<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code>和<code>LONGBLOB</code>， 4 种类型，它们可容纳值的最大长度不同。可以存储一个二进制的大对象，比如图片、音频和视频等。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>需要注意的是，在实际工作中，往往不会在 MySQL 数据库中使用 BLOB 类型存储大对象数据，通常会将图片、音频和视频文件存储到服务器的磁盘上，并将图片、音频和视频的访问路径存储到 MySQL 中。</p></div><p><strong><u><code>TEXT</code>和<code>BLOB</code>的使用注意事项</u></strong>：</p><p>在使用<code>text</code>和<code>blob</code>字段类型时要注意以下几点，以便更好的发挥数据库的性能：</p><p>① <code>BLOB</code>和<code>TEXT</code>值也会引起自己的一些问题，特别是执行了大量的删除或更新操作的时候。删除这种值会在数据表中留下很大的&quot;空洞&quot;，以后填入这些&quot;空洞&quot;的记录可能长度不同。为了提高性能，建议定期使用<code>OPTIMIZE TABLE</code>功能对这类表进行碎片整理。</p><p>② 如果需要对大文本字段进行模糊查询，MySQL 提供了前缀索引。但是仍然要在不必要的时候避免检索大型的<code>BLOB</code>或<code>TEXT</code>值。例如，<code>SELECT *</code>查询就不是很好的想法，除非你能够确定作为约束条件的<code>WHERE</code>子句只会找到所需要的数据行，否则，你可能毫无目的地在网络上传输大量的值。</p><p>③ 把<code>BLOB</code>或<code>TEXT</code>列分离到单独的表中。在某些环境中，如果把这些数据列移动到第二张数据表中，可以让你把原数据表中的数据列转换为固定长度的数据行格式，那么它就是有意义的。这会减少主表中的碎片，使你得到固定长度数据行的性能优势。它还使你在主数据表上运行<code>SELECT *</code>查询的时候不会通过网络传输大量的<code>BLOB</code>或<code>TEXT</code>值。</p><h2 id="json-类型" tabindex="-1"><a class="header-anchor" href="#json-类型" aria-hidden="true">#</a> JSON 类型</h2><p>  JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在网络或者程序之间轻松地传递这个字符串，并在需要的时候将它还原为各编程语言所支持的数据格式。在 MySQL 5.7 中，就已经支持 JSON 数据类型。在 MySQL 8.x 版本中，JSON 类型提供了可以进行自动验证的 JSON 文档和优化的存储结构，使得在 MySQL 中存储和读取 JSON 类型的数据更加方便和高效。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_json<span class="token punctuation">(</span>
  js json
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_json <span class="token punctuation">(</span> js <span class="token punctuation">)</span> <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span> <span class="token string">&#39;{&quot;name&quot;:&quot;lihua&quot;, &quot;age&quot;:18, &quot;address&quot;:{&quot;province&quot;:&quot;shenzhen&quot;,&quot;city&quot;:&quot;nanshan&quot;}}&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>取值方法</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 取某个具体值：单层json</span>
<span class="token comment"># 方式一：A-&gt;&#39;$.B&#39;的方式提取</span>
<span class="token keyword">SELECT</span> js <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">,</span>js <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;$.age&#39;</span> <span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span>
<span class="token comment"># 方式二：json_extract</span>
<span class="token keyword">SELECT</span> json_extract<span class="token punctuation">(</span>js<span class="token punctuation">,</span> <span class="token string">&#39;$.name&#39;</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span>

<span class="token comment">-- 取某个具体值：多层json</span>
<span class="token comment"># json_unquote：去引号</span>
<span class="token keyword">SELECT</span> json_unquote<span class="token punctuation">(</span>json_extract<span class="token punctuation">(</span>json_extract<span class="token punctuation">(</span>js<span class="token punctuation">,</span> <span class="token string">&#39;$.address&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;$.province&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span>
</code></pre></div><h2 id="空间类型" tabindex="-1"><a class="header-anchor" href="#空间类型" aria-hidden="true">#</a> 空间类型</h2><p>MySQL 空间类型扩展支持地理特征的生成、存储和分析。这里的地理特征表示世界上具有位置的任何东西，可以是一个实体，例如一座山；可以是空间，例如一座办公楼；也可以是一个可定义的位置，例如一个十字路口等等。</p><p>MySQL 中使用 Geometry（几何）来表示所有地理特征。Geometry 指一个点或点的集合，代表世界上任何具有位置的事物。</p><p>MySQL 的空间数据类型（Spatial Data Type）对应于 OpenGIS 类，包括单值类型：<code>GEOMETRY</code>、<code>POINT</code>、<code>LINESTRING</code>、<code>POLYGON</code> 以及集合类型：<code>MULTIPOINT</code>、<code>MULTILINESTRING</code>、<code>MULTIPOLYGON</code>、<code>GEOMETRYCOLLECTION</code>。</p><hr><p><strong>单值类型</strong>：<br> Geometry 是所有空间集合类型的基类，其他类型如 POINT、LINESTRING、POLYGON 都是 Geometry 的子类。</p><p>Point，顾名思义就是点，有一个坐标值。例如 POINT(121.213342 31.234532)，POINT(30 10)，坐标值支持 DECIMAL 类型，经度（longitude）在前，维度（latitude）在后，用空格分隔。</p><p>LineString，线，由一系列点连接而成。如果线从头至尾没有交叉，那就是简单的（simple）；如果起点和终点重叠，那就是封闭的（closed）。例如 LINESTRING(30 10,10 30,40 40)，点与点之间用逗号分隔，一个点中的经纬度用空格分隔，与 POINT 格式一致。</p><p>Polygon，多边形。可以是一个实心平面形，即没有内部边界，也可以有空洞，类似纽扣。最简单的就是只有一个外边界的情况，例如 POLYGON((0 0,10 0,10 10, 0 10))。</p><figure><img src="`+k+'" alt="Geometry.png" tabindex="0" loading="lazy"><figcaption>Geometry.png</figcaption></figure><hr><p><strong>集合类型</strong>：<br> MultiPoint、MultiLineString、MultiPolygon、GeometryCollection 这 4 种类型都是集合类，是多个 Point、LineString 或 Polygon 组合而成。</p><figure><img src="'+u+'" alt="Mutipart.png" tabindex="0" loading="lazy"><figcaption>Mutipart.png</figcaption></figure><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>  在定义数据类型时，如果确定是整数，就用 INT；如果是小数，一定用定点数类型 DECIMAL(M,D)； 如果是日期与时间，就用 DATETIME。</p><p>  这样做的好处是，首先确保你的系统不会因为数据类型定义出错。不过，凡事都是有两面的，可靠性好，并不意味着高效。比如，TEXT 虽然使用方便，但是效率不如 CHAR(M) 和 VARCHAR(M)。</p><hr><p>《阿里巴巴 Java 开发手册》- MySQL 数据库</p><p>【强制】小数类型为<code>decimal</code>，禁止使用<code>float</code>和<code>double</code>。<br> 说明：<code>float</code>和<code>double</code>在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过<code>decimal</code>的范围，建议将数据拆成整数和小数分开存储。</p><p>【强制】如果存储的字符串长度几乎相等，使用<code>char</code>定长字符串类型。</p><p>【强制】<code>varchar</code>是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为<code>text</code>，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p><p>【强制】表达是与否概念的字段，必须使用<code>is_xxx</code>的方式命名，数据类型是<code>unsigned tinyint</code><br> （1 表示是，0 表示否）。<br> 说明：任何字段如果为非负数，必须是<code>unsigned</code>。<br> 注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀，所以，需要在<code>&lt;resultMap&gt;</code>设置从<code>is_xxx</code>到<code>Xxx</code>的映射关系。数据库表示是与否的值，使用<code>tinyint</code>类型，坚持<code>is_xxx</code>的命名方式是为了明确其取值含义与取值范围。<br> 正例：表达逻辑删除的字段名<code>is_deleted</code>，1 表示删除，0 表示未删除。</p>',91);function S(N,R){const c=e("ExternalLinkIcon"),o=e("RouterLink");return r(),l("div",null,[h,s("blockquote",null,[s("p",null,[n("扩展：浮点型计算标准-"),s("a",M,[n("IEEE 754"),t(c)])])]),T,s("p",null,[n("(2) 以"),E,n("格式或者"),L,n("格式表示的字符串日期，此格式中，年份为两位数值或字符串满足"),m,n("的格式条件，具体参见"),s("u",null,[t(o,{to:"/backend/database/base/mysql_basic_12.md/#_6-1-year-%E7%B1%BB%E5%9E%8B"},{default:p(()=>[n("YEAR 类型")]),_:1})]),n("介绍")]),y,s("p",null,[n("(2) 以"),b,n("或"),I,n("格式的字符串插入 DATETIME 类型的字段时，两位数的年份规则符合 YEAR 类型的规则，具体参见"),s("u",null,[t(o,{to:"/backend/database/base/mysql_basic_12.md/#_6-1-year-%E7%B1%BB%E5%9E%8B"},{default:p(()=>[n("YEAR 类型")]),_:1})]),n("介绍")]),A])}const g=d(i,[["render",S],["__file","data_type.html.vue"]]);export{g as default};
