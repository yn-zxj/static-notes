import{_ as a,o as e,c as h,a as r}from"./app-de4b1a92.js";const d={},i=r('<h2 id="_1-为什么使用索引" tabindex="-1"><a class="header-anchor" href="#_1-为什么使用索引" aria-hidden="true">#</a> 1.为什么使用索引</h2><h2 id="_2-索引的优缺点" tabindex="-1"><a class="header-anchor" href="#_2-索引的优缺点" aria-hidden="true">#</a> 2.索引的优缺点</h2><h3 id="_2-1-索引概述" tabindex="-1"><a class="header-anchor" href="#_2-1-索引概述" aria-hidden="true">#</a> 2.1 索引概述</h3><h3 id="_2-2-优点" tabindex="-1"><a class="header-anchor" href="#_2-2-优点" aria-hidden="true">#</a> 2.2 优点</h3><h3 id="_2-3-缺点" tabindex="-1"><a class="header-anchor" href="#_2-3-缺点" aria-hidden="true">#</a> 2.3 缺点</h3><h2 id="_3-innodb-中索引的推演" tabindex="-1"><a class="header-anchor" href="#_3-innodb-中索引的推演" aria-hidden="true">#</a> 3.InnoDB 中索引的推演</h2><h3 id="_3-1-索引之前的查找" tabindex="-1"><a class="header-anchor" href="#_3-1-索引之前的查找" aria-hidden="true">#</a> 3.1 索引之前的查找</h3><h3 id="_3-2-设计索引" tabindex="-1"><a class="header-anchor" href="#_3-2-设计索引" aria-hidden="true">#</a> 3.2 设计索引</h3><h3 id="_3-3-常见索引概念" tabindex="-1"><a class="header-anchor" href="#_3-3-常见索引概念" aria-hidden="true">#</a> 3.3 常见索引概念</h3><h3 id="_3-4-innodb-的-b-树索引的注意事项" tabindex="-1"><a class="header-anchor" href="#_3-4-innodb-的-b-树索引的注意事项" aria-hidden="true">#</a> 3.4 InnoDB 的 B+树索引的注意事项</h3><h2 id="_4-myisam-中的索引方案" tabindex="-1"><a class="header-anchor" href="#_4-myisam-中的索引方案" aria-hidden="true">#</a> 4.MyISAM 中的索引方案</h2><h3 id="_4-1-myisam-索引的原理" tabindex="-1"><a class="header-anchor" href="#_4-1-myisam-索引的原理" aria-hidden="true">#</a> 4.1 MyISAM 索引的原理</h3><h3 id="_4-2-myisam-和-innodb-对比" tabindex="-1"><a class="header-anchor" href="#_4-2-myisam-和-innodb-对比" aria-hidden="true">#</a> 4.2 MyISAM 和 InnoDB 对比</h3><h2 id="_5-索引的代价" tabindex="-1"><a class="header-anchor" href="#_5-索引的代价" aria-hidden="true">#</a> 5.索引的代价</h2><h2 id="_6-mysql-数据结构选择的合理性" tabindex="-1"><a class="header-anchor" href="#_6-mysql-数据结构选择的合理性" aria-hidden="true">#</a> 6.MySQL 数据结构选择的合理性</h2><h3 id="_6-1-全表遍历" tabindex="-1"><a class="header-anchor" href="#_6-1-全表遍历" aria-hidden="true">#</a> 6.1 全表遍历</h3><h3 id="_6-2-hash-结构" tabindex="-1"><a class="header-anchor" href="#_6-2-hash-结构" aria-hidden="true">#</a> 6.2 Hash 结构</h3><h3 id="_6-3-二叉搜索树" tabindex="-1"><a class="header-anchor" href="#_6-3-二叉搜索树" aria-hidden="true">#</a> 6.3 二叉搜索树</h3><h3 id="_6-4-avl-树" tabindex="-1"><a class="header-anchor" href="#_6-4-avl-树" aria-hidden="true">#</a> 6.4 AVL 树</h3><h3 id="_6-5-b-tree" tabindex="-1"><a class="header-anchor" href="#_6-5-b-tree" aria-hidden="true">#</a> 6.5 B-Tree</h3><h3 id="_6-6-b-tree" tabindex="-1"><a class="header-anchor" href="#_6-6-b-tree" aria-hidden="true">#</a> 6.6 B+Tree</h3><h3 id="_6-7-r-树" tabindex="-1"><a class="header-anchor" href="#_6-7-r-树" aria-hidden="true">#</a> 6.7 R 树</h3><h3 id="附录-算法的时间复杂度" tabindex="-1"><a class="header-anchor" href="#附录-算法的时间复杂度" aria-hidden="true">#</a> 附录：算法的时间复杂度</h3>',23),n=[i];function t(s,_){return e(),h("div",null,n)}const o=a(d,[["render",t],["__file","data_structure_of_index.html.vue"]]);export{o as default};
