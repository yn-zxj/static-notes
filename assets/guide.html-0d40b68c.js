import{_ as p,j as o,o as e,c,f as a,i as n,g as l,a as s}from"./app-0ca7871b.js";const u="/assets/demo-4a4f7749.png",i="/assets/math-game-1d7b3753.png",k="/assets/arthas-attach-4a235f68.png",r="/assets/web-console-420e4832.png",d="/assets/dashboard-f7f7fe91.png",m="/assets/thread_all-bbd0edc5.png",h="/assets/thread_1-bc73d128.png",g="/assets/jad_demo-54b0e3cf.png",b="/assets/watch_demo-c50f000f.png",f={},w=s(`<h2 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h2><h3 id="准备代码" tabindex="-1"><a class="header-anchor" href="#准备代码" aria-hidden="true">#</a> 准备代码</h3><p>  全量安装时，解压后的目录下有个文件<code>math-game.jar</code>，我们使用<code>java -jar</code>的方式运行它来做后面的测试。</p><blockquote><p>以下是一个简单的 Java 程序，每隔一秒生成一个随机数，再执行质因数分解，并打印出分解结果。</p></blockquote><details class="hint-container details"><summary>案例代码</summary><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">demo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathGame</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 用于统计生成的不合法变量的个数</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> illegalArgumentCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MathGame</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MathGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 死循环，每过 1 秒调用 1 次下面的方法(不是开启一个线程)</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            game<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 分解质因数</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 随机生成 1 万以内的整数</span>
            <span class="token keyword">int</span> number <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10000</span><span class="token punctuation">;</span>
            <span class="token comment">// 调用方法进行质因数分解</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primeFactors <span class="token operator">=</span> <span class="token function">primeFactors</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 打印结果</span>
            <span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> primeFactors<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;illegalArgumentCount:%3d, &quot;</span><span class="token punctuation">,</span>
                    illegalArgumentCount<span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 打印质因数分解的结果</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primeFactors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> factor <span class="token operator">:</span> primeFactors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>factor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算number的质因数分解</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">primeFactors</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果小于 2 ，则抛出异常，并且计数加 1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            illegalArgumentCount<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;number is: &quot;</span> <span class="token operator">+</span> number <span class="token operator">+</span> &quot;<span class="token punctuation">,</span> need <span class="token operator">&gt;=</span>
                    <span class="token number">2</span>&quot;<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 用于保存每个质数</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 分解过程，从 2 开始看能不能整除</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果i大于number就退出循环</span>
            <span class="token comment">// 能整除，则i为一个因数，number为整除的结果再继续从 2 开始</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                number <span class="token operator">=</span> number <span class="token operator">/</span> i<span class="token punctuation">;</span>
                i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 否则i++</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div></details><figure><img src="`+u+`" alt="测试案例.png" width="700" tabindex="0" loading="lazy"><figcaption>测试案例.png</figcaption></figure><h3 id="启动-demo" tabindex="-1"><a class="header-anchor" href="#启动-demo" aria-hidden="true">#</a> 启动 Demo</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> math-game.jar
</code></pre></div><figure><img src="`+i+'" alt="math-game启动.png" width="700" tabindex="0" loading="lazy"><figcaption>math-game启动.png</figcaption></figure><h3 id="启动-arthas" tabindex="-1"><a class="header-anchor" href="#启动-arthas" aria-hidden="true">#</a> 启动 arthas</h3><p>  新开一个终端标签页，启动 arthas 选择需要粘附的进程。这里粘附的就是上一步的演示案例<code>math-game.jar</code>。粘附成功如下图所示。</p><figure><img src="'+k+`" alt="启动arthas.png" width="700" tabindex="0" loading="lazy"><figcaption>启动arthas.png</figcaption></figure><blockquote><p>如果端口号被占用，可以通过以下命令换成另一个端口号执行</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> arthas-boot.jar --telnet-port <span class="token number">9998</span> --http-port <span class="token parameter variable">-1</span>
</code></pre></div></blockquote><h3 id="通过浏览器连接-arthas" tabindex="-1"><a class="header-anchor" href="#通过浏览器连接-arthas" aria-hidden="true">#</a> 通过浏览器连接 arthas</h3>`,14),y={href:"http://127.0.0.1:3658/",target:"_blank",rel:"noopener noreferrer"},_=a("code",null,"--target-ip",-1),x=s('<figure><img src="'+r+'" alt="Web监听.界面png" width="700" tabindex="0" loading="lazy"><figcaption>Web监听.界面png</figcaption></figure><h3 id="dashboard-仪表板" tabindex="-1"><a class="header-anchor" href="#dashboard-仪表板" aria-hidden="true">#</a> dashboard 仪表板</h3><p>输入 dashboard(仪表板)，按回车，会展示当前进程的信息，按<code>ctrl + c</code>可以中断执行。</p><blockquote><p>注：输入前面部分字母，按 tab 可以自动补全命令</p></blockquote><figure><img src="'+d+'" alt="dashboard.png" width="700" tabindex="0" loading="lazy"><figcaption>dashboard.png</figcaption></figure><blockquote><p>上面截图总体分为三部分：<br>  ① 显示 JVM 中运行的所有线程：所在线程组，优先级，线程的状态，CPU 的占用率，是否是后台进程等<br>  ② 显示的 JVM 内存的使用情况<br>  ③ 操作系统的一些信息和 Java 版本号</p></blockquote><h3 id="thread-线程" tabindex="-1"><a class="header-anchor" href="#thread-线程" aria-hidden="true">#</a> thread 线程</h3><p><strong>查看线程</strong>：<br><img src="'+m+'" alt="线程查看.png" width="700" loading="lazy"></p><p><strong>查看 ID 为 1 的线程</strong>：<br><img src="'+h+`" alt="线程ID_1.png" width="700" loading="lazy"></p><h3 id="jad-反编译" tabindex="-1"><a class="header-anchor" href="#jad-反编译" aria-hidden="true">#</a> jad 反编译</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>jad demo.MathGame
jad --source-only demo.MathGame  <span class="token comment"># 只打印源码</span>
</code></pre></div><figure><img src="`+g+`" alt="jad演示.png" width="700" tabindex="0" loading="lazy"><figcaption>jad演示.png</figcaption></figure><h3 id="watch-函数执行数据观测" tabindex="-1"><a class="header-anchor" href="#watch-函数执行数据观测" aria-hidden="true">#</a> watch 函数执行数据观测</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">watch</span> demo.MathGame primeFactors returnObj
</code></pre></div><figure><img src="`+b+'" alt="watch演示.png" width="700" tabindex="0" loading="lazy"><figcaption>watch演示.png</figcaption></figure><h3 id="退出" tabindex="-1"><a class="header-anchor" href="#退出" aria-hidden="true">#</a> 退出</h3><p>  如果只是退出当前的连接，可以用<code>quit</code>或者<code>exit</code>命令。Attach 到目标进程上的 arthas 还会继续运行，端口会保持开放，下次连接时可以直接连接上。</p><p>  如果想完全退出 arthas，可以执行<code>stop</code>命令。</p>',18);function v(j,q){const t=o("ExternalLinkIcon");return e(),c("div",null,[w,a("p",null,[n("  Arthas 目前支持 Web Console，用户在 attach 成功之后，可以直接访问："),a("a",y,[n("http://127.0.0.1:3658/"),l(t)]),n("。可以填入 IP，远程连接其它机器上的 arthas。默认情况下，arthas 只监听 127.0.0.1，所以如果想从远程连接，则可以使用"),_,n(" 参数指定 IP。")]),x])}const A=p(f,[["render",v],["__file","guide.html.vue"]]);export{A as default};
