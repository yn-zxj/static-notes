import{_ as p,N as o,Z as t,a0 as s,a2 as a,a1 as c,$ as n,E as l}from"./framework-e78e4780.js";const r="/assets/privileges_list-a3dca6c0.png",k="/assets/user_info-c36b61f2.png",d={},i=n(`<h2 id="_1-用户管理" tabindex="-1"><a class="header-anchor" href="#_1-用户管理" aria-hidden="true">#</a> 1.用户管理</h2><h3 id="_1-1-登录-mysql-服务器" tabindex="-1"><a class="header-anchor" href="#_1-1-登录-mysql-服务器" aria-hidden="true">#</a> 1.1 登录 MySQL 服务器</h3><p>启动 MySQL 服务器后，可以通过 mysql 命令来登录 MySQL 服务器，命令如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-h</span> <span class="token function">hostname</span><span class="token operator">|</span>hostIP <span class="token parameter variable">-P</span> port <span class="token parameter variable">-u</span> username <span class="token parameter variable">-p</span> databasename <span class="token parameter variable">-e</span> <span class="token string">&#39;query_sql&#39;</span>

<span class="token comment"># 例如</span>
mysql <span class="token parameter variable">-hlocalhost</span> <span class="token parameter variable">-P3306</span> <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> mysql <span class="token parameter variable">-e</span> <span class="token string">&#39;select host,user from user&#39;</span>
</code></pre></div><p>命令中参数说明：<br>  <code>-h hostname|hostIP</code>：连接主机，hostname 为主机，hostIP 为主机 IP<br>  <code>-P port</code>：端口，默认 3306，不使用该参数则自动连接 3306<br>  <code>-u username</code>：登录的用户名<br>  <code>-p password</code>：登录的密码，省略 password 会提示输入密码<br>  <code>databasename</code>：指明连接哪一个数据库<br>  <code>-e &#39;query_sql&#39;</code>：登录 MySQL 服务器后可执行该语句，然后退出 MySQL 服务器</p><h3 id="_1-2-查看用户" tabindex="-1"><a class="header-anchor" href="#_1-2-查看用户" aria-hidden="true">#</a> 1.2 查看用户</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看该表的全部信息</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span>

<span class="token comment"># 查看host、user信息</span>
<span class="token keyword">SELECT</span> host<span class="token punctuation">,</span> <span class="token keyword">user</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_1-3-创建用户" tabindex="-1"><a class="header-anchor" href="#_1-3-创建用户" aria-hidden="true">#</a> 1.3 创建用户</h3><p>CREATE USER 语句的基本语法形式如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> 用户名 <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> 用户名 <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment"># 例如</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> lihua IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;123123&#39;</span><span class="token punctuation">;</span> <span class="token comment"># 默认host是 %</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>说明：<br>  ① 用户名参数表示新建用户的账户，由<code>用户(User)</code>和<code>主机名(Host)</code>构成；<br>  ② <code>[]</code>表示可选，可以指定用户登录时不需要密码验证，不过此方式不安全，不推荐使用。如果指定密码，需要指定明文密码；<br>  ③ <code>CREATE USER</code>语句可以同时创建多个用户。</p><h3 id="_1-4-修改用户" tabindex="-1"><a class="header-anchor" href="#_1-4-修改用户" aria-hidden="true">#</a> 1.4 修改用户</h3><p>修改用户名：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">SET</span> <span class="token keyword">USER</span> <span class="token operator">=</span> <span class="token string">&#39;lihua&#39;</span> <span class="token keyword">WHERE</span> <span class="token keyword">USER</span> <span class="token operator">=</span> <span class="token string">&#39;liming&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span> <span class="token comment"># 刷新权限，否则不生效</span>
</code></pre></div><h3 id="_1-5-删除用户" tabindex="-1"><a class="header-anchor" href="#_1-5-删除用户" aria-hidden="true">#</a> 1.5 删除用户</h3><h4 id="方式一-drop-推荐" tabindex="-1"><a class="header-anchor" href="#方式一-drop-推荐" aria-hidden="true">#</a> 方式一：DROP(推荐)</h4><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token keyword">user</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">user</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token comment"># 例如</span>
<span class="token keyword">DROP</span> <span class="token keyword">USER</span> liming<span class="token punctuation">;</span> <span class="token comment"># 默认删除host为%的用户</span>
<span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">&#39;liming&#39;</span><span class="token variable">@&#39;localhost&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="方式二-delete" tabindex="-1"><a class="header-anchor" href="#方式二-delete" aria-hidden="true">#</a> 方式二：DELETE</h4><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">WHERE</span> host <span class="token operator">=</span> <span class="token string">&#39;hostname&#39;</span> <span class="token operator">AND</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>

<span class="token comment"># 例如</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">WHERE</span> host <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span> <span class="token operator">AND</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">&#39;lihua&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不推荐使用<code>DELETE FROM</code>的方式来删除用户，因为系统会有残留信息保留。而<code>DROP</code>命令会删除用户以及对应的权限，执行命令后你会发现 mysql.user 表和 mysql.db 表的相应记录都消失了。</p></div><h3 id="_1-6-设置当前用户密码" tabindex="-1"><a class="header-anchor" href="#_1-6-设置当前用户密码" aria-hidden="true">#</a> 1.6 设置当前用户密码</h3><p><strong>旧的写法</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 修改当前用户的密码(MySQL 5.7 有效)</span>
<span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>推荐写法</strong>：</p><p>① 使用<code>ALTER USER</code>命令来修改当前用户密码</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token keyword">USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>② 使用<code>SET</code>语句来修改当前用户密码</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 自动将密码加密在赋值给当前用户</span>
<span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span> <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_1-7-修改其它用户密码" tabindex="-1"><a class="header-anchor" href="#_1-7-修改其它用户密码" aria-hidden="true">#</a> 1.7 修改其它用户密码</h3><p>① 使用<code>ALTER</code>语句来修改</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token keyword">user</span> <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">user</span> <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre></div><p>② 使用<code>SET</code>命令来修改</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> <span class="token string">&#39;username&#39;</span><span class="token variable">@&#39;hostname&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>③ 使用<code>UPDATE</code>语句来修改 <mark>(不推荐)</mark></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">SET</span> authentication_string <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">&#39;new_password&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">&#39;username&#39;</span> <span class="token operator">AND</span> host <span class="token operator">=</span> <span class="token string">&#39;hostname&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_1-8-mysql-8-密码管理-了解" tabindex="-1"><a class="header-anchor" href="#_1-8-mysql-8-密码管理-了解" aria-hidden="true">#</a> 1.8 MySQL 8 密码管理(了解)</h3>`,36),u={href:"https://dev.mysql.com/doc/refman/8.0/en/password-management.html#password-expiration-policy",target:"_blank",rel:"noopener noreferrer"},h=n(`<h4 id="_1-8-1-密码过期策略" tabindex="-1"><a class="header-anchor" href="#_1-8-1-密码过期策略" aria-hidden="true">#</a> 1.8.1 密码过期策略</h4><p>  在 MySQL 中，数据库管理员可以<mark>手动设置</mark>账号密码过期，也可以单独建立一个<mark>自动</mark>密码过期策略。过期策略可以是<mark>全局</mark>的，也可以为<mark>每个账号</mark>设置单独的过期策略。</p><p><strong>全局设置</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token keyword">user</span> PASSWORD EXPIRE<span class="token punctuation">;</span>

<span class="token comment"># 例如：设置lihua密码过期</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE<span class="token punctuation">;</span>
</code></pre></div><p> <strong>方式 ①：</strong>：使用 SQL 语句更改该变量并持久化</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 建立全局策略，设置密码每隔180天过期</span>
<span class="token keyword">SET</span> PERSIST default_password_lifetime <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>
</code></pre></div><p> <strong>方式 ② ：</strong>：配置文件 my.cnf 中进行维护</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token comment"># 建立全局策略，设置密码每隔180天过期</span>
<span class="token assign-left variable">default_password_lifetime</span><span class="token operator">=</span><span class="token number">180</span>
</code></pre></div><hr><p><strong>单独设置</strong>：</p><p>  每个账号既可以延用全局密码过期策略，也可以单独设置策略。在<code>CREATE USER</code>和<code>ALTER USER</code>语句上加入<code>PASSWORD EXPIRE</code>选项可实现单独设置策略。</p><p>示例如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 设置lihua账号密码每90天过期</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE <span class="token keyword">INTERVAL</span> <span class="token number">90</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE <span class="token keyword">INTERVAL</span> <span class="token number">90</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>

<span class="token comment"># 设置密码永不过期</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE NEVER<span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE NEVER<span class="token punctuation">;</span>

<span class="token comment"># 延用全局密码过期策略</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE <span class="token keyword">DEFAULT</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE <span class="token keyword">DEFAULT</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="_1-8-2-密码重用策略" tabindex="-1"><a class="header-anchor" href="#_1-8-2-密码重用策略" aria-hidden="true">#</a> 1.8.2 密码重用策略</h4><p>  MySQL 允许对重复使用以前的密码进行限制。重用限制可以根据密码更改的次数、经过的时间或两者都建立。重用策略可以全局建立，单个帐户可以设置为服从全局策略，也可以使用特定的每个帐户行为覆盖全局策略。</p><p><strong>全局设置</strong>：</p><p> <strong>方式 ①</strong>：使用 SQL</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 设置不能选择最近使用过的6个密码</span>
<span class="token keyword">SET</span> PERSIST password_history <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token comment"># 设置不能选择最近365天内的密码</span>
<span class="token keyword">SET</span> PERSIST password_reuse_interval <span class="token operator">=</span> <span class="token number">365</span><span class="token punctuation">;</span>
</code></pre></div><p> <strong>方式 ②</strong>：修改 my.cnf 配置文件</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token assign-left variable">password_history</span><span class="token operator">=</span><span class="token number">6</span>
<span class="token assign-left variable">password_reuse_interval</span><span class="token operator">=</span><span class="token number">365</span>
</code></pre></div><hr><p><strong>单独设置</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 不能使用最近5个密码</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD HISTORY <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD HISTORY <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment"># 不是使用最近365天内的密码</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD REUSE <span class="token keyword">INTERVAL</span> <span class="token number">365</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD REUSE <span class="token keyword">INTERVAL</span> <span class="token number">365</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>

<span class="token comment"># 即不能使用最近5个密码，也不能使用365天内的密码</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span>
  PASSWORD HISTORY <span class="token number">5</span>
  PASSWORD REUSE <span class="token keyword">INTERVAL</span> <span class="token number">365</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span>
  PASSWORD HISTORY <span class="token number">5</span>
  PASSWORD REUSE <span class="token keyword">INTERVAL</span> <span class="token number">365</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_2-权限管理" tabindex="-1"><a class="header-anchor" href="#_2-权限管理" aria-hidden="true">#</a> 2.权限管理</h2><h3 id="_2-1-权限列表" tabindex="-1"><a class="header-anchor" href="#_2-1-权限列表" aria-hidden="true">#</a> 2.1 权限列表</h3><p>MySQL 权限列表查看：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">privileges</span><span class="token punctuation">;</span>
</code></pre></div><figure><img src="`+r+`" alt="权限列表.png" tabindex="0" loading="lazy"><figcaption>权限列表.png</figcaption></figure><hr><p>下面简单说明一下各个权限的作用，其余说明见上面的权限列表图：</p><p>① <code>CREATE 和 DROP权限</code><br>   可以创建新的数据库和表，或删除(移掉)已有的数据库和表。如果将 MySQL 数据库中的 DROP 权限授予某用户，用户就可以删除 MySQL 访问权限保存的数据库。</p><p>② <code>SELECT、INSERT、UPDATE 和 DELETE权限</code><br>   允许在一个数据库现有的表上实施操作。</p><p>③ <code>SELECT权限</code><br>   只有在它真正从一个表中检索行时才被用到。</p><p>④ <code>INDEX权限</code><br>   允许创建或删除索引，INDEX 适用于已有的表。如果具有某个表的 CREATE 权限，就可以在 CREATE TABLE 语句中定义索引。</p><p>⑤ <code>ALTER权限</code><br>   可以使用 ALTER TABLE 来更改表的结构和重新命名表。</p><p>⑥ <code>CREATE ROUTINE 和 EXECUTE权限</code><br>   创建保存的程序(函数和程序)。<code>ALTER ROUTINE权限</code>用来更改和删除保存的程序，<code>EXECUTE权限</code>用来执行保存的程序。</p><p>⑦ <code>GRANT权限</code><br>   允许授权给其它用户，可用于数据库、表和保存的程序。</p><p>⑧ <code>FILE权限</code><br>   使用户可以使用 LOAD DATA INFILE 和 SELECT...INTO OUTFILE 语句读或写服务器上的文件，任何被授予 FILE 权限的用户都能读或写 MySQL 服务器上的任何文件(说明用户可以读任何数据库目录下的文件，因为服务器可以访问这些文件)。</p><h3 id="_2-2-授予权限的原则" tabindex="-1"><a class="header-anchor" href="#_2-2-授予权限的原则" aria-hidden="true">#</a> 2.2 授予权限的原则</h3><p>权限控制主要是出于安全因素，因此需要遵循以下几个经验原则：<br>   ① 只授予能<mark>满足需要的最小权限</mark>，防止用户干坏事。比如用户只要查询，就只给 SELECT 权限，不需要给 UPDATE、INSERT 等权限；<br>   ② 创建用户时<mark>限制用户的登录主机</mark>，一般是限制成指定 IP 或内网 IP 段；<br>   ③ 为每个用户<mark>设置满足密码复杂度的密码</mark>；<br>   ④ <mark>定期清理不需要的用户</mark>，回收权限或删除用户。</p><h3 id="_2-3-授予权限" tabindex="-1"><a class="header-anchor" href="#_2-3-授予权限" aria-hidden="true">#</a> 2.3 授予权限</h3><p>给用户授权的方式有两种。分别是通过把<mark>角色赋予用户给用户授权</mark>和<mark>直接给用户授权</mark>。用户是数据库的使用者，我们可以通过给用户授予访问数据库中资源的权限，来控制使用者对数据库的访问，消除安全隐患。</p><p><strong>授权命令</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span> 权限<span class="token number">1</span><span class="token punctuation">,</span> 权限<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 权限n <span class="token keyword">ON</span> 数据库名称<span class="token punctuation">.</span>表名称 <span class="token keyword">TO</span> 用户名@用户地址 <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;密码口令&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>该权限如果发现没有该用户，则会直接新建一个用户</p></blockquote><p>例如：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 给本地登录用户lihua授予test库下所有表增删改查的权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">DELETE</span><span class="token punctuation">,</span> <span class="token keyword">UPDATE</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> test<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span><span class="token punctuation">;</span>

<span class="token comment"># 给网络登录用户zhangsan授予所有库所有表的全部权限，密码设置123 (注意：这里唯独不包含grant的权限)</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;zhangsan&#39;</span> <span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>① 如果要赋予<code>GRANT</code>权限，添加参数<code>WITH GRANT OPTION</code>这个选项，表示用户可以将自己拥有的权限授权给别人；<br><code>GRANT SELECT, DELETE, UPDATE, INSERT ON test.* TO &#39;lihua&#39;@&#39;localhost&#39; WITH GRANT OPTION;</code></p><p>② 可以使用<code>GRANT</code>重复给用户添加权限，此时权限叠加。</p></div><h3 id="_2-4-查看权限" tabindex="-1"><a class="header-anchor" href="#_2-4-查看权限" aria-hidden="true">#</a> 2.4 查看权限</h3><p><strong>查看当前用户权限</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> GRANTS<span class="token punctuation">;</span>
<span class="token comment"># 或</span>
<span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token keyword">CURRENT_USER</span><span class="token punctuation">;</span>
<span class="token comment"># 或</span>
<span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token keyword">CURRENT_USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>查看某用户的全局权限</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">&#39;user&#39;</span><span class="token variable">@&#39;主机地址&#39;</span><span class="token punctuation">;</span>

<span class="token comment"># 如</span>
<span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_2-5-收回权限" tabindex="-1"><a class="header-anchor" href="#_2-5-收回权限" aria-hidden="true">#</a> 2.5 收回权限</h3><p>收回权限就是取消已经赋予用户的某些权限。收回用户不必要的权限可以在一定程度上保证系统的安全性。MySQL 中使用<code>REVOKE</code>语句取消用户的某些权限。使用之后用户的记录将从 db、host、tables_priv 和 column_priv 表中删除，但是用户的记录仍然在 user 表中保存（删除 user 表中记录使用 DROP USER 语句）。</p><p><strong>回收权限</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">REVOKE</span> 权限<span class="token number">1</span><span class="token punctuation">,</span> 权限<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 权限n <span class="token keyword">ON</span> 数据库名称<span class="token punctuation">.</span>表名称 <span class="token keyword">FROM</span> 用户名@用户地址<span class="token punctuation">;</span>
</code></pre></div><p>举例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 回收lihua的全库全表的所有权限</span>
<span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span><span class="token keyword">INSERT</span><span class="token punctuation">,</span><span class="token keyword">UPDATE</span><span class="token punctuation">,</span><span class="token keyword">DELETE</span> <span class="token keyword">ON</span> mysql<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>① 回收权限后需要用户重新登录才能生效；</p><p>② 在用户从 user 表删除之前，应该收回相应用户的所有权限。</p></div><h2 id="_3-权限表" tabindex="-1"><a class="header-anchor" href="#_3-权限表" aria-hidden="true">#</a> 3.权限表</h2><h3 id="_3-1-user-表" tabindex="-1"><a class="header-anchor" href="#_3-1-user-表" aria-hidden="true">#</a> 3.1 user 表</h3><p>user 表时 MySQL 中最重要的一个权限表，用于记录用户账户和权限信息，其字段如下：</p><figure><img src="`+k+`" alt="user表字段.png" tabindex="0" loading="lazy"><figcaption>user表字段.png</figcaption></figure><blockquote><p>不同版本字段数量可能略微不同</p></blockquote><p>这些字段可以分为四类，分别是范围列(或用户列)、权限列、安全列和资源控制列。</p><h4 id="_3-1-1-范围列-或用户列" tabindex="-1"><a class="header-anchor" href="#_3-1-1-范围列-或用户列" aria-hidden="true">#</a> 3.1.1 范围列(或用户列)</h4><p><code>host</code>：表示连接类型<br>  <code>%</code>：表示所有远程通过 TCP 方式的连接<br>  <code>IP地址</code>：通过指定 ip 地址进行 TCP 方式的连接<br>  <code>机器名</code>：通过指定网络中的机器名进行 TCP 方式的连接<br>  <code>::1</code>：IPv6 的本地 ip 地址，等同于 IPv4 的 127.0.0.1<br>  <code>localhost</code>：本地方式通过命令行方式的连接</p><p><code>user</code>：表示用户名，同一用户名通过不同方式连接权限是不一样的</p><p><code>password</code>：密码<br>  ① 所有密码串通过 password(明文字符串)生成的密文字符串。MySQL 8.0 在用户管理方面增加了角色管理，默认的密码加密方式也做了调整，由之前的 SHA1 改为了 SHA2，不可逆。同时加上 MySQL 5.7 的禁用用户和用户过期功能，MySQL 在用户管理方面的功能和安全性都较之前版本大大的增强了。<br>  ② MySQL 5.7 及之后版本的密码保存到 authentication_string 字段中，不在使用 password 字段。</p><h4 id="_3-1-2-权限列" tabindex="-1"><a class="header-anchor" href="#_3-1-2-权限列" aria-hidden="true">#</a> 3.1.2 权限列</h4><p><code>Grant_priv字段</code>：表示是否拥有 GRANT 权限</p><p><code>Shutdown_priv字段</code>：表示是否拥有停止 MySQL 服务的权限</p><p><code>Super_priv字段</code>：表示是否拥有超级权限</p><p><code>Execute_priv字段</code>：表示是否拥有 EXECUTE 权限。用户该权限，可以执行存储过程和函数</p><p><code>Select_priv、Insert_priv</code>等：为该用户所拥有的权限</p><h4 id="_3-1-3-安全列" tabindex="-1"><a class="header-anchor" href="#_3-1-3-安全列" aria-hidden="true">#</a> 3.1.3 安全列</h4><p>  安全列只有 6 个字段，其中两个是 ssl 相关的(ssl_type、ssl_cipher)，用于<mark>加密</mark>；两个是 x509 相关的(x509_issuer、x509_subject)用于<mark>标识用户</mark>；另外两个 Plugin 字段用于<mark>验证用户身份</mark>的插件，该字段不能为空。如果为空，服务器就是用内建授权验证机制验证用户身份。</p><h4 id="_3-1-4-资源控制列" tabindex="-1"><a class="header-anchor" href="#_3-1-4-资源控制列" aria-hidden="true">#</a> 3.1.4 资源控制列</h4><p>  资源控制列的字段用来<mark>限制用户使用的资源</mark>，包含 4 个字段，分别为：<br>    ① <code>max_questions</code>：用户每小时允许执行的查询操作次数；<br>    ② <code>max_updates</code>：用户每小时允许执行的更新操作次数；<br>    ③ <code>max_connections</code>：用户每小时允许执行的连接操作次数；<br>    ④ <code>max_user_connections</code>：用户允许同时建立的连接次数。</p><h3 id="_3-2-db-表" tabindex="-1"><a class="header-anchor" href="#_3-2-db-表" aria-hidden="true">#</a> 3.2 db 表</h3><h3 id="_3-3-tables-priv-表和-columns-priv-表" tabindex="-1"><a class="header-anchor" href="#_3-3-tables-priv-表和-columns-priv-表" aria-hidden="true">#</a> 3.3 tables_priv 表和 columns_priv 表</h3><h3 id="_3-4-procs-priv-表" tabindex="-1"><a class="header-anchor" href="#_3-4-procs-priv-表" aria-hidden="true">#</a> 3.4 procs_priv 表</h3><h2 id="_4-访问控制-了解" tabindex="-1"><a class="header-anchor" href="#_4-访问控制-了解" aria-hidden="true">#</a> 4.访问控制(了解)</h2><h2 id="_5-角色管理" tabindex="-1"><a class="header-anchor" href="#_5-角色管理" aria-hidden="true">#</a> 5.角色管理</h2><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>
</code></pre></div>`,86);function E(g,y){const e=l("ExternalLinkIcon");return o(),t("div",null,[i,s("p",null,[a("官网手册说明："),s("a",u,[a("MySQL 8.0"),c(e)])]),h])}const m=p(d,[["render",E],["__file","user_and_privilege.html.vue"]]);export{m as default};
