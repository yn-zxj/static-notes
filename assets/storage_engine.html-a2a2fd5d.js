import{_ as d,j as r,o as p,c,f as n,i as t,g as s,w as e,a as o}from"./app-08ac72c0.js";const l="/assets/show_engines-836936ac.png",i={},k=o(`<h2 id="_1-查看存储引擎" tabindex="-1"><a class="header-anchor" href="#_1-查看存储引擎" aria-hidden="true">#</a> 1.查看存储引擎</h2><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> engines<span class="token punctuation">;</span>
</code></pre></div><figure><img src="`+l+`" alt="查看存储引擎.png" tabindex="0" loading="lazy"><figcaption>查看存储引擎.png</figcaption></figure><h2 id="_2-设置系统默认的存储引擎" tabindex="-1"><a class="header-anchor" href="#_2-设置系统默认的存储引擎" aria-hidden="true">#</a> 2.设置系统默认的存储引擎</h2><p>① 查看默认的存储引擎</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%storage_engine%&#39;</span><span class="token punctuation">;</span>

<span class="token operator">+</span><span class="token comment">----------------------------------+--------+</span>
<span class="token operator">|</span> Variable_name                    <span class="token operator">|</span> <span class="token keyword">Value</span>  <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------------------------------+--------+</span>
<span class="token operator">|</span> default_storage_engine           <span class="token operator">|</span> <span class="token keyword">InnoDB</span> <span class="token operator">|</span>
<span class="token operator">|</span> default_tmp_storage_engine       <span class="token operator">|</span> <span class="token keyword">InnoDB</span> <span class="token operator">|</span>
<span class="token operator">|</span> disabled_storage_engines         <span class="token operator">|</span>        <span class="token operator">|</span>
<span class="token operator">|</span> internal_tmp_disk_storage_engine <span class="token operator">|</span> <span class="token keyword">InnoDB</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------------------------------+--------+</span>
<span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

<span class="token comment"># 或</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> @<span class="token variable">@default_storage_engine</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------------------+</span>
<span class="token operator">|</span> @<span class="token variable">@default_storage_engine</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------------+</span>
<span class="token operator">|</span> <span class="token keyword">InnoDB</span>                   <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre></div><p>② 修改默认的存储引擎</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> default_storage_engine <span class="token operator">=</span> MyISAM<span class="token punctuation">;</span>

<span class="token comment"># 或 my.cnf 配置文件</span>
default_storage_engine<span class="token operator">=</span>MyISAM<span class="token punctuation">;</span>
systemctl restart mysqld<span class="token punctuation">.</span>service <span class="token comment"># 重启服务</span>
</code></pre></div><h2 id="_3-设置表的存储引擎" tabindex="-1"><a class="header-anchor" href="#_3-设置表的存储引擎" aria-hidden="true">#</a> 3.设置表的存储引擎</h2><h3 id="_3-1-创建表时指定存储引擎" tabindex="-1"><a class="header-anchor" href="#_3-1-创建表时指定存储引擎" aria-hidden="true">#</a> 3.1 创建表时指定存储引擎</h3><p>如果建表之前没指定存储引擎，就是使用默认的存储引擎。如果需要显示的指定表的存储引擎，如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">(</span>
  建表语句<span class="token punctuation">;</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> 存储引擎名称<span class="token punctuation">;</span>
</code></pre></div><h3 id="_3-2-修改表的存储引擎" tabindex="-1"><a class="header-anchor" href="#_3-2-修改表的存储引擎" aria-hidden="true">#</a> 3.2 修改表的存储引擎</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ENGINE</span> <span class="token operator">=</span> 存储引擎名称<span class="token punctuation">;</span>
</code></pre></div><h2 id="_4-引擎介绍" tabindex="-1"><a class="header-anchor" href="#_4-引擎介绍" aria-hidden="true">#</a> 4.引擎介绍</h2><h3 id="_4-1-innodb-引擎-具备外键支持功能的事务存储引擎" tabindex="-1"><a class="header-anchor" href="#_4-1-innodb-引擎-具备外键支持功能的事务存储引擎" aria-hidden="true">#</a> 4.1 InnoDB 引擎：具备外键支持功能的事务存储引擎</h3>`,16),u=n("u",null,"并在 MySQL 5.5 及之后，默认作为数据的存储引擎",-1),h=n("br",null,null,-1),_=n("mark",null,"默认事务型引擎",-1),m=n("br",null,null,-1),b=n("br",null,null,-1),y=n("mark",null,"除非有非常特别的原因需要使用其它的存储引擎，否则应该优先考虑使用 InnoDB 存储引擎",-1),g=n("br",null,null,-1),M=n("br",null,null,-1),B=n("br",null,null,-1),f=n("br",null,null,-1),I=n("mark",null,"为处理巨大数据量的最大性能设计",-1),w=n("br",null,null,-1),S=n("br",null,null,-1),A=n("code",null,".frm",-1),E=n("code",null,".par",-1),x=n("code",null,".trn",-1),q=n("code",null,".isl",-1),D=n("code",null,".db.opt",-1),L=n("br",null,null,-1),v=n("mark",null,"对内存要求较高",-1),C=n("h3",{id:"_4-2-myisam-引擎-主要的非事务处理存储引擎",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-2-myisam-引擎-主要的非事务处理存储引擎","aria-hidden":"true"},"#"),t(" 4.2 MyISAM 引擎：主要的非事务处理存储引擎")],-1),N=n("mark",null,"它不支持事务、行级锁、外键",-1),Q=n("br",null,null,-1),T=n("br",null,null,-1),V=n("code",null,"SELECT",-1),R=n("code",null,"INSERT",-1),O=n("br",null,null,-1),Y=n("code",null,"COUNT(*)",-1),F=n("br",null,null,-1),G=n("br",null,null,-1),U=n("br",null,null,-1),z=n("br",null,null,-1),H=n("br",null,null,-1),K=o(`<h3 id="_4-3-archive-引擎-用于数据存档" tabindex="-1"><a class="header-anchor" href="#_4-3-archive-引擎-用于数据存档" aria-hidden="true">#</a> 4.3 Archive 引擎：用于数据存档</h3><table><thead><tr><th>特征</th><th>支持情况</th></tr></thead><tbody><tr><td>B 树索引</td><td>不支持</td></tr><tr><td>备份 时间点恢复</td><td>支持</td></tr><tr><td>集群数据库支持</td><td>不支持</td></tr><tr><td>聚集索引</td><td>不支持</td></tr><tr><td>压缩数据</td><td>支持</td></tr><tr><td>数据缓存</td><td>不支持</td></tr><tr><td>加密数据(加密功能在服务器中实现)</td><td>支持</td></tr><tr><td>外键支持</td><td>不支持</td></tr><tr><td>全文检索索引</td><td>不支持</td></tr><tr><td>地理空间数据类型支持</td><td>支持</td></tr><tr><td>地理空间索引支持</td><td>不支持</td></tr><tr><td>哈希索引</td><td>不支持</td></tr><tr><td>索引缓存</td><td>不支持</td></tr><tr><td>锁粒度</td><td>行锁</td></tr><tr><td>MVCC</td><td>不支持</td></tr><tr><td>存储限制</td><td>没有任何限制</td></tr><tr><td>交易</td><td>不支持</td></tr><tr><td>更新数据字典的统计信息</td><td>支持</td></tr></tbody></table><h3 id="_4-4-blackhole-引擎-丢弃写操作-读操作会返回空内容" tabindex="-1"><a class="header-anchor" href="#_4-4-blackhole-引擎-丢弃写操作-读操作会返回空内容" aria-hidden="true">#</a> 4.4 Blackhole 引擎：丢弃写操作，读操作会返回空内容</h3><h3 id="_4-5-csv-引擎-存储数据时-以逗号分隔各个数据项" tabindex="-1"><a class="header-anchor" href="#_4-5-csv-引擎-存储数据时-以逗号分隔各个数据项" aria-hidden="true">#</a> 4.5 CSV 引擎：存储数据时，以逗号分隔各个数据项</h3><p>案例分析：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span>i <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> c <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> CSV<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.06</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;record one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;record two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.05</span> sec<span class="token punctuation">)</span> Records: <span class="token number">2</span> Duplicates: <span class="token number">0</span> <span class="token keyword">Warnings</span>: <span class="token number">0</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---+------------+</span>
<span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> record one <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> record two <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---+------------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre></div><p> 创建 CSV 表还会创建相应的元文件，用于<mark>存储表的状态</mark>和<mark>表中存在的行数</mark>。在文件的名称与表的名称相同，后缀为<code>CSM</code>，上面的表则会创建出<code>test.CSV</code>和<code>test.CSM</code>两个文件。</p><p> 如果检查<code>test.CSV</code>通过执行上述语句创建的数据库目录中的文件，打开如下：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>&quot;1&quot;,&quot;record one&quot;
&quot;2&quot;,&quot;record two&quot;
</code></pre></div><h3 id="_4-6-memory-引擎-置于内存的表" tabindex="-1"><a class="header-anchor" href="#_4-6-memory-引擎-置于内存的表" aria-hidden="true">#</a> 4.6 Memory 引擎：置于内存的表</h3><p><strong>概述</strong>：</p><p> Memory 采用的逻辑介质是内存，响应速度很快，但是当 mysqld 守护进程崩溃的时候数据就会丢失。另外，要求存储的数据是数据长度不变的格式，比如：Blob 和 Text 类型的数据不可用(长度不固定的)。</p><p> <strong>主要特征</strong>：</p><p>  ① Memory 同时支持哈希(Hash)索引和 B+树索引；<br>   ② Memory 表至少比 MyISAM 要快一个数量级；<br>   ③ Memory 表的大小是受限制的，表的大小主要取决于两个参数，分别是<code>max_rows</code>和<code>max_heap_table_size</code>。其中前者可以在创建表时指定；后者的大小默认是 16MB，不过可以按需进行扩大；<br>   ④ 数据文件与索引文件分开存储；<br>   ⑤ 缺点：其数据易丢失，生命周期短。基于这个缺陷，选择 Memory 存储引擎时需要特别小心。</p><p><strong>使用 Memory 存储引擎的场景</strong>：</p><p>  ① 目标数据比较小，而且非常频繁的进行访问。在内存中存放数据，如果太大的数据会造成内存溢出，可以通过修改<code>max_heap_table_size</code>控制表的大小；<br>   ② 如果数据是临时的，而且必须立即可用，那么就可以放在内存中；<br>   ③ 存储在 Memory 表中的数据如果突然间丢失的话也没有太大的关系。</p><h3 id="_4-7-federated-引擎-访问远程表" tabindex="-1"><a class="header-anchor" href="#_4-7-federated-引擎-访问远程表" aria-hidden="true">#</a> 4.7 Federated 引擎：访问远程表</h3><p> Federated 引擎是访问其它 MySQL 服务器的一个代理，尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题，因此<mark>默认是禁用的</mark>。</p><h3 id="_4-8-merge-引擎-管理多个-myisam-表构成的表集合" tabindex="-1"><a class="header-anchor" href="#_4-8-merge-引擎-管理多个-myisam-表构成的表集合" aria-hidden="true">#</a> 4.8 Merge 引擎：管理多个 MyISAM 表构成的表集合</h3><h3 id="_4-9-ndm-引擎-mysql-集群专用存储引擎" tabindex="-1"><a class="header-anchor" href="#_4-9-ndm-引擎-mysql-集群专用存储引擎" aria-hidden="true">#</a> 4.9 NDM 引擎：MySQL 集群专用存储引擎</h3><p> 也叫做<code>NDM Cluster</code>存储引擎，主要用于 MySQL Cluster 分布式集群环境，类似于 Oracle 的 RAC 集群。</p><h3 id="_4-10-引擎对比" tabindex="-1"><a class="header-anchor" href="#_4-10-引擎对比" aria-hidden="true">#</a> 4.10 引擎对比</h3><p>MySQL 中同一个数据库，不同的表可以选择不同的存储引擎，如下表对常用存储引擎做出了对比。</p><table><thead><tr><th>特点</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th><th>Merge</th><th>NDB</th></tr></thead><tbody><tr><td>存储限制</td><td>有</td><td>64TB</td><td>有</td><td>没有</td><td>有</td></tr><tr><td>事务安全</td><td>-</td><td>支持</td><td>-</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>表锁</td><td>行锁</td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>B 数索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td>-</td><td>-</td><td>支持</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>集群索引</td><td>-</td><td>支持</td><td>-</td><td>-</td><td>-</td></tr><tr><td>数据缓存</td><td>-</td><td>支持</td><td>支持</td><td>-</td><td>支持</td></tr><tr><td>索引缓存</td><td>只缓存索引</td><td>缓存索引及真是数据，对内存要求较高</td><td>支持</td><td>支持</td><td>-</td></tr><tr><td>数据可压缩</td><td>支持</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td>N/A</td><td>低</td><td>低</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中等</td><td>低</td><td>高</td></tr><tr><td>批量插入的速度</td><td>高</td><td>低</td><td>高</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>-</td><td>支持</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><blockquote><p>我们最常用的就是 InnoDB 和 MyISAM，有时会提一下 Memory。其中 InnoDB 是 MySQL 的默认存储引擎(MySQL 5.5 开始)</p></blockquote><h2 id="_5-myisam-和-innodb" tabindex="-1"><a class="header-anchor" href="#_5-myisam-和-innodb" aria-hidden="true">#</a> 5.MyISAM 和 InnoDB</h2><p>很多人对 InnoDB 和 MyISAM 的取舍存在疑问，到底选择哪个比较好？</p><blockquote><p>MySQL 5.5 之前的默认存储引擎是 MyISAM，之后改成了 InnoDB。</p></blockquote><table><thead><tr><th>对比项</th><th>MyISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>行表锁</td><td>表锁，即使操作一条记录也会锁住整个表，不适合高并发的操作</td><td>行锁，操作某一行记录，不对其它行产生影响，适合高并发的操作</td></tr><tr><td>缓存</td><td>只缓存索引，不缓存真实数据</td><td>不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响</td></tr><tr><td>自带系统表使用</td><td>Y</td><td>N</td></tr><tr><td>关注点</td><td>性能：节省资源、消耗少、简单业务</td><td>事务：并发写、事务、更大资源</td></tr><tr><td>默认安装</td><td>Y</td><td>Y</td></tr><tr><td>默认使用</td><td>N</td><td>Y</td></tr></tbody></table><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>① Percona 为 MySQL 数据库服务器进行了改进，在功能和性能上较 MySQL 有很显著的提升；<br> ② 该版本提升了在高负载情况下的 InnoDB 的性能，为 DBA 提供一些非常有用的性能诊断工具；另外有更多的参数和命令来控制服务器行为；<br> ③ 该公司新建了一款存储引擎叫<code>Xtradb</code>完全可以替代<code>InnoDB</code>，并且在性能和并发上做得更好；<br> ④ 阿里巴巴大部分 MySQL 数据库其实使用的 percona 的原型加以修改。</p></div><h2 id="课外补充" tabindex="-1"><a class="header-anchor" href="#课外补充" aria-hidden="true">#</a> 课外补充</h2><h3 id="_1-innodb-表优势" tabindex="-1"><a class="header-anchor" href="#_1-innodb-表优势" aria-hidden="true">#</a> 1.InnoDB 表优势</h3><h3 id="_2-innodb-和-acid-模型" tabindex="-1"><a class="header-anchor" href="#_2-innodb-和-acid-模型" aria-hidden="true">#</a> 2.InnoDB 和 ACID 模型</h3><h3 id="_3-innodb-架构" tabindex="-1"><a class="header-anchor" href="#_3-innodb-架构" aria-hidden="true">#</a> 3.InnoDB 架构</h3>`,35);function j(P,W){const a=r("RouterLink");return p(),c("div",null,[k,n("p",null,[t(" ① MySQL 从 3.23.34a 开始就包含 InnoDB 存储引擎，"),u,t("；"),h,t("  ② InnoDB 是 MySQL 的"),_,t("，它被设计用来处理大量的短期(short-lived)事务。可以确保事务的完整提交(Commit)和回滚(Rollback)；"),m,t("  ③ 除了增加和查询外，还需要更新、删除操作，那么应优先选择 InnoDB 存储引擎；"),b,t("  ④ "),y,t("；"),g,t("  ⑤ 数据文件结构：详情参考："),s(a,{to:"/backend/database/advanced/dir_of_mysql.html#_2-3-%E8%A1%A8%E5%9C%A8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA"},{default:e(()=>[t("MySQL 的数据目录-InnoDB 存储引擎模式")]),_:1}),M,t("   - 表名.frm 存储表结构(MySQL 8.0 时，合并在表名.ibd 中)"),B,t("   - 表名.ibd 存储数据和索引"),f,t("  ⑥ InnoDB 是"),I,t("；"),w,t("  ⑦ 对比 MyISAM 的存储引擎，InnoDB 写的处理效率差一些，并且会占用更多的磁盘空间以保存数据和索引；"),S,t("   - 在以前的版本中，字典数据以元数据文件、非事务表等来存储。现在这些元数据文件被删除了，比如："),A,t("、"),E,t("、"),x,t("、"),q,t("、"),D,t("等在 MySQL 8.0 中不存在了；"),L,t("  ⑧ MyISAM 只缓存索引，不缓存真实数据；InnoDB 不仅缓存索引还要缓存真实数据，"),v,t("，而且内存大小对性能有决定性的影响；")]),C,n("p",null,[t(" ① MyISAM 提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但"),N,t("，有一个毫无疑问的缺陷就是崩溃后无法安全恢复；"),Q,t("  ② MySQL 5.5 之前默认使用的存储引擎；"),T,t("  ③ 优势是访问的速度快，对事务完整性没有要求或以"),V,t("、"),R,t("为主的应用；"),O,t("  ④ 针对数据统计有额外的常数存储，故而"),Y,t("的查询效率很高；"),F,t("  ⑤ 数据文件结构：详情参考："),s(a,{to:"/backend/database/advanced/dir_of_mysql.html#_2-3-%E8%A1%A8%E5%9C%A8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA"},{default:e(()=>[t("MySQL 的数据目录-InnoDB 存储引擎模式")]),_:1}),G,t("   - 表名.frm 存储表结构"),U,t("   - 表名.MYD 存储数据"),z,t("   - 表名.MYI 存储索引"),H,t("  ⑥ 应用场景：只读应用或者以读为主的业务")]),K])}const J=d(i,[["render",j],["__file","storage_engine.html.vue"]]);export{J as default};
