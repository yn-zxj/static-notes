import{_ as p,N as o,Z as t,a0 as s,a2 as a,a1 as c,$ as n,E as l}from"./framework-e78e4780.js";const r="/assets/privileges_list-127c805e.png",k={},d=n(`<h2 id="_1-用户管理" tabindex="-1"><a class="header-anchor" href="#_1-用户管理" aria-hidden="true">#</a> 1.用户管理</h2><h3 id="_1-1-登录-mysql-服务器" tabindex="-1"><a class="header-anchor" href="#_1-1-登录-mysql-服务器" aria-hidden="true">#</a> 1.1 登录 MySQL 服务器</h3><p>启动 MySQL 服务器后，可以通过 mysql 命令来登录 MySQL 服务器，命令如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-h</span> <span class="token function">hostname</span><span class="token operator">|</span>hostIP <span class="token parameter variable">-P</span> port <span class="token parameter variable">-u</span> username <span class="token parameter variable">-p</span> databasename <span class="token parameter variable">-e</span> <span class="token string">&#39;query_sql&#39;</span>

<span class="token comment"># 例如</span>
mysql <span class="token parameter variable">-hlocalhost</span> <span class="token parameter variable">-P3306</span> <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> mysql <span class="token parameter variable">-e</span> <span class="token string">&#39;select host,user from user&#39;</span>
</code></pre></div><p>命令中参数说明：<br>  <code>-h hostname|hostIP</code>：连接主机，hostname 为主机，hostIP 为主机 IP<br>  <code>-P port</code>：端口，默认 3306，不使用该参数则自动连接 3306<br>  <code>-u username</code>：登录的用户名<br>  <code>-p password</code>：登录的密码，省略 password 会提示输入密码<br>  <code>databasename</code>：指明连接哪一个数据库<br>  <code>-e &#39;query_sql&#39;</code>：登录 MySQL 服务器后可执行该语句，然后退出 MySQL 服务器</p><h3 id="_1-2-查看用户" tabindex="-1"><a class="header-anchor" href="#_1-2-查看用户" aria-hidden="true">#</a> 1.2 查看用户</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看该表的全部信息</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span>

<span class="token comment"># 查看host、user信息</span>
<span class="token keyword">SELECT</span> host<span class="token punctuation">,</span> <span class="token keyword">user</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_1-3-创建用户" tabindex="-1"><a class="header-anchor" href="#_1-3-创建用户" aria-hidden="true">#</a> 1.3 创建用户</h3><p>CREATE USER 语句的基本语法形式如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> 用户名 <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> 用户名 <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment"># 例如</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> lihua IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;123123&#39;</span><span class="token punctuation">;</span> <span class="token comment"># 默认host是 %</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>说明：<br>  ① 用户名参数表示新建用户的账户，由<code>用户(User)</code>和<code>主机名(Host)</code>构成；<br>  ② <code>[]</code>表示可选，可以指定用户登录时不需要密码验证，不过此方式不安全，不推荐使用。如果指定密码，需要指定明文密码；<br>  ③ <code>CREATE USER</code>语句可以同时创建多个用户。</p><h3 id="_1-4-修改用户" tabindex="-1"><a class="header-anchor" href="#_1-4-修改用户" aria-hidden="true">#</a> 1.4 修改用户</h3><p>修改用户名：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">SET</span> <span class="token keyword">USER</span> <span class="token operator">=</span> <span class="token string">&#39;lihua&#39;</span> <span class="token keyword">WHERE</span> <span class="token keyword">USER</span> <span class="token operator">=</span> <span class="token string">&#39;liming&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span> <span class="token comment"># 刷新权限，否则不生效</span>
</code></pre></div><h3 id="_1-5-删除用户" tabindex="-1"><a class="header-anchor" href="#_1-5-删除用户" aria-hidden="true">#</a> 1.5 删除用户</h3><h4 id="方式一-drop-推荐" tabindex="-1"><a class="header-anchor" href="#方式一-drop-推荐" aria-hidden="true">#</a> 方式一：DROP(推荐)</h4><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token keyword">user</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">user</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token comment"># 例如</span>
<span class="token keyword">DROP</span> <span class="token keyword">USER</span> liming<span class="token punctuation">;</span> <span class="token comment"># 默认删除host为%的用户</span>
<span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">&#39;liming&#39;</span><span class="token variable">@&#39;localhost&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="方式二-delete" tabindex="-1"><a class="header-anchor" href="#方式二-delete" aria-hidden="true">#</a> 方式二：DELETE</h4><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">WHERE</span> host <span class="token operator">=</span> <span class="token string">&#39;hostname&#39;</span> <span class="token operator">AND</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">&#39;username&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>

<span class="token comment"># 例如</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">WHERE</span> host <span class="token operator">=</span> <span class="token string">&#39;localhost&#39;</span> <span class="token operator">AND</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">&#39;lihua&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不推荐使用<code>DELETE FROM</code>的方式来删除用户，因为系统会有残留信息保留。而<code>DROP</code>命令会删除用户以及对应的权限，执行命令后你会发现 mysql.user 表和 mysql.db 表的相应记录都消失了。</p></div><h3 id="_1-6-设置当前用户密码" tabindex="-1"><a class="header-anchor" href="#_1-6-设置当前用户密码" aria-hidden="true">#</a> 1.6 设置当前用户密码</h3><p><strong>旧的写法</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 修改当前用户的密码(MySQL 5.7 有效)</span>
<span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>推荐写法</strong>：</p><p>① 使用<code>ALTER USER</code>命令来修改当前用户密码</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token keyword">USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>② 使用<code>SET</code>语句来修改当前用户密码</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 自动将密码加密在赋值给当前用户</span>
<span class="token keyword">SET</span> PASSWORD <span class="token operator">=</span> <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_1-7-修改其它用户密码" tabindex="-1"><a class="header-anchor" href="#_1-7-修改其它用户密码" aria-hidden="true">#</a> 1.7 修改其它用户密码</h3><p>① 使用<code>ALTER</code>语句来修改</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token keyword">user</span> <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">user</span> <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre></div><p>② 使用<code>SET</code>命令来修改</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> PASSWORD <span class="token keyword">FOR</span> <span class="token string">&#39;username&#39;</span><span class="token variable">@&#39;hostname&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>③ 使用<code>UPDATE</code>语句来修改 <mark>(不推荐)</mark></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">SET</span> authentication_string <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">&#39;new_password&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">&#39;username&#39;</span> <span class="token operator">AND</span> host <span class="token operator">=</span> <span class="token string">&#39;hostname&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_1-8-mysql-8-密码管理-了解" tabindex="-1"><a class="header-anchor" href="#_1-8-mysql-8-密码管理-了解" aria-hidden="true">#</a> 1.8 MySQL 8 密码管理(了解)</h3>`,36),i={href:"https://dev.mysql.com/doc/refman/8.0/en/password-management.html#password-expiration-policy",target:"_blank",rel:"noopener noreferrer"},u=n(`<h4 id="_1-8-1-密码过期策略" tabindex="-1"><a class="header-anchor" href="#_1-8-1-密码过期策略" aria-hidden="true">#</a> 1.8.1 密码过期策略</h4><p>  在 MySQL 中，数据库管理员可以<mark>手动设置</mark>账号密码过期，也可以单独建立一个<mark>自动</mark>密码过期策略。过期策略可以是<mark>全局</mark>的，也可以为<mark>每个账号</mark>设置单独的过期策略。</p><p><strong>全局设置</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token keyword">user</span> PASSWORD EXPIRE<span class="token punctuation">;</span>

<span class="token comment"># 例如：设置lihua密码过期</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE<span class="token punctuation">;</span>
</code></pre></div><p> <strong>方式 ①：</strong>：使用 SQL 语句更改该变量并持久化</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 建立全局策略，设置密码每隔180天过期</span>
<span class="token keyword">SET</span> PERSIST default_password_lifetime <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>
</code></pre></div><p> <strong>方式 ② ：</strong>：配置文件 my.cnf 中进行维护</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token comment"># 建立全局策略，设置密码每隔180天过期</span>
<span class="token assign-left variable">default_password_lifetime</span><span class="token operator">=</span><span class="token number">180</span>
</code></pre></div><hr><p><strong>单独设置</strong>：</p><p>  每个账号既可以延用全局密码过期策略，也可以单独设置策略。在<code>CREATE USER</code>和<code>ALTER USER</code>语句上加入<code>PASSWORD EXPIRE</code>选项可实现单独设置策略。</p><p>示例如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 设置lihua账号密码每90天过期</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE <span class="token keyword">INTERVAL</span> <span class="token number">90</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE <span class="token keyword">INTERVAL</span> <span class="token number">90</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>

<span class="token comment"># 设置密码永不过期</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE NEVER<span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE NEVER<span class="token punctuation">;</span>

<span class="token comment"># 延用全局密码过期策略</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE <span class="token keyword">DEFAULT</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD EXPIRE <span class="token keyword">DEFAULT</span><span class="token punctuation">;</span>
</code></pre></div><h4 id="_1-8-2-密码重用策略" tabindex="-1"><a class="header-anchor" href="#_1-8-2-密码重用策略" aria-hidden="true">#</a> 1.8.2 密码重用策略</h4><p>  MySQL 允许对重复使用以前的密码进行限制。重用限制可以根据密码更改的次数、经过的时间或两者都建立。重用策略可以全局建立，单个帐户可以设置为服从全局策略，也可以使用特定的每个帐户行为覆盖全局策略。</p><p><strong>全局设置</strong>：</p><p> <strong>方式 ①</strong>：使用 SQL</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 设置不能选择最近使用过的6个密码</span>
<span class="token keyword">SET</span> PERSIST password_history <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token comment"># 设置不能选择最近365天内的密码</span>
<span class="token keyword">SET</span> PERSIST password_reuse_interval <span class="token operator">=</span> <span class="token number">365</span><span class="token punctuation">;</span>
</code></pre></div><p> <strong>方式 ②</strong>：修改 my.cnf 配置文件</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token assign-left variable">password_history</span><span class="token operator">=</span><span class="token number">6</span>
<span class="token assign-left variable">password_reuse_interval</span><span class="token operator">=</span><span class="token number">365</span>
</code></pre></div><hr><p><strong>单独设置</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 不能使用最近5个密码</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD HISTORY <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD HISTORY <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment"># 不是使用最近365天内的密码</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD REUSE <span class="token keyword">INTERVAL</span> <span class="token number">365</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span> PASSWORD REUSE <span class="token keyword">INTERVAL</span> <span class="token number">365</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>

<span class="token comment"># 即不能使用最近5个密码，也不能使用365天内的密码</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span>
  PASSWORD HISTORY <span class="token number">5</span>
  PASSWORD REUSE <span class="token keyword">INTERVAL</span> <span class="token number">365</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;lihua&#39;</span><span class="token variable">@&#39;localhost&#39;</span>
  PASSWORD HISTORY <span class="token number">5</span>
  PASSWORD REUSE <span class="token keyword">INTERVAL</span> <span class="token number">365</span> <span class="token keyword">DAY</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_2-权限管理" tabindex="-1"><a class="header-anchor" href="#_2-权限管理" aria-hidden="true">#</a> 2.权限管理</h2><h3 id="_2-1-权限列表" tabindex="-1"><a class="header-anchor" href="#_2-1-权限列表" aria-hidden="true">#</a> 2.1 权限列表</h3><p>MySQL 权限列表查看：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">privileges</span><span class="token punctuation">;</span>
</code></pre></div><figure><img src="`+r+`" alt="权限列表.png" tabindex="0" loading="lazy"><figcaption>权限列表.png</figcaption></figure><hr><p>下面简单说明一下各个权限的作用，其余说明见上面的权限列表图：</p><p>① <code>CREATE 和 DROP权限</code><br>   可以创建新的数据库和表，或删除(移掉)已有的数据库和表。如果将 MySQL 数据库中的 DROP 权限授予某用户，用户就可以删除 MySQL 访问权限保存的数据库。</p><p>② <code>SELECT、INSERT、UPDATE 和 DELETE权限</code><br>   允许在一个数据库现有的表上实施操作。</p><p>③ <code>SELECT权限</code><br>   只有在它真正从一个表中检索行时才被用到。</p><p>④ <code>INDEX权限</code><br>   允许创建或删除索引，INDEX 适用于已有的表。如果具有某个表的 CREATE 权限，就可以在 CREATE TABLE 语句中定义索引。</p><p>⑤ <code>ALTER权限</code><br>   可以使用 ALTER TABLE 来更改表的结构和重新命名表。</p><p>⑥ <code>CREATE ROUTINE 和 EXECUTE权限</code><br>   创建保存的程序(函数和程序)。<code>ALTER ROUTINE权限</code>用来更改和删除保存的程序，<code>EXECUTE权限</code>用来执行保存的程序。</p><p>⑦ <code>GRANT权限</code><br>   允许授权给其它用户，可用于数据库、表和保存的程序。</p><p>⑧ <code>FILE权限</code><br>   使用户可以使用 LOAD DATA INFILE 和 SELECT...INTO OUTFILE 语句读或写服务器上的文件，任何被授予 FILE 权限的用户都能读或写 MySQL 服务器上的任何文件(说明用户可以读任何数据库目录下的文件，因为服务器可以访问这些文件)。</p><h3 id="_2-2-授予权限的原则" tabindex="-1"><a class="header-anchor" href="#_2-2-授予权限的原则" aria-hidden="true">#</a> 2.2 授予权限的原则</h3><p>权限控制主要是出于安全因素，因此需要遵循以下几个经验原则：<br>   ① 只授予能<mark>满足需要的最小权限</mark>，防止用户干坏事。比如用户只要查询，就只给 SELECT 权限，不需要给 UPDATE、INSERT 等权限；<br>   ② 创建用户时<mark>限制用户的登录主机</mark>，一般是限制成指定 IP 或内网 IP 段；<br>   ③ 为每个用户<mark>设置满足密码复杂度的密码</mark>；<br>   ④ <mark>定期清理不需要的用户</mark>，回收权限或删除用户。</p><h3 id="_2-3-授予权限" tabindex="-1"><a class="header-anchor" href="#_2-3-授予权限" aria-hidden="true">#</a> 2.3 授予权限</h3><h3 id="_2-4-查看权限" tabindex="-1"><a class="header-anchor" href="#_2-4-查看权限" aria-hidden="true">#</a> 2.4 查看权限</h3><h3 id="_2-5-收回权限" tabindex="-1"><a class="header-anchor" href="#_2-5-收回权限" aria-hidden="true">#</a> 2.5 收回权限</h3><h2 id="_3-权限表" tabindex="-1"><a class="header-anchor" href="#_3-权限表" aria-hidden="true">#</a> 3.权限表</h2><h2 id="_4-访问控制-了解" tabindex="-1"><a class="header-anchor" href="#_4-访问控制-了解" aria-hidden="true">#</a> 4.访问控制(了解)</h2><h2 id="_5-角色管理" tabindex="-1"><a class="header-anchor" href="#_5-角色管理" aria-hidden="true">#</a> 5.角色管理</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,47);function h(E,g){const e=l("ExternalLinkIcon");return o(),t("div",null,[d,s("p",null,[a("官网手册说明："),s("a",i,[a("MySQL 8.0"),c(e)])]),u])}const m=p(k,[["render",h],["__file","user_and_privilege.html.vue"]]);export{m as default};
