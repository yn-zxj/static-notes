import{_ as n,M as s,Y as a,a2 as p}from"./framework-0d8205ef.js";const t={},o=p(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>多行函数可以操作成组的多个行，每个行组返回一个结果，这些函数又称组函数。</p></div><h2 id="_1-常用的聚合函数" tabindex="-1"><a class="header-anchor" href="#_1-常用的聚合函数" aria-hidden="true">#</a> 1.常用的聚合函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>AVG(input)</code></td><td>求平均值，忽略空值且考虑重复值 <mark>[数字类型]</mark></td></tr><tr><td><code>SUM(input)</code></td><td>求和，忽略空值且考虑重复值 <mark>[数字类型]</mark></td></tr><tr><td><code>MAX(input)</code></td><td>求最大值 <mark>[任意类型]</mark></td></tr><tr><td><code>MIN(input)</code></td><td>求最小值 <mark>[任意类型]</mark></td></tr><tr><td><code>COUNT(*|input)</code></td><td>求行数(用*则包括空值的行)</td></tr><tr><td><code>STDDEV(input)</code></td><td>求标准差 <mark>[数字类型]</mark></td></tr><tr><td><code>VARIANCE(input)</code></td><td>求方差 <mark>[数字类型]</mark></td></tr></tbody></table><h3 id="_1-1-avg-sum-函数" tabindex="-1"><a class="header-anchor" href="#_1-1-avg-sum-函数" aria-hidden="true">#</a> 1.1 AVG / SUM 函数</h3><p>可以对<mark>数值型数据</mark>使用 AVG 和 SUM 函数。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------+---------------+</span>
<span class="token operator">|</span> <span class="token function">AVG</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">SUM</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+---------------+</span>
<span class="token operator">|</span>   <span class="token number">6461.682243</span> <span class="token operator">|</span>     <span class="token number">691400.00</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+---------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>
</code></pre></div><h3 id="_1-2-min-max-函数" tabindex="-1"><a class="header-anchor" href="#_1-2-min-max-函数" aria-hidden="true">#</a> 1.2 MIN / MAX 函数</h3><p>可以对<mark>任意数据类型</mark>的数据使用 MIN 和 MAX 函数。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span> hire_date <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span> hire_date <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------------------+------------------+---------------+---------------+</span>
<span class="token operator">|</span> <span class="token function">MIN</span><span class="token punctuation">(</span> hire_date <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">MAX</span><span class="token punctuation">(</span> hire_date <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">MIN</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">MAX</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+------------------+---------------+---------------+</span>
<span class="token operator">|</span> <span class="token number">1987</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">17</span>       <span class="token operator">|</span> <span class="token number">2000</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">21</span>       <span class="token operator">|</span>       <span class="token number">2100.00</span> <span class="token operator">|</span>      <span class="token number">24000.00</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+------------------+---------------+---------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>
</code></pre></div><h3 id="_1-3-count-函数" tabindex="-1"><a class="header-anchor" href="#_1-3-count-函数" aria-hidden="true">#</a> 1.3 COUNT 函数</h3><p>（1）<code>COUNT(*)</code>返回表中记录总数，适用于<mark>任意数据类型</mark>。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+</span>
<span class="token operator">|</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+</span>
<span class="token operator">|</span>      <span class="token number">107</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>
</code></pre></div><p>（2）<code>COUNT(expr)</code> 返回<code>expr</code><mark>不为空</mark>的记录总数。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span>commission_pct<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----------+-----------------------+</span>
<span class="token operator">|</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>commission_pct<span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+-----------------------+</span>
<span class="token operator">|</span>      <span class="token number">107</span> <span class="token operator">|</span>                    <span class="token number">35</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----------+-----------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>（1）用<code>count(*)</code>、<code>count(1)</code>、<code>count(列名)</code>谁好呢？</p><p>  对于 MyISAM 引擎的表是没有区别的，这种引擎内部有一计数器在维护着行数；Innodb 引擎的表用 count(*)，count(1)直接读行数，复杂度是 O(n)，因为 innodb 真的要去数一遍，但好于具体的 count(列名)。</p><p>（2）能不能使用<code>count(列名)</code>替换<code>count(*)</code>？</p><p>  不要使用<code>count(列名)</code>来替代<code>count(*)</code>，<code>count(*)</code>是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。<br><mark>说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</mark></p></div><h2 id="_2-group-by" tabindex="-1"><a class="header-anchor" href="#_2-group-by" aria-hidden="true">#</a> 2.GROUP BY</h2><p><strong>基本语法</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># []里代表可选参数</span>
<span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token punctuation">,</span> group_function<span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> <span class="token keyword">table</span>
<span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> group_by_expression
<span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">column</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_2-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_2-1-基本使用" aria-hidden="true">#</a> 2.1 基本使用</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 求每个部门的薪资平均值</span>
<span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">;</span>
</code></pre></div><h3 id="_2-2-使用多个列分组" tabindex="-1"><a class="header-anchor" href="#_2-2-使用多个列分组" aria-hidden="true">#</a> 2.2 使用多个列分组</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
求每个部门的每个职位中薪水最高的雇员，
展示其部门编号、职位编号和薪水，并按照部门编码对结果进行降序
*/</span>
<span class="token keyword">SELECT</span>
  department_id<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span>
<span class="token keyword">FROM</span>
  employees
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  department_id<span class="token punctuation">,</span>job_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  department_id <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>① GROUP BY 子句至于 WHERE 子句后、ORDER BY 子句前，后面表达式必须包含字段，且<mark>不能使用列的别名</mark>；</p><p>② 在 SELECT 子句中，<mark>只可以有组函数和分组字段</mark>(包括对分组字段的操作)，如果包括其他字段在 Oracle 中会报错，在 MySQL 中可能出现问题<code>（换言之，SELECT 中出现的非组函数字段必须声明在 GROUP BY 中；反之，GROUP BY 中的声明字段可以不出现在 SELECT 中）</code>；</p><p>③ 如果 GROUP BY 子句后面要跟 ORDER BY 子句，则 <mark>ORDER BY 子句用于排序的字段必须是分组字段或组函数</mark>。</p></div><h3 id="_2-3-group-by-中使用-with-rollup" tabindex="-1"><a class="header-anchor" href="#_2-3-group-by-中使用-with-rollup" aria-hidden="true">#</a> 2.3 GROUP BY 中使用 WITH ROLLUP</h3><p>使用<code>WITH ROLLUP</code>关键字之后，在所有查询出的分组记录之后增加一条记录，用于统计该分组的一些数据(根据 SELECT 子句中的组函数变化)。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 下面结果会在每个分组后面增加一条记录，用于展示该分组下薪资的最大值</span>
<span class="token keyword">SELECT</span>
  department_id<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span>
<span class="token keyword">FROM</span>
  employees
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  department_id<span class="token punctuation">,</span>job_id <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>当使用<code>ROLLUP</code>时，不能同时使用 ORDER BY 子句进行结果排序，即 ROLLUP 和 ORDER BY 是互相排斥的。</p></blockquote><h2 id="_3-having" tabindex="-1"><a class="header-anchor" href="#_3-having" aria-hidden="true">#</a> 3.HAVING</h2><h3 id="_3-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-1-基本使用" aria-hidden="true">#</a> 3.1 基本使用</h3><p>HAVING 用来对分组结果进行约束。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询各个部门中最高工资比10000高的部门信息</span>
<span class="token comment"># 方式一</span>
<span class="token keyword">SELECT</span>
  department_id<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span>
<span class="token keyword">FROM</span>
  employees
<span class="token keyword">WHERE</span> department_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  department_id
<span class="token keyword">HAVING</span> <span class="token function">MAX</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10000</span><span class="token punctuation">;</span>

<span class="token comment"># 方式二</span>
<span class="token keyword">SELECT</span>
  department_id<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span>
<span class="token keyword">FROM</span>
  employees
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  department_id
<span class="token keyword">HAVING</span> <span class="token function">MAX</span><span class="token punctuation">(</span> salary <span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10000</span> <span class="token operator">AND</span> department_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>① 当过滤条件中有聚合函数时，则此过滤条件必须声明在 HAVING 中；</p><p>② 当过滤条件中没有聚合函数时，则此过滤条件声明在 WHERE 或 HAVING 中都可以，但是建议声明在 WHERE 中，这样效率高。</p></div><h3 id="_3-2-where-和-having-对比" tabindex="-1"><a class="header-anchor" href="#_3-2-where-和-having-对比" aria-hidden="true">#</a> 3.2 WHERE 和 HAVING 对比</h3><p><strong>区别 1</strong> ：WHERE 可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件；HAVING 必须要与 GROUP BY 配合使用，可以把分组计算的函数和分组字段作为筛选条件。<br><strong>区别 2</strong> ：如果需要通过连接从关联表中获取需要的数据，WHERE 是先筛选后连接，而 HAVING 是先连接后筛选。<br><strong>选择</strong>：WHERE 和 HAVING 也不是互相排斥的，我们可以在一个查询里面同时使用 WHERE 和 HAVING。包含分组统计函数的条件用 HAVING，普通条件用 WHERE。这样，我们就既利用了 WHERE 条件的高效快速，又发挥了 HAVING 可以使用包含分组统计函数的查询条件的优点。当数据量特别大的时候，运行效率会有很大的差别。</p><h2 id="_4-select-的执行过程" tabindex="-1"><a class="header-anchor" href="#_4-select-的执行过程" aria-hidden="true">#</a> 4.SELECT 的执行过程</h2>`,35),e=[o];function c(l,r){return s(),a("div",null,e)}const u=n(t,[["render",c],["__file","mysql_basic_08.html.vue"]]);export{u as default};
