import{_ as s,M as n,Y as a,a2 as t}from"./framework-0d8205ef.js";const p={},o=t(`<h2 id="_1-mysql-中的数据类型" tabindex="-1"><a class="header-anchor" href="#_1-mysql-中的数据类型" aria-hidden="true">#</a> 1.MySQL 中的数据类型</h2><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td><code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT(或 INTEGER)</code> 、<code>BIGINT</code></td></tr><tr><td>浮点类型</td><td><code>FLOAT</code>、<code>DOUBLE</code></td></tr><tr><td>定点数类型</td><td><code>DECIMAL</code></td></tr><tr><td>位类型</td><td><code>BIT</code></td></tr><tr><td>日期时间类型</td><td><code>YEAR</code>、<code>TIME</code>、<code>DATE</code>、<code>DATETIME</code>、<code>TIMESTAMP</code></td></tr><tr><td>文本字符串类型</td><td><code>CHAR</code>、<code>VARCHAR</code>、<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>、<code>LONGTEXT</code></td></tr><tr><td>枚举类型</td><td><code>ENUM</code></td></tr><tr><td>集合类型</td><td><code>SET</code></td></tr><tr><td>二进制字符串类型</td><td><code>BINARY</code>、<code>VARBINARY</code>、<code>TINYBLOB</code>、<code>BLOB</code>、<code>MEDIUMBLOB</code>、<code>LONGBLOB</code></td></tr><tr><td>JSON 类型</td><td><code>JSON 对象</code>、<code>JSON 数组</code></td></tr><tr><td>空间数据类型</td><td>单值:<code>GEOMETRY</code> <code>POINT</code> <code>LINESTRING</code> <code>POLYGON</code><br><br>集合:<code>MULTIPOINT</code> <code>MULTILINESTRING</code> <code>MULTIPOLYGON</code> <code>GEOMETRYCOLLECTION</code></td></tr></tbody></table><p>常见数据类型的属性如下：</p><table><thead><tr><th>MySQL 关键字</th><th>含义</th></tr></thead><tbody><tr><td><code>NULL</code></td><td>数据列可包含 NULL 值</td></tr><tr><td><code>NOT NULL</code></td><td>数据列不允许包含 NULL 值</td></tr><tr><td><code>DEFAULT</code></td><td>默认值</td></tr><tr><td><code>PRIMARY KEY</code></td><td>主键</td></tr><tr><td><code>AUTO_INCREMENT</code></td><td>自动递增，适用于整数类型</td></tr><tr><td><code>UNSIGNED</code></td><td>无符号</td></tr><tr><td><code>CHARACTER SET name</code></td><td>指定字符集</td></tr></tbody></table><h2 id="_2-整数类型" tabindex="-1"><a class="header-anchor" href="#_2-整数类型" aria-hidden="true">#</a> 2.整数类型</h2><h3 id="_2-1-类型介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-类型介绍" aria-hidden="true">#</a> 2.1 类型介绍</h3><p>整数类型一共有 5 种，包括<code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT(INTERGER)</code>和<code>BIGINT</code>。</p><p>它们的区别如下：</p><table><thead><tr><th>整数类型</th><th>字节</th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>1</td><td>- 128 ~ 127</td><td>0 ~ 255</td></tr><tr><td><code>SMALLINT</code></td><td>2</td><td>- 32768 ~ 32767</td><td>0 ~ 65535</td></tr><tr><td><code>MEDIUMINT</code></td><td>3</td><td>- 8388608 ~ 8388607</td><td>0 ~ 16777215</td></tr><tr><td><code>INT</code><br><code>INTEGER</code></td><td>4</td><td>- 2147483648 ~ 2147483647</td><td>0 ~ 4294967295</td></tr><tr><td><code>BIGINT</code></td><td>8</td><td>-2<sup>63</sup> ~ 2<sup>63</sup>-1</td><td>0 ~ 2<sup>64</sup>-1</td></tr></tbody></table><h3 id="_2-2-可选属性" tabindex="-1"><a class="header-anchor" href="#_2-2-可选属性" aria-hidden="true">#</a> 2.2 可选属性</h3><p><code>M</code>:<br>   表示显示宽度，M 的取值范围是( 0 , 255 )。例如，int( 5 )：当数据宽度小于 5 位的时候在数字前面需要用字符填满宽度。该项功能需要配合<code>ZEROFILL</code>使用，表示用<code>0</code>填满宽度，否则指定显示宽度无效。</p><div class="hint-container tip"><p class="hint-container-title">如果设置了显示宽度，那么插入的数据宽度超过显示宽度限制，会不会截断或插入失败？</p><p>  <mark>不会对插入的数据有任何影响</mark>，还是按照类型的实际宽度进行保存，即显示宽度与类型可以存储的值范围无关。 <mark>从 MySQL 8. 0. 17 开始，整数数据类型不推荐使用显示宽度属性</mark>。</p></div><p>  整型数据类型可以在定义表结构时指定所需要的显示宽度，如果不指定，则系统为每一种类型指定默认的宽度值。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_int <span class="token punctuation">(</span> x <span class="token keyword">TINYINT</span><span class="token punctuation">,</span> y <span class="token keyword">SMALLINT</span><span class="token punctuation">,</span> z <span class="token keyword">MEDIUMINT</span><span class="token punctuation">,</span> m <span class="token keyword">INT</span><span class="token punctuation">,</span> n <span class="token keyword">BIGINT</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># MySQL 5.7中显示如下，MySQL 8中不再显示范围</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> test_int<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> x     <span class="token operator">|</span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> y     <span class="token operator">|</span> <span class="token keyword">smallint</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> z     <span class="token operator">|</span> <span class="token keyword">mediumint</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> m     <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>      <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> n     <span class="token operator">|</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+-------+</span>
<span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre></div><p><code>TINYINT</code>有符号数和无符号数的取值范围分别为 -128 ~ 127 和 0 ~ 255 ，由于负号占了一个数字位，因此<code>TINYINT</code>默认的显示宽度为 4 。同理，其他整数类型的默认显示宽度与其有符号数的最小值的宽度相同。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_int <span class="token punctuation">(</span> f1 <span class="token keyword">INT</span><span class="token punctuation">,</span> f2 <span class="token keyword">INT</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> f3 <span class="token keyword">INT</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span> ZEROFILL <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_int <span class="token punctuation">(</span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">123</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_int <span class="token punctuation">(</span> f1<span class="token punctuation">,</span> f2 <span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">123456</span><span class="token punctuation">,</span> <span class="token number">123456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_int <span class="token punctuation">(</span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">123456</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">,</span> <span class="token number">123456</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> test_int<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+--------------------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>                     <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+--------------------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> f1    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>                  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> f2    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                   <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> f3    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> zerofill <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+--------------------------+------+-----+---------+-------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_int<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------+--------+--------+</span>
<span class="token operator">|</span> f1     <span class="token operator">|</span> f2     <span class="token operator">|</span> f3     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+--------+--------+</span>
<span class="token operator">|</span>      <span class="token number">1</span> <span class="token operator">|</span>    <span class="token number">123</span> <span class="token operator">|</span>  <span class="token number">00123</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">123456</span> <span class="token operator">|</span> <span class="token number">123456</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>   <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">123456</span> <span class="token operator">|</span> <span class="token number">123456</span> <span class="token operator">|</span> <span class="token number">123456</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------+--------+--------+</span>
<span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre></div><p><code>UNSIGNED</code>:<br>   无符号类型(非负)，所有的整数类型都有一个可选的属性 <mark>UNSIGNED（无符号属性）</mark>，无符号整数类型的最小取值为 0 。所以，如果需要在 MySQL 数据库中保存非负整数值时，可以将整数类型设置为无符号类型。<br>   INT 类型默认显示宽度为 INT(11)，无符号 INT 类型默认显示宽度为 INT(10)</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_int <span class="token punctuation">(</span> f1 <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> test_int<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------+------------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>             <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+------------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> f1    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------+------------------+------+-----+---------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre></div><p><code>ZEROFILL</code>:<br>   0 填充,（如果某列是 ZEROFILL，那么 MySQL 会<mark>自动</mark>为当前列添加 UNSIGNED 属性），如果指定了 ZEROFILL 只是表示不够 M 位时，用 0 在左边填充，如果超过 M 位，只要不超过数据存储范围即可。<br>   原来，在 int(M) 中，M 的值跟 int(M) <mark>所占多少存储空间并无任何关系</mark>。int(3)、int(4)、int(8) 在磁盘上都是占用 4 bytes 的存储空间。也就是说，int(M)，必须和 UNSIGNED ZEROFILL 一起使用才有意义。如果整数值超过 M 位，就按照实际位数存储，只是无须再用字符 0 进行填充。</p><h3 id="_2-3-适用场景" tabindex="-1"><a class="header-anchor" href="#_2-3-适用场景" aria-hidden="true">#</a> 2.3 适用场景</h3><p><code>TINYINT</code>：一般用于<mark>枚举数据</mark>，比如系统设定取值范围很小且固定的场景。</p><p><code>SMALLINT</code>：可以用于<mark>较小范围</mark>的统计数据，比如统计工厂的固定资产库存数量等。</p><p><code>MEDIUMINT</code>：用于<mark>较大整数</mark>的计算，比如车站每日的客流量等。</p><p><code>INT 或 INTEGER</code>：<mark>取值范围足够大</mark>，一般情况下不用考虑超限问题，用得最多。比如商品编号。</p><p><code>BIGINT</code>：只有当你处理<mark>特别巨大</mark>的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证券公司衍生产品持仓等。</p><h3 id="_2-4-如何选择" tabindex="-1"><a class="header-anchor" href="#_2-4-如何选择" aria-hidden="true">#</a> 2.4 如何选择</h3><p>  在评估用哪种整数类型的时候，你需要考虑<code>存储空间</code>和<code>可靠性</code>的平衡问题：一方面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间，使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起系统错误，影响可靠性。</p><p>  举个例子，商品编号采用的数据类型是 INT。原因就在于，客户门店中流通的商品种类较多，而且，每天都有旧商品下架，新商品上架，这样不断迭代，日积月累。</p><p>  如果使用 SMALLINT 类型，虽然占用字节数比 INT 类型的整数少，但是却不能保证数据不会超出范围 65535 。相反，使用 INT，就能确保有足够大的取值范围，不用担心数据超出范围影响可靠性的问题。</p><p>  你要注意的是，在实际工作中，<mark>系统故障产生的成本远远超过增加几个字段存储空间所产生的成本</mark>。因此，我建议你首先确保数据不会超过取值范围，在这个前提之下，再去考虑如何节省存储空间。</p><h2 id="_3-浮点类型" tabindex="-1"><a class="header-anchor" href="#_3-浮点类型" aria-hidden="true">#</a> 3.浮点类型</h2><h3 id="_3-1-类型介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-类型介绍" aria-hidden="true">#</a> 3.1 类型介绍</h3><p>浮点数和定点数类型的特点是可以处理小数，MySQL 支持的浮点数类型，分别是<code>FLOAT(单精度浮点数)</code>、<code>DOUBLE(双精度浮点数)</code>、<code>REAL</code>；</p><blockquote><p><code>REAL</code>默认就是<code>DOUBLE</code>。如果你把 SQL 模式设定为启用<code>REAL_AS_FLOAT</code>，那么，MySQL 就认为<code>REAL</code>是<code>FLOAT</code>。如果要启用可以通过以下 SQL 语句实现：</p></blockquote><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询当前配置的sql_mode</span>
<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;sql_mode&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">SET</span> sql_mode <span class="token operator">=</span> <span class="token string">&quot;REAL_AS_FLOAT&quot;</span><span class="token punctuation">;</span>
</code></pre></div><table><thead><tr><th>类型</th><th>字节</th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td><code>FLOAT</code></td><td>4</td><td></td><td></td></tr><tr><td><code>DOUBLE</code></td><td>8</td><td></td><td></td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>① <code>FLOAT</code>和<code>DOUBLE</code>这两种数据类型的区别<br><code>FLOAT</code>占用字节数少，取值范围小；<code>DOUBLE</code>占用字节数多，取值范围也大。</p><p>② 为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于有符号数取值范围大于等于零的部分呢？<br> MySQL 存储浮点数的格式为：符号(S)、尾数(M)和阶码(E)。因此，无论有没有符号，MySQL 的浮点数都会存储表示符号的部分。因此，所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p></div><h3 id="_3-2-数据精度" tabindex="-1"><a class="header-anchor" href="#_3-2-数据精度" aria-hidden="true">#</a> 3.2 数据精度</h3><p>(1) MySQL 允许使用非标准语法 <mark>(其他数据库未必支持)</mark>：<code>FLOAT(M,D)</code>或<code>DOUBLE(M,D)</code>。<code>M</code>称为<mark>精度</mark>，<code>D</code>称为<mark>标度</mark>。(M, D)中<code>M = 整数位 + 小数位</code>，<code>D = 小数位</code>。(D &lt;= M &lt;= 255，0 &lt;= D &lt;= 30)</p><blockquote><p>例如，定义为<code>FLOAT(5, 2)</code>的一个列可以显示为 -999.99 ~ 999.99，如果超过这个范围会报错。</p></blockquote><p>(2) <code>FLOAT</code>和<code>DOUBLE</code>类型在不指定(M, D)时，默认会按照实际的精度（由实际的硬件和操作系统决定）来显示</p><blockquote><p>说明：浮点类型，也可以加<code>UNSIGNED</code>，但是不会改变数据范围，例如：<code>FLOAT(3, 2) UNSIGNED</code>仍然只能表示 0 ~ 9.99 的范围</p></blockquote><p>(3) 不管是否显式设置了精度(M, D)，这里 MySQL 的处理方案如下：</p><ul><li>存储时，整数部分超出了范围，MySQL 就会报错，不允许存这样的值</li><li>存储时，小数点部分若超出范围，分以下情况： <ul><li>若四舍五入后，整数部分没有超出范围<code>eg:FLOAT(5, 2) → 999.009 → 999.01</code></li><li>若四舍五入后，整数部分超出范围，则 MySQL 报错，并拒绝处理<code>eg:FLOAT(5, 2) → 999.995 → 报错</code></li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>从 MySQL 8. 0. 17 开始，FLOAT(M,D) 和 DOUBLE(M,D)用法在官方文档中已经明确<mark>不推荐</mark>使用，将来可能被移除。另外，关于浮点型 FLOAT 和 DOUBLE 的 UNSIGNED 也不推荐使用了，将来也可能被移除。</p></div><p><strong>示例</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_double <span class="token punctuation">(</span>
  f1 <span class="token keyword">FLOAT</span><span class="token punctuation">,</span>
  f2 <span class="token keyword">FLOAT</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  f3 <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span>
  f4 <span class="token keyword">DOUBLE</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_double <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token number">123.456</span><span class="token punctuation">,</span> <span class="token number">123.456</span><span class="token punctuation">,</span> <span class="token number">123.4567</span><span class="token punctuation">,</span> <span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># Out of range value for column &#39;f2&#39; at row 1 → f2 整数部分超范围</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_double <span class="token keyword">VALUES</span>
<span class="token punctuation">(</span><span class="token number">123.456</span><span class="token punctuation">,</span> <span class="token number">1234.456</span><span class="token punctuation">,</span> <span class="token number">123.4567</span><span class="token punctuation">,</span> <span class="token number">123.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_3-3-精度误差" tabindex="-1"><a class="header-anchor" href="#_3-3-精度误差" aria-hidden="true">#</a> 3.3 精度误差</h3><p>  浮点数类型有个缺陷，就是不精准。比如，我们设计一个表，有 f1 这个字段，插入值分别为 0.47, 0.44, 0.19，我们期待的运行结果是： 0. 47 + 0. 44 + 0. 19 = 1.1 。而使用 sum 之后查询：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_double <span class="token punctuation">(</span>f1 <span class="token keyword">DOUBLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_double <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">0.47</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.44</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token keyword">FROM</span> test_double<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token operator">|</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span>            <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token operator">|</span> <span class="token number">1.0999999999999999</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.1</span> <span class="token operator">=</span> <span class="token number">1.1</span> <span class="token keyword">FROM</span> test_double<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------+</span>
<span class="token operator">|</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1.1</span> <span class="token operator">|</span> <span class="token number">1.1</span> <span class="token operator">=</span> <span class="token number">1.1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------+</span>
<span class="token operator">|</span>             <span class="token number">0</span> <span class="token operator">|</span>         <span class="token number">1</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-----------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>  虽然误差很小，但确实有误差。为什么会存在这样的误差呢？<br>   问题还是出在 MySQL 对浮点类型数据的存储方式上，MySQL 用 4 个字节存储 FLOAT 类型数据，用 8 个字节来存储 DOUBLE 类型数据。无论哪个，都是采用二进制的方式来进行存储的，如果尾数不是 0 或 5（比如 9.624），你就无法用一个二进制数来精确表达。进而，就只好在取值允许的范围内进行四舍五入。</p><p>  在编程中，如果用到浮点数，要特别注意误差问题，因为<mark>浮点数是不准确的</mark>，所以我们要避免使用&quot;=&quot;来判断两个数是否相等。同时，在一些对精确度要求较高的项目中，千万不要使用浮点数，不然会导致结果错误，甚至是造成不可挽回的损失。</p></div><h2 id="_4-定点类型" tabindex="-1"><a class="header-anchor" href="#_4-定点类型" aria-hidden="true">#</a> 4.定点类型</h2><table><thead><tr><th>数据类型</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td><code>DECIMAL(M,D)</code><br><code>或 DEC(M,D)</code><br><code>或 NUMERIC(M,D)</code></td><td>M+2 字节</td><td>有效范围由 M 和 D 决定</td></tr></tbody></table><blockquote><p>使用<code>DECIMAL(M, D)</code>的方式表示高精度小数。其中，M 被称为精度，D 被称为标度（0 &lt;= M &lt;= 65，0 &lt;= D &lt;= 30，D &lt; M）。例如，定义 DECIMAL(5, 2)的类型，表示该列取值范围是 -999.99 ~ 999.99。</p></blockquote><p>(1) MySQL 中的定点数类型只有 DECIMAL 一种类型；<br> (2) DECIMAL(M, D)的最大取值范围与 DOUBLE 类型一样，但是有效的数据范围是由 M 和 D 决定的；<br> (3) 定点数在 MySQL 内部是以字符串的形式进行存储，这就决定了它一定是精准的；<br> (4) 当 DECIMAL 类型不指定精度和标度时，<mark>其默认为 DECIMAL(10, 0)</mark>。当数据的精度超出了定点数类型的精度范围时，则 MySQL 同样会进行四舍五入处理。</p><div class="hint-container tip"><p class="hint-container-title">浮点数与定点数对比</p><p>  浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）；<br>   定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景（比如涉及金额计算的场景）。</p></div><p>利用定点数解决上面浮点数精确丢失问题：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_double <span class="token punctuation">(</span>f1 <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_double <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">0.47</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.44</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token keyword">FROM</span> test_double<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------+</span>
<span class="token operator">|</span> <span class="token function">SUM</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+</span>
<span class="token operator">|</span> <span class="token number">1.10</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>
</code></pre></div><h2 id="_5-位类型" tabindex="-1"><a class="header-anchor" href="#_5-位类型" aria-hidden="true">#</a> 5.位类型</h2><h2 id="_6-日期与时间类型" tabindex="-1"><a class="header-anchor" href="#_6-日期与时间类型" aria-hidden="true">#</a> 6.日期与时间类型</h2><h2 id="_7-文本字符串类型" tabindex="-1"><a class="header-anchor" href="#_7-文本字符串类型" aria-hidden="true">#</a> 7.文本字符串类型</h2><h2 id="_8-enum-类型" tabindex="-1"><a class="header-anchor" href="#_8-enum-类型" aria-hidden="true">#</a> 8.ENUM 类型</h2><h2 id="_9-set-类型" tabindex="-1"><a class="header-anchor" href="#_9-set-类型" aria-hidden="true">#</a> 9.SET 类型</h2>`,63),e=[o];function c(r,l){return n(),a("div",null,e)}const d=s(p,[["render",c],["__file","mysql_basic_12.html.vue"]]);export{d as default};
