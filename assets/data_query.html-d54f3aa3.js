import{_ as e,j as p,o as t,c as r,f as a,i as s,g as c,a as n}from"./app-a03c674e.js";const l="/assets/sql_standard-5ea55066.png",k={},d=n('<h2 id="sql-概述" tabindex="-1"><a class="header-anchor" href="#sql-概述" aria-hidden="true">#</a> SQL 概述</h2><h3 id="sql-背景" tabindex="-1"><a class="header-anchor" href="#sql-背景" aria-hidden="true">#</a> SQL 背景</h3><p>  SQL（Structured Query Language，结构化查询语言）是使用关系模型的数据库应用语言，<mark>与数据直接打交道</mark>（即用于访问和处理数据库的标准计算机语言），由 <code>IBM</code> 上世纪 70 年代开发出来，后由美国国家标准局(<code>ANSI</code>)开始着手制定 SQL 标准，先后有 <code>SQL-86</code> ，<code>SQL-89</code> ，<code>SQL-92</code> ，<code>SQL-99</code> 等标准。</p><p>  SQL 有两个重要的标准，分别是 <code>SQL92</code> 和 <code>SQL99</code>，它们分别代表了 92 年和 99 年颁布的 SQL 标准，我们今天使用的 SQL 语言依然遵循这些标准。</p><p>  不同的数据库生产厂商都支持 SQL 语句，但都有特有内容。</p><figure><img src="'+l+'" alt="SQL规范差异.png" width="400" tabindex="0" loading="lazy"><figcaption>SQL规范差异.png</figcaption></figure><h3 id="sql-语言排行榜" tabindex="-1"><a class="header-anchor" href="#sql-语言排行榜" aria-hidden="true">#</a> SQL 语言排行榜</h3>',7),i={href:"https://www.tiobe.com/tiobe-index/",target:"_blank",rel:"noopener noreferrer"},u=n(`<h3 id="sql-分类" tabindex="-1"><a class="header-anchor" href="#sql-分类" aria-hidden="true">#</a> SQL 分类</h3><p>SQL 语言在功能上主要分为如下 3 大类：</p><p><strong>DDL(数据定义语言，Data Definition Languages)</strong>：用于定义 SQL 模式、表、视图、索引等数据库对象结构；主要的语句关键字包括 <code>CREATE</code>、<code>DROP</code>、<code>ALTER</code>、<code>RENAME</code>、<code>TRUNCATE</code> 等。</p><p><strong>DML(数据操作语言，Data Manipulation Language)</strong>：用于添加、删除、更新和查询数据库记录；主要的语句关键字包括 <code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>、<code>SELECT</code> 等。</p><p><strong>DCL(数据控制语言，Data Control Language)</strong>：用于定义数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括 <code>GRANT</code>、<code>REVOKE</code>、<code>COMMIT</code>、<code>ROLLBACK</code>、<code>SAVEPOINT</code> 等。</p><blockquote><p>因为查询语句使用的非常频繁，所以很多人把查询语句单拎出来称为 DQL(数据查询语言，Data Query Language)。<br> 还有单独将 <code>COMMIT</code>、<code>ROLLBACK</code> 取出来称为 TCL(事务控制语言，Transaction Control Language)。</p></blockquote><h2 id="sql-语言规则与规范" tabindex="-1"><a class="header-anchor" href="#sql-语言规则与规范" aria-hidden="true">#</a> SQL 语言规则与规范</h2><h3 id="基本规则" tabindex="-1"><a class="header-anchor" href="#基本规则" aria-hidden="true">#</a> 基本规则</h3><p>(1) SQL 可以写在一行或者多行；为了提高可读性，各子句分行写，必要时使用缩进</p><p>(2) 每条命令以<code>;</code>或<code>\\g</code>或<code>\\G</code></p><p>(3) 关键字不能被缩写也不能分行</p><p>(4) 关于标点符号<br> ① 必须保证所有的()、单引号、双引号是成对结束的<br> ② 必须使用英文状态下的半角输入方式<br> ③ 字符串型和日期时间类型的数据可以使用单引号表示<br> ④ 列的别名，尽量使用双引号，而且不建议省略 as</p><h3 id="sql-大小写规范-建议遵循" tabindex="-1"><a class="header-anchor" href="#sql-大小写规范-建议遵循" aria-hidden="true">#</a> SQL 大小写规范(建议遵循)</h3><p>(1) <mark>MySQL 在 Windows 环境下是大小写不敏感的</mark></p><p>(2) <mark>MySQL 在 Linux 环境下是大小写敏感的</mark></p><ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名)是忽略大小写的</li></ul><p>(3) 推荐采用统一的书写规范</p><ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>单行注释 <span class="token comment">#注释文字(MySQL特有的方式)</span>
单行注释 <span class="token comment">-- 注释文字(--后面必须包含一个空格)</span>
多行注释 <span class="token comment">/* 注释文字 */</span>
</code></pre></div><h3 id="命名规则" tabindex="-1"><a class="header-anchor" href="#命名规则" aria-hidden="true">#</a> 命名规则</h3><p>(1) 数据库、表名不得超过 30 个字符，变量名限制为 29 个</p><p>(2) 必须只能包含<code>A-Z, a-z, 0-9, _</code> 共 63 个字符</p><p>(3) 数据库名、表名、字段名等对象中间不要包含空格</p><p>(4) 同一个 MySQL 软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</p><p>(5) 必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在 SQL 语句中使用着重号(\`)引起来</p><p>(6) 保持字段名和类型的一致性，在命名字段并为其指定数据类型的时间一定要保证一致性。假如数据类型在一个表里是整数，那在另一个表可就别变成其它类型了</p><h3 id="数据导入命令" tabindex="-1"><a class="header-anchor" href="#数据导入命令" aria-hidden="true">#</a> 数据导入命令</h3><p><strong>方式一</strong>：在命令行客户端登录 MySQL，使用<code>source</code>指令导入</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># source 文件的全路径名</span>
mysql<span class="token operator">&gt;</span> source d:\\mysqldb<span class="token punctuation">.</span><span class="token keyword">sql</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> title_info<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field       <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> uuid        <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token keyword">type</span>        <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> question    <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> options     <span class="token operator">|</span> json         <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> answer      <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> create_time <span class="token operator">|</span> <span class="token keyword">datetime</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> login_no    <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> remark      <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------+--------------+------+-----+---------+-------+</span>
<span class="token number">8</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.05</span> sec<span class="token punctuation">)</span>
</code></pre></div><p><strong>方式二</strong>：基于具体的图形化界面的工具可以导入数据</p><h2 id="数据查询" tabindex="-1"><a class="header-anchor" href="#数据查询" aria-hidden="true">#</a> 数据查询</h2><h3 id="基本-select-语句" tabindex="-1"><a class="header-anchor" href="#基本-select-语句" aria-hidden="true">#</a> 基本 SELECT 语句</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token operator">|</span>字段名<span class="token operator">|</span>表达式 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件 <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 字段名<span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token comment">-- *: 选择表中的所有字段</span>
<span class="token comment">-- 字段名: 选择表中的字段名称，可以选择多个字段，各个字段间用逗号分隔</span>
<span class="token comment">-- 表达式: 由字段、函数等组成</span>
<span class="token comment">-- 表名:  指定包含字段的表</span>
<span class="token comment">-- WHERE条件: 查询的条件，可以通过该条件进行行选择</span>
<span class="token comment">-- ORDER BY 字段名: 数据排序，默认升序(ASC)，若希望降序则是DESC</span>

<span class="token comment"># 没有任何子句</span>
<span class="token keyword">SELECT</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token comment"># 伪表</span>
<span class="token keyword">SELECT</span> <span class="token number">4</span> <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span>
<span class="token comment"># 返回全部列</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> departments<span class="token punctuation">;</span>
<span class="token comment"># 返回特定的列</span>
<span class="token keyword">SELECT</span> department_name<span class="token punctuation">,</span> departments_id <span class="token keyword">FROM</span> departments<span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>  一般情况下，最好不要使用通配符&#39;*&#39;。使用通配符虽然可以节省输入查询语句的时间，但是获取不需要的列数据通常会降低查询和所使用的应用程序的效率。通配符的优势是，当不知道所需要的列的名称时，可以通过它获取它们。</p><p>在生产环境下，<mark>不推荐</mark>你直接使用<code>SELECT *</code> 进行查询。</p></div><h3 id="列的别名" tabindex="-1"><a class="header-anchor" href="#列的别名" aria-hidden="true">#</a> 列的别名</h3><p>  在 SELECT 所选字段后面可以指定别名，字段名和别名之间用空格分开。在默认情况下，别名标题用大写字母显示，如果别名中包含空格或者特殊字符(如#或&amp;)，或者大小写敏感，需要将别名放在双引号(&quot;&quot;)中，也可以使用<mark>可选</mark>关键字<code>AS</code>表示别名。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> first_name name<span class="token punctuation">,</span> salary <span class="token keyword">AS</span> <span class="token string">&quot;salary&quot;</span><span class="token punctuation">,</span> salary<span class="token operator">*</span><span class="token number">12</span> <span class="token string">&quot;yearly salary&quot;</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>
</code></pre></div><h3 id="去除重复行" tabindex="-1"><a class="header-anchor" href="#去除重复行" aria-hidden="true">#</a> 去除重复行</h3><p>  为了在结果中出去相同的行，在 SELECT 子句中的 SELECT 关键字后<mark>紧跟<code>DISTINCT</code>关键字</mark>。在<code>DISTINCT</code>关键字后面，可以指定多个字段，<code>DISTINCT</code>关键字影响所有被选定的字段组合的结果。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id<span class="token punctuation">,</span>salary <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>
</code></pre></div><h3 id="空值参与运算" tabindex="-1"><a class="header-anchor" href="#空值参与运算" aria-hidden="true">#</a> 空值参与运算</h3><p>  所有运算符或列值遇到<code>null</code>值，运算的结果都为<code>null</code>。在 MySQL 里面，<mark>空值不等于空字符串</mark>，一个空字符串的长度是 0 ，而一个空值的长度是空，而且在 MySQL 里面，空值是占用空间的。</p><h3 id="着重号" tabindex="-1"><a class="header-anchor" href="#着重号" aria-hidden="true">#</a> 着重号</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">ORDER</span><span class="token punctuation">;</span>
ERROR <span class="token number">1064</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual thatcorresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">&#39;ORDER&#39;</span> atline <span class="token number">1</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>ORDER<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>我们需要保证表中的字段、表名等没有和保留字、数据库系统或常用方法冲突。如果真的相同，请在 SQL 语句中使用一对\`\`(着重号)引起来。</p></div><h3 id="查询常数" tabindex="-1"><a class="header-anchor" href="#查询常数" aria-hidden="true">#</a> 查询常数</h3><p>  在 SELECT 查询结果中增加一列固定的常数列，这列的取值是我们指定的，而不是从数据表中动态取出的。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">&#39;深圳&#39;</span> <span class="token keyword">as</span> address<span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>
</code></pre></div><h2 id="显示表结构" tabindex="-1"><a class="header-anchor" href="#显示表结构" aria-hidden="true">#</a> 显示表结构</h2><p>使用<code>DESCRIBE</code>或<code>DESC</code>命令，查看表结构。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DESC</span> title_info<span class="token punctuation">;</span>
<span class="token keyword">DESCRIBE</span> title_info<span class="token punctuation">;</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">desc</span> title_info<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> Field       <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------+--------------+------+-----+---------+-------+</span>
<span class="token operator">|</span> uuid        <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token keyword">type</span>        <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> question    <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> options     <span class="token operator">|</span> json         <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> answer      <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> create_time <span class="token operator">|</span> <span class="token keyword">datetime</span>     <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> login_no    <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">|</span> remark      <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------+--------------+------+-----+---------+-------+</span>
<span class="token number">8</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.05</span> sec<span class="token punctuation">)</span>
</code></pre></div><blockquote><p>File：表字段名称<br> Type：表字段类型<br> Null：是否可以存放 NULL 值<br> Key：索引<br> Default：默认值<br> Extra：表示可以获取的与给定列有关的附加信息</p></blockquote><h2 id="过滤数据" tabindex="-1"><a class="header-anchor" href="#过滤数据" aria-hidden="true">#</a> 过滤数据</h2><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 过滤条件<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> uuid<span class="token punctuation">,</span> question <span class="token keyword">FROM</span> title_info <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">\`</span>type<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token string">&#39;S&#39;</span><span class="token punctuation">;</span>
</code></pre></div>`,55);function h(y,m){const o=p("ExternalLinkIcon");return t(),r("div",null,[d,a("p",null,[s("TIOBE 排行榜："),a("a",i,[s("https://www.tiobe.com/tiobe-index/"),c(o)])]),u])}const w=e(k,[["render",h],["__file","data_query.html.vue"]]);export{w as default};
