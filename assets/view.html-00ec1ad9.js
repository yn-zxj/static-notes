import{_ as a,o as s,c as n,a as e}from"./app-9018a851.js";const t={},o=e(`<h2 id="常见的数据库对象" tabindex="-1"><a class="header-anchor" href="#常见的数据库对象" aria-hidden="true">#</a> 常见的数据库对象</h2><table><thead><tr><th>对象</th><th>描述</th></tr></thead><tbody><tr><td>表<code>TABLE</code></td><td>表是存储数据的逻辑单元，以行和列的形式存在，列就是字段，行就是记录</td></tr><tr><td>数据字典</td><td>就是系统表，存放数据库相关信息的表。系统表的数据通常由数据库系统维护，程序员通常不应该修改，只可查看</td></tr><tr><td>约束<code>CONSTRAINT</code></td><td>执行数据校验的规则，用于保证数据完整性的规则</td></tr><tr><td>视图<code>VIEW</code></td><td>一个或者多个数据表里的数据的逻辑显示，视图并不存储数据</td></tr><tr><td>索引<code>INDEX</code></td><td>用于提高查询性能，相当于书的目录</td></tr><tr><td>存储过程<code>PROCEDURE</code></td><td>用于完成一次完整的业务处理，没有返回值，但可通过传出参数将多个值传给调用环境</td></tr><tr><td>存储函数<code>FUNCTION</code></td><td>用于完成一次特定的计算，具有一个返回值</td></tr><tr><td>触发器<code>TRIGGER</code></td><td>相当于一个事件监听器，当数据库发生特定事件后，触发器被触发，完成相应的处理</td></tr></tbody></table><h2 id="视图概述" tabindex="-1"><a class="header-anchor" href="#视图概述" aria-hidden="true">#</a> 视图概述</h2><h3 id="什么是视图" tabindex="-1"><a class="header-anchor" href="#什么是视图" aria-hidden="true">#</a> 什么是视图</h3><p>  视图是表现数据逻辑子集或数据的组合。视图是基于表或另一个视图的逻辑表，一个视图并不包含真实的数据，它提供了另一个视角查看或改变表中的数据，视图的本质就是一个 SELECT 语句。<br>   视图建立在已有表的基础上，视图赖以建立的这些表称为基表。视图的创建和删除只影响视图本身，不影响对应的基表；但是当对视图中的数据进行增加、删除和修改操作时，数据表中的数据就会相应地发生变化，反之亦然。<br>   通常情况下，小型项目的数据库可以不使用视图，但是在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，它可以帮助我们把经常查询的结果集放到虚拟表中，提升使用效率。</p><h3 id="为什么要使用视图" tabindex="-1"><a class="header-anchor" href="#为什么要使用视图" aria-hidden="true">#</a> 为什么要使用视图</h3><p>(1) 视图可以起到隐藏数据的功能。<br> (2) 视图可以将复杂的多表连接查询的结果构成一个简单的表结构提供给用户。</p><h2 id="创建视图" tabindex="-1"><a class="header-anchor" href="#创建视图" aria-hidden="true">#</a> 创建视图</h2><p><strong>官方结构</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span>
    <span class="token punctuation">[</span><span class="token operator">OR</span> <span class="token keyword">REPLACE</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token keyword">ALGORITHM</span> <span class="token operator">=</span> {<span class="token keyword">UNDEFINED</span> <span class="token operator">|</span> <span class="token keyword">MERGE</span> <span class="token operator">|</span> <span class="token keyword">TEMPTABLE</span>}<span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token keyword">DEFINER</span> <span class="token operator">=</span> <span class="token keyword">user</span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token keyword">SQL</span> SECURITY { <span class="token keyword">DEFINER</span> <span class="token operator">|</span> <span class="token keyword">INVOKER</span> }<span class="token punctuation">]</span>
    <span class="token keyword">VIEW</span> view_name <span class="token punctuation">[</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">AS</span> select_statement
    <span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span><span class="token keyword">CASCADED</span> <span class="token operator">|</span> <span class="token keyword">LOCAL</span><span class="token punctuation">]</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span>
</code></pre></div><p><strong>精简版</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token operator">OR</span> <span class="token keyword">REPLACE</span><span class="token punctuation">]</span> <span class="token keyword">VIEW</span> 视图名称 <span class="token keyword">AS</span> 查询语句<span class="token punctuation">;</span>
</code></pre></div><hr><p><strong>创建单表视图</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 创建一个名为emp_single_vu的视图，展示字段为employee_id，last_name，salary</span>
<span class="token comment"># 视图字段名还可做自定义</span>
<span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> emp_single_vu <span class="token punctuation">(</span>emp_id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> salary<span class="token punctuation">)</span>
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>
</code></pre></div><p><strong>创建多表视图</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 创建一个名为emp_multi_vu的视图，展示字段为employee_id，last_name，salary，department_name</span>
<span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> emp_multi_vu
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span>
  e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> d<span class="token punctuation">.</span>department_name
<span class="token keyword">FROM</span> employees e<span class="token punctuation">,</span> departments d
<span class="token keyword">WHERE</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
</code></pre></div><p><strong>基于视图创建视图</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># emp_multi_vu 为上面创建的视图</span>
<span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> emp_dept_vu
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp_multi_vu <span class="token keyword">WHERE</span> department_name <span class="token operator">=</span> <span class="token string">&#39;Purchasing&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="查看视图" tabindex="-1"><a class="header-anchor" href="#查看视图" aria-hidden="true">#</a> 查看视图</h2><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看数据库的表对象、视图对象</span>
<span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>

<span class="token comment"># 查看视图结构</span>
<span class="token keyword">desc</span> <span class="token operator">/</span> <span class="token keyword">describe</span> 视图名称<span class="token punctuation">;</span>

<span class="token comment"># 查看视图属性信息</span>
<span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">&#39;视图名称&#39;</span><span class="token punctuation">;</span>

<span class="token comment"># 查看视图的详细定义信息</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">view</span> 视图名称<span class="token punctuation">;</span>
</code></pre></div><h2 id="更新视图的数据" tabindex="-1"><a class="header-anchor" href="#更新视图的数据" aria-hidden="true">#</a> 更新视图的数据</h2><p>  MySQL 支持使用 INSERT、UPDATE 和 DELETE 语句对视图中的数据进行插入、更新和删除操作。当视图中的数据发生变化时，数据表中的数据也会发生变化，反之亦然。要使视图可更新，视图中的行和底层基本表中的行之间必须存在<mark>一一对应</mark>的关系，否则不支持视图的更新操作。</p><p><strong>下面是不支持更新视图的情况</strong>：<br> ① 在定义视图的时候指定了<code>ALGORITHM = TEMPTABLE</code>，视图将不支持<code>INSERT</code>和<code>DELETE</code>操作；<br> ② 视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持<code>INSERT</code>操作；<br> ③ 在定义视图时的<code>SELECT</code>语句中使用了<code>JION联合查询</code>，视图将不支持<code>INSERT</code>和<code>DELETE</code>操作；<br> ④ 在定义视图的<code>SELECT</code>语句后的字段列表中使用了数学表达式或子查询，视图将不支持<code>INSERT</code>，也不支持<code>UPDATE</code>使用了数学表达式、子查询的字段值；<br> ⑤ 在定义视图的<code>SELECT</code>语句后的字段列表中使用<code>DISTINCT</code>、<code>聚合函数</code>、<code>GROUP BY</code>、<code>HAVING</code>、<code>UNION</code>等，视图将不支持<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>；<br> ⑥ 在定义视图的<code>SELECT</code>语句中包含了子查询，而子查询中引用了<code>FROM</code>后面的表，视图将不支持<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>；<br> ⑦ 视图定义基于一个不可更新视图；<br> ⑧ 常量视图；</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>虽然可以更新视图数据，但总的来说，视图作为虚拟表，主要用于方便查询，不建议更新视图的数据。对视图数据的更改，都是通过对实际数据表里数据的操作来完成的。</p></div><h2 id="修改、删除视图" tabindex="-1"><a class="header-anchor" href="#修改、删除视图" aria-hidden="true">#</a> 修改、删除视图</h2><h3 id="修改视图" tabindex="-1"><a class="header-anchor" href="#修改视图" aria-hidden="true">#</a> 修改视图</h3><p><strong>方式一</strong>：使用<code>CREATE OR REPLACE VIEW 子句</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">VIEW</span> 视图名称
<span class="token keyword">AS</span>
查询语句
</code></pre></div><p><strong>方式二</strong>：使用<code>ALTER VIEW</code></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">VIEW</span> 视图名称
<span class="token keyword">AS</span>
查询语句
</code></pre></div><h3 id="删除视图" tabindex="-1"><a class="header-anchor" href="#删除视图" aria-hidden="true">#</a> 删除视图</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 视图名称<span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> 视图名称<span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>(1) 删除视图只是删除视图的定义，并不会删除基表的数据。<br> (2) 基于视图 a、b 创建了新的视图 c，如果将视图 a 或者视图 b 删除，会导致视图 c 的查询失败。这样的视图 c 需要手动删除或修改，否则影响使用。</p></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="视图的优点" tabindex="-1"><a class="header-anchor" href="#视图的优点" aria-hidden="true">#</a> 视图的优点</h3><p>(1) 操作简单<br>   将经常使用的查询操作定义为视图，可以使开发人员不需要关心视图对应的数据表的结构、表与表之间的关联关系，也不需要关心数据表之间的业务逻辑和查询条件，而只需要简单地操作视图即可，极大简化了开发人员对数据库的操作。</p><p>(2) 减少数据冗余<br>   视图跟实际数据表不一样，它存储的是查询语句。所以，在使用的时候，我们要通过定义视图的查询语句来获取结果集，而视图本身不存储数据，不占用数据存储的资源，减少了数据冗余。</p><p>(3) 数据安全<br>   MySQL 将用户对数据的访问限制在某些数据的结果集上，而这些数据的结果集可以使用视图来实现。用户不必直接查询或操作数据表。这也可以理解为视图具有隔离性。视图相当于在用户和实际的数据表之间加了一层虚拟表。<br>   同时，MySQL 可以根据权限将用户对数据的访问限制在某些视图上，用户不需要查询数据表，可以直接通过视图获取数据表中的信息。这在一定程度上保障了数据表中数据的安全性。</p><p>(4) 适应灵活多变的需求<br>   当业务系统的需求发生变化后，如果需要改动数据表的结构，则工作量相对较大，可以使用视图来减少改动的工作量。这种方式在实际工作中使用得比较多。</p><p>(5) 能够分解复杂的查询逻辑<br>   数据库中如果存在复杂的查询逻辑，则可以将问题进行分解，创建多个视图获取数据，再将创建的多个视图结合起来，完成复杂的查询逻辑。</p><h3 id="视图的缺点" tabindex="-1"><a class="header-anchor" href="#视图的缺点" aria-hidden="true">#</a> 视图的缺点</h3><p>  如果我们在实际数据表的基础上创建了视图，那么如果实际数据表的结构变更了，我们就需要及时对相关的视图进行相应的维护。特别是嵌套的视图（就是在视图的基础上创建视图），维护会变得比较复杂，可读性不好，容易变成系统的潜在隐患。因为创建视图的 SQL 查询可能会对字段重命名，也可能包含复杂的逻辑，这些都会增加维护的成本。</p><p>  实际项目中，如果视图过多，会导致数据库维护成本的问题。</p><div class="hint-container tip"><p class="hint-container-title">综上所述</p><p>在创建视图的时候，你要结合实际项目需求，综合考虑视图的优点和不足，这样才能正确使用视图，使系统整体达到最优。</p></div>`,45),p=[o];function c(d,r){return s(),n("div",null,p)}const k=a(t,[["render",c],["__file","view.html.vue"]]);export{k as default};
