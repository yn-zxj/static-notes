import{_ as p,j as e,o,c,f as n,i as a,g as l,a as s}from"./app-aea90057.js";const i="/assets/data_of_table-db6cdd17.png",u="/assets/result_of_demo-627003e3.png",k="/assets/left_join-376d6809.png",r="/assets/right_join-8c787070.png",d="/assets/union-e0c845c1.png",g="/assets/union_all-d3b477d5.png",m="/assets/demo_data-93110526.png",b="/assets/cross_join-25b78645.png",y="/assets/inner_join-e08d5177.png",h="/assets/left_outer_join-5901e7dd.png",_="/assets/right_outer_join-17ee9ec6.png",w="/assets/left_excluding_join-cefa2908.png",E="/assets/right_excluding_join-92f9c034.png",f="/assets/full_outer_join-c3757abc.png",L="/assets/out_excluding_join-eca8efc7.png",N="/assets/sql_joins-b64bfa9f.png",q={},O=s(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p><mark>多表查询</mark>，也称为关联查询，指两个或更多个表一起完成查询操作。<br><strong>前提条件</strong>：这些一起查询的表之间是有关系的(一对一、一对多)，它们之间一定是有关联字段，这个关联字段可能建立了外键，也可能没有建立外键。</p></div><h2 id="笛卡尔积" tabindex="-1"><a class="header-anchor" href="#笛卡尔积" aria-hidden="true">#</a> 笛卡尔积</h2><p>  如果连接条件无效或者遗漏，其结果就是一个笛卡尔积，其中所有行的组合都被显示出来，即第一个表中的所有行连接到第二个表中的所有行。<br>   笛卡尔积会产生大量的行，例如第一个表中有 100 条记录，第二个表中有 200 条记录，使用笛卡尔积，结果就是两者相乘的 20000 条记录。一般来说这样的数据没有什么用，所以要避免此类情况出现。</p><h2 id="等值-非等值连接" tabindex="-1"><a class="header-anchor" href="#等值-非等值连接" aria-hidden="true">#</a> 等值 / 非等值连接</h2><h3 id="等值连接" tabindex="-1"><a class="header-anchor" href="#等值连接" aria-hidden="true">#</a> 等值连接</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  table1<span class="token punctuation">.</span><span class="token keyword">column</span><span class="token punctuation">,</span> table2<span class="token punctuation">.</span><span class="token keyword">column</span>
<span class="token keyword">FROM</span>
  table1<span class="token punctuation">,</span> table2
<span class="token keyword">WHERE</span>
  table1<span class="token punctuation">.</span>column1 <span class="token operator">=</span> table2<span class="token punctuation">.</span>column1<span class="token punctuation">;</span>
</code></pre></div><p>  在多表连接查询的 SELECT 子句中，字段名前面用表名可以使语义清楚，并且加快数据库访问，提高性能；<mark>如果相同的字段名出现在多个表中，字段名必须加表名，否则会引起冲突。</mark> 为了将 N 个表连接在一起，至少需要 N-1 个连接条件。</p><h3 id="多表等值连接" tabindex="-1"><a class="header-anchor" href="#多表等值连接" aria-hidden="true">#</a> 多表等值连接</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  table1<span class="token punctuation">.</span><span class="token keyword">column</span><span class="token punctuation">,</span> table2<span class="token punctuation">.</span><span class="token keyword">column</span><span class="token punctuation">,</span> table3<span class="token punctuation">.</span><span class="token keyword">column</span>
<span class="token keyword">FROM</span>
  table1<span class="token punctuation">,</span> table2<span class="token punctuation">,</span> table3
<span class="token keyword">WHERE</span>
  table1<span class="token punctuation">.</span>column1 <span class="token operator">=</span> table2<span class="token punctuation">.</span>column1
  <span class="token operator">AND</span> table1<span class="token punctuation">.</span>column2 <span class="token operator">=</span> table3<span class="token punctuation">.</span>column2<span class="token punctuation">;</span>
</code></pre></div><p>  在 SQL 语句中的<code>WHERE</code>子句里，用<code>AND</code>将两个连接条件结合起来，像这样的连接称为多表的等值查询。其核心表是<code>table1</code>，分别通过<code>column1</code>与表<code>table2</code>关联，通过<code>column2</code>与表<code>table3</code>关联。</p><h3 id="非等值连接" tabindex="-1"><a class="header-anchor" href="#非等值连接" aria-hidden="true">#</a> 非等值连接</h3><figure><img src="`+i+`" alt="表数据.png" tabindex="0" loading="lazy"><figcaption>表数据.png</figcaption></figure><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span> e<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> j<span class="token punctuation">.</span>grade_level
<span class="token keyword">FROM</span>
  employees e<span class="token punctuation">,</span> job_grades j
<span class="token keyword">WHERE</span>
  e<span class="token punctuation">.</span>salary <span class="token operator">BETWEEN</span> j<span class="token punctuation">.</span>lowest_sal <span class="token operator">AND</span> j<span class="token punctuation">.</span>highest_sal<span class="token punctuation">;</span>
</code></pre></div><figure><img src="`+u+`" alt="查询结果.png" width="300" tabindex="0" loading="lazy"><figcaption>查询结果.png</figcaption></figure><h2 id="表别名" tabindex="-1"><a class="header-anchor" href="#表别名" aria-hidden="true">#</a> 表别名</h2><p>  为了提高性能、避免字段名冲突，在多表连接查询的 SELECT 子句中，应该以<code>表名.字段名</code>的方式命名。不过这么写比较繁琐，可以使用表别名解决。<br>   表别名就是给表起了另外一个名字，不过字段别名通常是为了显示字段标题易于理解而起，而表别名是为了让 SQL 语句简单、易读。<mark>注意给表取别名后则不能使用&quot;表名.字段名&quot;的形式了，而需要使用&quot;表别名.字段名&quot;。</mark></p><p><strong>示例</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 将表table1 取别名a，并将表table2 取别名b</span>
<span class="token keyword">SELECT</span>
  a<span class="token punctuation">.</span><span class="token keyword">column</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token keyword">column</span>
<span class="token keyword">FROM</span>
  table1 a<span class="token punctuation">,</span> table2 b
<span class="token keyword">WHERE</span>
  a<span class="token punctuation">.</span>column1 <span class="token operator">=</span> b<span class="token punctuation">.</span>column2<span class="token punctuation">;</span>
</code></pre></div><h2 id="自连接-自关联" tabindex="-1"><a class="header-anchor" href="#自连接-自关联" aria-hidden="true">#</a> 自连接(自关联)</h2><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查询员工编号，员工姓名及其对应管理者的编号和姓名</span>
<span class="token keyword">SELECT</span>
  a<span class="token punctuation">.</span>employee_id <span class="token string">&#39;员工编号&#39;</span><span class="token punctuation">,</span>
  a<span class="token punctuation">.</span>first_name <span class="token string">&#39;员工名&#39;</span><span class="token punctuation">,</span>
  a<span class="token punctuation">.</span>last_name <span class="token string">&#39;员工姓&#39;</span><span class="token punctuation">,</span>
  b<span class="token punctuation">.</span>employee_id <span class="token string">&#39;管理者编号&#39;</span><span class="token punctuation">,</span>
  b<span class="token punctuation">.</span>first_name <span class="token string">&#39;管理者名&#39;</span><span class="token punctuation">,</span>
  b<span class="token punctuation">.</span>last_name <span class="token string">&#39;管理者姓&#39;</span>
<span class="token keyword">FROM</span>
  employees a<span class="token punctuation">,</span>
  employees b
<span class="token keyword">WHERE</span>
  a<span class="token punctuation">.</span>manager_id <span class="token operator">=</span> b<span class="token punctuation">.</span>employee_id<span class="token punctuation">;</span>
</code></pre></div><p>  将同一张<code>employees</code>表通过别名看成了两张不同的表；将别名 a 的表看成员工表，别名 b 的表看成领导表，在将两表进行连接。</p><h2 id="内连接" tabindex="-1"><a class="header-anchor" href="#内连接" aria-hidden="true">#</a> 内连接</h2><p><strong>内连接</strong>：在标准 SQL 中，将多个表连接，仅返回匹配条件的行的连接。简单来说，就是查询出来的结果在两个或多个表里都有与之匹配的记录。</p><p><strong>SQL92 语法</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
说明：employees 共107条记录，其中last_name = &#39;Grant&#39;的员工没有部门
这条记录在部门表不匹配，所以内连接应该返回106条记录
*/</span>
<span class="token comment"># 查询员工及其对应的部门信息</span>
<span class="token keyword">SELECT</span>
  e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
  d<span class="token punctuation">.</span>department_name
<span class="token keyword">FROM</span>
  employees e<span class="token punctuation">,</span>
  departments d
<span class="token keyword">WHERE</span>
  e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
</code></pre></div><p><strong>SQL99 语法</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
说明：employees 共107条记录，其中last_name = &#39;Grant&#39;的员工没有部门
这条记录在部门表不匹配，所以内连接应该返回106条记录
*/</span>
<span class="token comment"># 查询员工及其对应的部门信息</span>
<span class="token keyword">SELECT</span>
  e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
  d<span class="token punctuation">.</span>department_name
<span class="token keyword">FROM</span>
  employees e
  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> departments d <span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>① <code>INNER</code>可以省略！</p><p>② <strong>自然连接</strong>：如果两个表中，<mark>有相同的字段名且字段的数据类型相同</mark>，则可以使用自然连接实现两个表之间的等值连接，自然连接是一种特殊的等值连接。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
  d<span class="token punctuation">.</span>department_name
<span class="token keyword">FROM</span>
  employees e
  <span class="token keyword">NATURAL</span> <span class="token keyword">JOIN</span> departments d<span class="token punctuation">;</span>
</code></pre></div><p>③ <strong>USING 子句</strong>：上面的 SQL，除了可以使用自然连接，还可以使用<code>USING</code>子句来明确指定连接字段。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
  d<span class="token punctuation">.</span>department_name
<span class="token keyword">FROM</span>
  employees e
  <span class="token keyword">JOIN</span> departments d <span class="token keyword">USING</span><span class="token punctuation">(</span>department_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><h2 id="外连接" tabindex="-1"><a class="header-anchor" href="#外连接" aria-hidden="true">#</a> 外连接</h2><p><strong>外连接</strong>：合并具有同一列的两个及以上的表的行，结果集中除了包含一个表与另一个表匹配的行之外，还查询出了左表或右表中不匹配的行。</p><p><strong>外连接的分类</strong>：左外连接(<code>LEFT [OUTER] JOIN ... ON</code>)、右外连接(<code>RIGHT [OUTER] JOIN ... ON</code>)、全外连接(<code>FULL [OUTER] JOIN ... ON</code>)，但是<mark>MySQL 在 SQL99 语法中不支持全外连接(满外连接)</mark>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>MySQL 不支持 SQL92 语法中外连接的写法(<mark>使用+</mark>)，但是 Oracle 中这样的写法可以！MySQL 支持 SQL99 语法中使用<code>JOIN ... ON</code>的方式实现多表的查询。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
说明：employees 共107条记录，其中last_name = &#39;Grant&#39;的员工没有部门
这条记录在部门表不匹配，左连接后应该全部返回
*/</span>
<span class="token comment"># 查询所有员工编号，员工姓名及其对应管理者的编号和姓名【左连接】</span>
<span class="token keyword">SELECT</span>
  e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
  d<span class="token punctuation">.</span>department_name
<span class="token keyword">FROM</span>
  employees e<span class="token punctuation">,</span>
  departments d
<span class="token keyword">WHERE</span>
  e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><h3 id="左外连接" tabindex="-1"><a class="header-anchor" href="#左外连接" aria-hidden="true">#</a> 左外连接</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
说明：employees 共107条记录，其中last_name = &#39;Grant&#39;的员工没有部门
这条记录在部门表不匹配，左连接后应该全部返回
*/</span>
<span class="token comment"># 查询员工及其对应的部门信息</span>
<span class="token keyword">SELECT</span>
  e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
  d<span class="token punctuation">.</span>department_name
<span class="token keyword">FROM</span>
  employees e
  <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> departments d <span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
</code></pre></div><blockquote><p>左表匹配数据全部展示，右表不匹配的数据展示为 NULL</p></blockquote><figure><img src="`+k+`" alt="左外连接.png" width="250" tabindex="0" loading="lazy"><figcaption>左外连接.png</figcaption></figure><h3 id="右外连接" tabindex="-1"><a class="header-anchor" href="#右外连接" aria-hidden="true">#</a> 右外连接</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
说明：employees 共107条记录，其中last_name = &#39;Grant&#39;的员工没有部门
departments 表中27条记录，其中16个部门没有员工
采用右连接后应该返回 106 + 16 = 122 条记录
*/</span>
<span class="token comment"># 查询员工及其对应的部门信息</span>
<span class="token keyword">SELECT</span>
  e<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>
  d<span class="token punctuation">.</span>department_name
<span class="token keyword">FROM</span>
  employees e
  <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> departments d <span class="token keyword">ON</span> e<span class="token punctuation">.</span>department_id <span class="token operator">=</span> d<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
</code></pre></div><blockquote><p>右表匹配数据全部展示，左表不匹配的数据展示为 NULL</p></blockquote><figure><img src="`+r+`" alt="右外连接.png" width="250" tabindex="0" loading="lazy"><figcaption>右外连接.png</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>① <code>OUTER</code>可以省略！</p><p>② 有相同的字段名且字段的数据类型相同可以使用<code>USING</code>子句。</p></div><h2 id="union-的使用" tabindex="-1"><a class="header-anchor" href="#union-的使用" aria-hidden="true">#</a> UNION 的使用</h2><p>合并查询结果利用 UNION 关键字，可以给出多条 SELECT 语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个 SELECT 语句之间使用 UNION 或 UNION ALL 关键字分隔。</p><p><strong>语法格式</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span>
<span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span><span class="token punctuation">]</span>
<span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span>
</code></pre></div><table><thead><tr><th>UNION</th><th>UNION ALL</th></tr></thead><tbody><tr><td><img src="`+d+'"></td><td><img src="'+g+'"></td></tr><tr><td>返回两个查询的结果集的并集，去除重复记录</td><td>返回两个查询的结果集的并集，不去除重复记录</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">注意</p><p>执行 UNION ALL 语句时所需要的资源比 UNION 语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用 UNION ALL 语句，以提高数据查询的效率。</p></div><h2 id="sql-joins-总结" tabindex="-1"><a class="header-anchor" href="#sql-joins-总结" aria-hidden="true">#</a> SQL JOINS(总结)</h2><p>假设有<code>TableA</code>和<code>TableB</code>两张表，示例数据如下图所示，且红色高亮部分表示两个表的匹配数据。</p>',49),T={href:"https://learnsql.com/blog/sql-joins/",target:"_blank",rel:"noopener noreferrer"},S=s('<details class="hint-container details"><summary>测试数据</summary><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>TableA<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>TableA<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>a_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3<span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tableA<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>a_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>\n<span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tomato&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cucumber&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>TableB<span class="token punctuation">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tableB<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>b_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb3<span class="token punctuation">;</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>TableB<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>b_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>\n<span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cucumber&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dill&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></details><figure><img src="'+m+'" alt="演示数据.png" tabindex="0" loading="lazy"><figcaption>演示数据.png</figcaption></figure><h3 id="交叉连接" tabindex="-1"><a class="header-anchor" href="#交叉连接" aria-hidden="true">#</a> 交叉连接</h3><figure><img src="'+b+`" alt="交叉连接.png" tabindex="0" loading="lazy"><figcaption>交叉连接.png</figcaption></figure><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  a<span class="token punctuation">.</span>a_id<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name <span class="token string">&#39;a_name&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>b_id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token string">&#39;b_name&#39;</span>
<span class="token keyword">FROM</span>
  tableA a
  <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> tableB b<span class="token punctuation">;</span>
</code></pre></div><h3 id="内连接-1" tabindex="-1"><a class="header-anchor" href="#内连接-1" aria-hidden="true">#</a> 内连接</h3><figure><img src="`+y+`" alt="内连接.png" tabindex="0" loading="lazy"><figcaption>内连接.png</figcaption></figure><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  a<span class="token punctuation">.</span>a_id<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name <span class="token string">&#39;a_name&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>b_id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token string">&#39;b_name&#39;</span>
<span class="token keyword">FROM</span>
  tableA a
  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> tableB b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>name <span class="token operator">=</span> b<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre></div><h3 id="左外连接-1" tabindex="-1"><a class="header-anchor" href="#左外连接-1" aria-hidden="true">#</a> 左外连接</h3><figure><img src="`+h+`" alt="左外连接.png" tabindex="0" loading="lazy"><figcaption>左外连接.png</figcaption></figure><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  a<span class="token punctuation">.</span>a_id<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name <span class="token string">&#39;a_name&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>b_id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token string">&#39;b_name&#39;</span>
<span class="token keyword">FROM</span>
  tableA a
  <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> tableB b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>name <span class="token operator">=</span> b<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre></div><h3 id="右外连接-1" tabindex="-1"><a class="header-anchor" href="#右外连接-1" aria-hidden="true">#</a> 右外连接</h3><figure><img src="`+_+`" alt="右外连接.png" tabindex="0" loading="lazy"><figcaption>右外连接.png</figcaption></figure><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  a<span class="token punctuation">.</span>a_id<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name <span class="token string">&#39;a_name&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>b_id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token string">&#39;b_name&#39;</span>
<span class="token keyword">FROM</span>
  tableA a
  <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> tableB b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>name <span class="token operator">=</span> b<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre></div><h3 id="左排除外连接-左表唯一" tabindex="-1"><a class="header-anchor" href="#左排除外连接-左表唯一" aria-hidden="true">#</a> 左排除外连接(左表唯一)</h3><figure><img src="`+w+`" alt="左排除外连接.png" tabindex="0" loading="lazy"><figcaption>左排除外连接.png</figcaption></figure><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  a<span class="token punctuation">.</span>a_id<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name <span class="token string">&#39;a_name&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>b_id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token string">&#39;b_name&#39;</span>
<span class="token keyword">FROM</span>
  tableA a
  <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> tableB b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>name <span class="token operator">=</span> b<span class="token punctuation">.</span>name
<span class="token keyword">WHERE</span>
  b<span class="token punctuation">.</span>name <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>相当于左外连接去除两表匹配部分，剩下的为左表与右表不匹配的数据，而这些数据由于不匹配的缘故，右表不存在则展示为<code>null</code></p></blockquote><h3 id="右排除外连接-右表唯一" tabindex="-1"><a class="header-anchor" href="#右排除外连接-右表唯一" aria-hidden="true">#</a> 右排除外连接(右表唯一)</h3><figure><img src="`+E+`" alt="右排除外连接.png" tabindex="0" loading="lazy"><figcaption>右排除外连接.png</figcaption></figure><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  a<span class="token punctuation">.</span>a_id<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name <span class="token string">&#39;a_name&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>b_id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token string">&#39;b_name&#39;</span>
<span class="token keyword">FROM</span>
  tableA a
  <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> tableB b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>name <span class="token operator">=</span> b<span class="token punctuation">.</span>name
<span class="token keyword">WHERE</span>
  a<span class="token punctuation">.</span>name <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>相当于右外连接去除两表匹配部分，剩下的为左表与右表不匹配的数据，而这些数据由于不匹配的缘故，左表不存在则展示为<code>null</code></p></blockquote><h3 id="全外连接" tabindex="-1"><a class="header-anchor" href="#全外连接" aria-hidden="true">#</a> 全外连接</h3><figure><img src="`+f+`" alt="全外连接.png" tabindex="0" loading="lazy"><figcaption>全外连接.png</figcaption></figure><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  a<span class="token punctuation">.</span>a_id<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name <span class="token string">&#39;a_name&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>b_id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token string">&#39;b_name&#39;</span>
<span class="token keyword">FROM</span>
  tableA a
  <span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> tableB b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>name <span class="token operator">=</span> b<span class="token punctuation">.</span>name<span class="token punctuation">;</span>

<span class="token comment"># 由于MySQL不支持全外连接，可以使用UNION [根据8.9附图进行搭配]</span>
<span class="token comment">-- 1.左外 union all 右表唯一</span>
<span class="token comment">-- 2.右外 union all 左表唯一</span>
<span class="token comment">-- 3.左表唯一 union all 右表唯一 union all 内连接</span>
</code></pre></div><h3 id="非交集连接" tabindex="-1"><a class="header-anchor" href="#非交集连接" aria-hidden="true">#</a> 非交集连接</h3><figure><img src="`+L+`" alt="非交集连接.png" tabindex="0" loading="lazy"><figcaption>非交集连接.png</figcaption></figure><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  a<span class="token punctuation">.</span>a_id<span class="token punctuation">,</span> a<span class="token punctuation">.</span>name <span class="token string">&#39;a_name&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>b_id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token string">&#39;b_name&#39;</span>
<span class="token keyword">FROM</span>
  tableA a
  <span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> tableB b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>name <span class="token operator">=</span> b<span class="token punctuation">.</span>name
<span class="token keyword">WHERE</span>
  a<span class="token punctuation">.</span>name <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> b<span class="token punctuation">.</span>name <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>

<span class="token comment"># 由于MySQL不支持全外连接，可以使用UNION [根据8.9附图进行搭配]</span>
<span class="token comment">-- 左表唯一 union all 右表唯一</span>
</code></pre></div><blockquote><p>相当于全外连接去除两表匹配部分，剩下的为左表与右表不匹配的数据，而这些数据由于不匹配的缘故，左表或右表中不存在则展示为<code>null</code></p></blockquote><div class="hint-container warning"><p class="hint-container-title">注意</p><p>我们要控制连接表的数量。多表连接就相当于嵌套 for 循环一样，非常消耗资源，会让 SQL 查询性能下降得很严重，因此不要连接不必要的表。在许多 DBMS 中，也都会有最大连接表的限制。</p><blockquote><p>【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时， 保证被关联的字段需要有索引。<br> 说明：即使双表 join 也要注意表索引、SQL 性能。<br> 来源：阿里巴巴《Java 开发手册》</p></blockquote></div><h3 id="附图-sql-joins" tabindex="-1"><a class="header-anchor" href="#附图-sql-joins" aria-hidden="true">#</a> 附图 SQL JOINS</h3><figure><img src="`+N+'" alt="SQL_JOINS.png" width="500" tabindex="0" loading="lazy"><figcaption>SQL_JOINS.png</figcaption></figure>',32);function x(v,R){const t=e("ExternalLinkIcon");return o(),c("div",null,[O,n("p",null,[a("参考地址："),n("a",T,[a("https://learnsql.com/blog/sql-joins/"),l(t)])]),S])}const U=p(q,[["render",x],["__file","multi_table_query.html.vue"]]);export{U as default};
