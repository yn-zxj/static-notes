import{_ as t,j as e,o as p,c as o,f as c,i as s,g as l,w as d,a as n}from"./app-08ac72c0.js";const k="/assets/data_storage_procedure-7e344b4e.png",r={},u=n('<h2 id="_1-基础知识" tabindex="-1"><a class="header-anchor" href="#_1-基础知识" aria-hidden="true">#</a> 1.基础知识</h2><h3 id="_1-1-一条数据存储的过程" tabindex="-1"><a class="header-anchor" href="#_1-1-一条数据存储的过程" aria-hidden="true">#</a> 1.1 一条数据存储的过程</h3><p>  存储数据是处理数据的第一步。只有正确地把数据存储起来，我们才能进行有效的处理和分析。否则，只能是一团乱麻，无从下手。</p><p>  那么，怎样才能把用户各种经营相关的、纷繁复杂的数据，有序、高效地存储起来呢？ 在 MySQL 中，一个完整的数据存储过程总共有 4 步，分别是创建数据库、确认字段、创建数据表、插入数据。</p><figure><img src="'+k+'" alt="数据存储过程.png" width="600" tabindex="0" loading="lazy"><figcaption>数据存储过程.png</figcaption></figure><p>  我们要先创建一个数据库，而不是直接创建数据表呢？</p><p>  因为从系统架构的层次上看，MySQL 数据库系统从大到小依次是数据库服务器、数据库、数据表、数据表的行与列。</p><p>  MySQL 数据库服务器之前已经安装。所以，我们就从创建数据库开始。</p><h3 id="_1-2-标识符命名规则" tabindex="-1"><a class="header-anchor" href="#_1-2-标识符命名规则" aria-hidden="true">#</a> 1.2 标识符命名规则</h3><p>(1) 数据库名、表名不得超过 30 个字符，变量名限制为 29 个<br> (2) 必须只能包含<code>A–Z, a–z, 0 – 9 , _</code>共 63 个字符<br> (3) 数据库名、表名、字段名等对象名中间<mark>不要包含空格</mark><br> (4) 同一个 MySQL 软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名<br> (5) 必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在 SQL 语句中使用着重号(`)引起来<br> (6) <mark>保持字段名和类型的一致性</mark>：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</p><h3 id="_1-3-mysql-中的数据类型" tabindex="-1"><a class="header-anchor" href="#_1-3-mysql-中的数据类型" aria-hidden="true">#</a> 1.3 MySQL 中的数据类型</h3>',11),i=n(`<table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、 INT(或 INTEGER) 、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td>DECIMAL</td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、DATE 、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、 VARCHAR 、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON 类型</td><td>JSON 对象、JSON 数组</td></tr><tr><td>空间数据类型</td><td>单值：GEOMETRY、POINT、LINESTRING、POLYGON<br>集合：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td></tr></tbody></table><p>其中，常用的几类类型介绍如下：</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td><code>INT</code></td><td>从-2^31 到 2^31-1 的整型数据。存储大小为 4 个字节</td></tr><tr><td><code>CHAR(size)</code></td><td>定长字符数据。若未指定，默认为 1 个字符，最大长度 255</td></tr><tr><td><code>VARCHAR(size)</code></td><td>可变长字符数据，根据字符串实际长度保存， 必须指定长度</td></tr><tr><td><code>FLOAT(M,D)</code></td><td>单精度，占用 4 个字节，M=整数位+小数位，D=小数位。 D&lt;=M&lt;=255,0&lt;=D&lt;=30，默认 M+D&lt;=6</td></tr><tr><td><code>DOUBLE(M,D)</code></td><td>双精度，占用 8 个字节，D&lt;=M&lt;=255,0&lt;=D&lt;=30，默认 M+D&lt;=15</td></tr><tr><td><code>DECIMAL(M,D)</code></td><td>高精度小数，占用 M+2 个字节，D&lt;=M&lt;=65，0&lt;=D&lt;=30，最大取值范围与 DOUBLE 相同。</td></tr><tr><td><code>DATE</code></td><td>日期型数据，格式&#39;YYYY-MM-DD&#39;</td></tr><tr><td><code>BLOB</code></td><td>二进制形式的长文本数据，最大可达 4G</td></tr><tr><td><code>TEXT</code></td><td>长文本数据，最大可达 4G</td></tr></tbody></table><h2 id="_2-创建和管理数据库" tabindex="-1"><a class="header-anchor" href="#_2-创建和管理数据库" aria-hidden="true">#</a> 2.创建和管理数据库</h2><h3 id="_2-1-创建数据库" tabindex="-1"><a class="header-anchor" href="#_2-1-创建数据库" aria-hidden="true">#</a> 2.1 创建数据库</h3><p><strong>方式一</strong>：创建数据库(默认字符集)</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名<span class="token punctuation">;</span>
<span class="token comment"># CREATE DATABASE testdb;</span>
</code></pre></div><p><strong>方式二</strong>：创建数据库并指定字符集</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集<span class="token punctuation">;</span>
<span class="token comment"># CREATE DATABASE testdb CHARACTER SET &#39;utf8&#39;;</span>
</code></pre></div><p><strong>方式三</strong>：判断数据库是否已经存在，不存在则创建数据库 <mark>(推荐)</mark></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> 数据库名<span class="token punctuation">;</span>
<span class="token comment"># CREATE DATABASE IF NOT EXISTS testdb;</span>
<span class="token comment"># CREATE DATABASE IF NOT EXISTS testdb CHARACTER SET &#39;utf8&#39;;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果 MySQL 中已经存在相关的数据库，则忽略创建语句，不再创建数据库。</p></div><h3 id="_2-2-使用数据库" tabindex="-1"><a class="header-anchor" href="#_2-2-使用数据库" aria-hidden="true">#</a> 2.2 使用数据库</h3><p>查看当前所有的数据库：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span>
</code></pre></div><p>查看当前正在使用的数据库：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment"># 使用的一个 mysql 中的全局函数</span>
</code></pre></div><p>查看指定库下所有的表：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span> <span class="token keyword">FROM</span> 数据库名<span class="token punctuation">;</span>
</code></pre></div><p>查看数据库的创建信息：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名<span class="token punctuation">;</span>
<span class="token comment"># 或</span>
<span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名\\G
</code></pre></div><p>使用/切换数据库：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> 数据库名<span class="token punctuation">;</span>
</code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>要操作表和数据之前必须先说明是对哪个数据库进行操作，否则就要对所有对象加上<code>数据库名.表名</code>。</p></div><h3 id="_2-3-修改数据库" tabindex="-1"><a class="header-anchor" href="#_2-3-修改数据库" aria-hidden="true">#</a> 2.3 修改数据库</h3><p>更改数据库字符集：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 字符集：gbk、utf8等</span>
<span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> 数据库名 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集<span class="token punctuation">;</span>
</code></pre></div><h3 id="_2-4-删除数据库" tabindex="-1"><a class="header-anchor" href="#_2-4-删除数据库" aria-hidden="true">#</a> 2.4 删除数据库</h3><p><strong>方式一</strong>：删除指定的数据库</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> 数据库名<span class="token punctuation">;</span>
</code></pre></div><p><strong>方式二</strong>：删除指定的数据库 <mark>(推荐)</mark></p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> 数据库名<span class="token punctuation">;</span>
</code></pre></div><h2 id="_3-创建表" tabindex="-1"><a class="header-anchor" href="#_3-创建表" aria-hidden="true">#</a> 3.创建表</h2><p><strong>方式一</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 表名<span class="token punctuation">(</span>
字段<span class="token number">1</span><span class="token punctuation">,</span> 数据类型 <span class="token punctuation">[</span>约束条件<span class="token punctuation">]</span> <span class="token punctuation">[</span>默认值<span class="token punctuation">]</span><span class="token punctuation">,</span>
字段<span class="token number">2</span><span class="token punctuation">,</span> 数据类型 <span class="token punctuation">[</span>约束条件<span class="token punctuation">]</span> <span class="token punctuation">[</span>默认值<span class="token punctuation">]</span><span class="token punctuation">,</span>
字段<span class="token number">3</span><span class="token punctuation">,</span> 数据类型 <span class="token punctuation">[</span>约束条件<span class="token punctuation">]</span> <span class="token punctuation">[</span>默认值<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>表约束条件<span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>建表示例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 建表语句</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp<span class="token punctuation">(</span>
  emp_id <span class="token keyword">INT</span><span class="token punctuation">,</span>
  emp_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  salary <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span>
  hiredata <span class="token keyword">DATE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 查看表字段信息</span>
<span class="token keyword">DESCRIBE</span> emp<span class="token punctuation">;</span>
<span class="token comment"># 或</span>
<span class="token keyword">DESC</span> emp<span class="token punctuation">;</span>
</code></pre></div><hr><p><strong>方式二</strong>：用子查询创建表</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">AS</span> subquery<span class="token punctuation">;</span>
</code></pre></div><p>建表示例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 建表并插入数据</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dept
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> hire_date
<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>

<span class="token comment"># 建表但不插入数据(控制子查询不返回数据)</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dept
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> hire_date
<span class="token keyword">FROM</span> employees
<span class="token keyword">WHERE</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div></div><hr><p><strong>查看表结构</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DESCRIBE</span> 表名<span class="token punctuation">;</span>
<span class="token keyword">DESC</span> 表名<span class="token punctuation">;</span>
<span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span>

<span class="token comment"># DESCRIBE emp;</span>
<span class="token comment"># DESC emp;</span>
<span class="token comment"># SHOW CREATE TABLE emp;</span>
</code></pre></div><h2 id="_4-修改表" tabindex="-1"><a class="header-anchor" href="#_4-修改表" aria-hidden="true">#</a> 4.修改表</h2><h3 id="_4-1-添加字段" tabindex="-1"><a class="header-anchor" href="#_4-1-添加字段" aria-hidden="true">#</a> 4.1 添加字段</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名
<span class="token keyword">ADD</span> <span class="token punctuation">[</span><span class="token keyword">COLUMN</span><span class="token punctuation">]</span> 字段名一 字段类型 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> 默认值<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段描述<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">FIRST</span><span class="token operator">|</span><span class="token keyword">AFTER</span> 字段名二<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment"># COLUMN 可以省略</span>
<span class="token comment"># FIRST 后不能跟字段</span>
<span class="token comment"># AFTER 后必须跟字段</span>
</code></pre></div><p>举例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 字段添加到最后位置</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept <span class="token keyword">ADD</span> birthday <span class="token keyword">DATE</span><span class="token punctuation">;</span>

<span class="token comment"># 字段添加到hire_date前面</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept <span class="token keyword">ADD</span> birthday <span class="token keyword">DATE</span> <span class="token keyword">FIRST</span> hire_date<span class="token punctuation">;</span>

<span class="token comment"># 字段添加到hire_date后面</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept <span class="token keyword">ADD</span> birthday <span class="token keyword">DATE</span> <span class="token keyword">AFTER</span> hire_date<span class="token punctuation">;</span>

<span class="token comment"># 在birthday字段后面新增age字段，类型为INT，不为空，字段描述为年龄</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept <span class="token keyword">ADD</span> age <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;年龄&#39;</span> <span class="token keyword">AFTER</span> birthday<span class="token punctuation">;</span>
</code></pre></div><h3 id="_4-2-修改字段" tabindex="-1"><a class="header-anchor" href="#_4-2-修改字段" aria-hidden="true">#</a> 4.2 修改字段</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名
<span class="token keyword">MODIFY</span> <span class="token punctuation">[</span><span class="token keyword">COLUMN</span><span class="token punctuation">]</span> 字段名 字段类型 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> 默认值<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段描述<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">FIRST</span><span class="token operator">|</span><span class="token keyword">AFTER</span> 字段名二<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment"># COLUMN 可以省略</span>
<span class="token comment"># FIRST 后不能跟字段</span>
<span class="token comment"># AFTER 后必须跟字段</span>
</code></pre></div><p>举例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 将birthday类型修改为VARCHAR，长度为20，不为空，字段描述为生日，并放到salary后面</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> birthday <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;生日&#39;</span> <span class="token keyword">AFTER</span> salary<span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>字段的修改包括修改字段的<mark>数据类型</mark>(仅在列中只有空值时才可以修改)、<mark>大小</mark>、<mark>位置</mark>和<mark>默认值</mark>，不过对默认值的修改只会影响后来插入表的数据，对之前的数据不会产生影响。</p></div><h3 id="_4-3-重命名字段" tabindex="-1"><a class="header-anchor" href="#_4-3-重命名字段" aria-hidden="true">#</a> 4.3 重命名字段</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名
CHANGE <span class="token punctuation">[</span><span class="token keyword">COLUMN</span><span class="token punctuation">]</span> 字段名 新字段名 新数据类型 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> 默认值<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> 字段描述<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">FIRST</span><span class="token operator">|</span><span class="token keyword">AFTER</span> 字段名二<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><p>举例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 将字段age修改为age_change，类型为INT，默认值18，字段描述为&#39;修改的年龄字段&#39;，并放到birthday之后</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept
CHANGE age <span class="token identifier"><span class="token punctuation">\`</span>age_change<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">18</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;修改的年龄字段&#39;</span> <span class="token keyword">AFTER</span> birthday<span class="token punctuation">;</span>
</code></pre></div><h3 id="_4-4-删除字段" tabindex="-1"><a class="header-anchor" href="#_4-4-删除字段" aria-hidden="true">#</a> 4.4 删除字段</h3><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token punctuation">[</span><span class="token keyword">COLUMN</span><span class="token punctuation">]</span> 字段名<span class="token punctuation">;</span>
</code></pre></div><p>举例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 删除dept表中的age字段</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept <span class="token keyword">DROP</span> age<span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>与添加、修改字段不同的是删除字段一次只能有一个字段被删除，此外在删除字段时，被修改的表至少要保留一个字段。</p></div><h2 id="_5-重命名表" tabindex="-1"><a class="header-anchor" href="#_5-重命名表" aria-hidden="true">#</a> 5.重命名表</h2><p><strong>方式一</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">TO</span> 新表名<span class="token punctuation">;</span>
</code></pre></div><p>举例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 将表dept重命名为dept_new</span>
<span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> dept <span class="token keyword">TO</span> dept_new<span class="token punctuation">;</span>
</code></pre></div><hr><p><strong>方式二</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新表名<span class="token punctuation">;</span>
</code></pre></div><p>举例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 将表dept_new重命名为dept</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept_new <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> dept<span class="token punctuation">;</span>
</code></pre></div><h2 id="_6-删除表" tabindex="-1"><a class="header-anchor" href="#_6-删除表" aria-hidden="true">#</a> 6.删除表</h2><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 表一 <span class="token punctuation">[</span><span class="token punctuation">,</span> 表二<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><p>举例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> dept<span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>(1) 数据和结构都被删除<br> (2) 所有正在运行的相关事务被提交<br> (3) 所有相关索引被删除<br> (4) <code>DROP TABLE table_name;</code> 语句不能被回滚</p></div><h2 id="_7-清空表" tabindex="-1"><a class="header-anchor" href="#_7-清空表" aria-hidden="true">#</a> 7.清空表</h2><p><strong>方式一</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span>
</code></pre></div><p>举例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> dept<span class="token punctuation">;</span>
</code></pre></div><hr><p><strong>方式二</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span>
</code></pre></div><p>举例：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> dept<span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>(1) <code>TRUNCATE TABLE</code>语句可以删除表中所有的行，并释放表的存储空间</p><p>(2) <code>DELETE FROM</code>语句也可以删除表中所有的行，但<mark>不能释放表的存储空间</mark></p><p>(3) <code>TRUNCATE</code>语句<mark>不能回滚</mark>，而使用<code>DELETE</code>语句<mark>可以实现回滚</mark></p><p>(3) 相比而言，<code>TRUNCATE TABLE</code>语句速度更快，因为它是数据定义语言，直接提交，不会产生回滚信息，也不会触发表的删除触发器</p><blockquote><p>阿里开发规范：</p><p>【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 TRIGGER，有可能造成事故，故<mark>不建议在开发代码中使用此语句</mark>。</p><p>【说明】TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p></blockquote></div><hr><div class="hint-container tip"><p class="hint-container-title">COMMIT 和 ROLLBACK 相关说明</p><p>① DCL 中<code>COMMIT</code>和<code>ROLLBACK</code><br><strong>COMMIT</strong>：一旦执行 COMMIT，则数据就被永久的保存在数据库中，意味着数据不可以回滚<br><strong>ROLLBACK</strong>：一旦执行 ROLLBACK，则可以实现数据的回滚，回滚到最近的一次 COMMIT 之后</p><p>② 对比<code>TRUNCATE TABLE</code>和<code>DELETE FROM</code><br><strong>相同点</strong>：都可以实现对表中所有数据的删除，同时保留表结构<br><strong>不同点</strong>：<br>   TRUNCATE TABLE： 一旦执行此操作，表数据全部清除。同时，<mark>数据是不可以回滚的</mark>；<br>   DELETE FROM：一旦执行此操作，表数据可以全部清除(不带 WHERE)。同时，<mark>数据是可以实现回滚</mark>；</p><p>③ DDL 和 DML 说明<br>   DDL 的操作一旦执行，就不可回滚，指令<code>SET autocommit = FALSE</code>对 DDL 操作失效；<br>   DML 的操作默认情况，一旦执行，也是不可回滚的，但是，如果在执行 DML 之前，执行了<code>SET autocommit = FALSE</code>，则执行的 DML 操作就可以实现回滚。</p></div><h2 id="_8-内容扩展" tabindex="-1"><a class="header-anchor" href="#_8-内容扩展" aria-hidden="true">#</a> 8.内容扩展</h2><h3 id="扩展一-mysql-字段命名" tabindex="-1"><a class="header-anchor" href="#扩展一-mysql-字段命名" aria-hidden="true">#</a> 扩展一 MySQL 字段命名</h3><p>【强制】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。<br> 正例：aliyun_admin，rdc_config，level3_name<br> 反例：AliyunAdmin，rdcConfig，level_3_name</p><p>【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p><p>【强制】表必备三字段：id, gmt_create, gmt_modified。</p><blockquote><p>说明：其中 id 必为主键，类型为 BIGINT UNSIGNED、单表时自增、步长为 1。gmt_create,gmt_modified 的类型均为 DATETIME 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新</p></blockquote><p>【推荐】表的命名最好是遵循&quot;业务名称_表的作用&quot;。<br> 正例：alipay_task 、 force_project、 trade_config</p><p>【推荐】库名与应用名称尽量一致。</p><p>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。<br> 正例：无符号值可以避免误存负数，且扩大了表示范围。</p><table><thead><tr><th>对象</th><th>年龄区间</th><th>类型</th><th>字节</th><th>表示范围</th></tr></thead><tbody><tr><td>人</td><td>150 岁之内</td><td>tinyint unsigned</td><td>1</td><td>无符号值：0 到 255</td></tr><tr><td>龟</td><td>数百岁</td><td>smallint unnsigned</td><td>2</td><td>无符号值：0 到 65535</td></tr><tr><td>恐龙化石</td><td>数千万年</td><td>int unsigned</td><td>4</td><td>无符号值：0 到 约 43 亿</td></tr><tr><td>太阳</td><td>约 50 亿年</td><td>bigint unsigned</td><td>8</td><td>无符号值：0 到 约 10 的 19 次方</td></tr></tbody></table><h3 id="扩展二-如何理解清空表、删除表等操作需谨慎" tabindex="-1"><a class="header-anchor" href="#扩展二-如何理解清空表、删除表等操作需谨慎" aria-hidden="true">#</a> 扩展二 如何理解清空表、删除表等操作需谨慎?</h3><p>  <code>表删除</code>操作将把表的定义和表中的数据一起删除，并且 MySQL 在执行删除操作时，不会有任何的确认信息提示，因此执行删除操时应当慎重。在删除表前，最好对表中的数据进行<mark>备份</mark>，这样当操作失误时可以对数据进行恢复，以免造成无法挽回的后果。</p><p>  同样的，在使用<code>ALTER TABLE</code>进行表的基本修改操作时，在执行操作过程之前，也应该确保对数据进行完整的<mark>备份</mark>，因为数据库的改变是<mark>无法撤销</mark>的，如果添加了一个不需要的字段，可以将其删除；相同的，如果删除了一个需要的列，该列下面的所有数据都将会丢失。</p><h3 id="扩展三-mysql8-新特性-ddl-的原子化" tabindex="-1"><a class="header-anchor" href="#扩展三-mysql8-新特性-ddl-的原子化" aria-hidden="true">#</a> 扩展三 MySQL8 新特性-DDL 的原子化</h3><p>在 MySQL 8.0 版本中，InnoDB 表的 DDL 支持事务完整性，即 DDL 操作要么成功要么回滚。DDL 操作回滚日志写入到 data dictionary 数据字典表 mysql.innodb_ddl_log（该表是隐藏的表，通过 show tables 无法看到）中，用于回滚操作。通过设置参数，可将 DDL 操作日志打印输出到 MySQL 错误日志中。</p><p>分别在 MySQL 5.7 版本和 MySQL 8.0 版本中创建数据库和数据表，结果如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mytest<span class="token punctuation">;</span>

<span class="token keyword">USE</span> mytest<span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> book1<span class="token punctuation">(</span>
book_id <span class="token keyword">INT</span> <span class="token punctuation">,</span>
book_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span> <span class="token number">255</span> <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
</code></pre></div><p>(1) 在 MySQL 5.7 版本中，测试步骤如下： 删除数据表 book1 和数据表 book2，结果如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> book1<span class="token punctuation">,</span>book2<span class="token punctuation">;</span>
ERROR <span class="token number">1051</span> <span class="token punctuation">(</span> <span class="token number">42</span> S02<span class="token punctuation">)</span>: Unknown <span class="token keyword">table</span> <span class="token string">&#39;mytest.book2&#39;</span>
</code></pre></div><p>再次查询数据库中的数据表名称，结果如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
Empty <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre></div><p>从结果可以看出，<mark>虽然删除操作时报错了，但是仍然删除了数据表 book1</mark>。</p><p>(2) 在 MySQL 8.0 版本中，测试步骤如下： 删除数据表 book1 和数据表 book2，结果如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> book1<span class="token punctuation">,</span>book2<span class="token punctuation">;</span>
ERROR <span class="token number">1051</span> <span class="token punctuation">(</span> <span class="token number">42</span> S02<span class="token punctuation">)</span>: Unknown <span class="token keyword">table</span> <span class="token string">&#39;mytest.book2&#39;</span>
</code></pre></div><p>再次查询数据库中的数据表名称，结果如下：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------------------+</span>
<span class="token operator">|</span> Tables_in_mytest <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+</span>
<span class="token operator">|</span> book1            <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre></div><p>从结果可以看出，<mark>数据表 book1 并没有被删除</mark>。</p><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习" aria-hidden="true">#</a> 练习</h2><p>(1) 创建数据库<code>test01_office</code>，指明字符集为<code>utf8</code>，并在此数据库下执行下述操作；<br> (2) 创建表 dept01</p><table><thead><tr><th>字段</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>INT(7)</td></tr><tr><td>NAME</td><td>VARCHAR(25)</td></tr></tbody></table><p>(3) 将表 departments 中的数据插入到新表 dept02 中；<br> (4) 创建表 emp01</p><table><thead><tr><th>字段</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>INT(7)</td></tr><tr><td>first_name</td><td>VARCHAR(25)</td></tr><tr><td>last_name</td><td>VARCHAR(25)</td></tr><tr><td>dept_id</td><td>INT(7)</td></tr></tbody></table><p>(5) 将 emp01 表中 last_name 的长度增加到 50<br> (6) 根据表 employees 创建 emp02；<br> (7) 删除表 emp01；<br> (8) 将表 emp02 重名名为 emp01；<br> (9) 在表 dept02 和 emp01 中添加新列 test_column，并检查所做的操作；<br> (10) 直接删除表 emp01 中的列 department_id；</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> test01_office <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">;</span>

<span class="token comment"># 使用数据库</span>
<span class="token keyword">USE</span> test01_office<span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> dept01 <span class="token punctuation">(</span>
  id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>NAME<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># dept02 与 departments不在一个数据库，则需要指定表的来源</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dept02
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> testdb<span class="token punctuation">.</span>departments<span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp01 <span class="token punctuation">(</span>
  id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  first_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  last_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  dept_id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp01 <span class="token keyword">MODIFY</span> last_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp02
<span class="token keyword">AS</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> testdb<span class="token punctuation">.</span>employees<span class="token punctuation">;</span>

<span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> emp01<span class="token punctuation">;</span>

<span class="token keyword">RENAME</span> <span class="token keyword">TABLE</span> emp02 <span class="token keyword">TO</span> emp01<span class="token punctuation">;</span>
<span class="token comment"># 或 ALTER TABLE emp02 RENAME TO emp01;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> dept02 <span class="token keyword">ADD</span> test_column <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp01 <span class="token keyword">ADD</span> test_column <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp01 <span class="token keyword">DROP</span> department_id<span class="token punctuation">;</span>
</code></pre></div>`,126);function y(E,T){const a=e("RouterLink");return p(),o("div",null,[u,c("p",null,[s("MySQL数据类型精讲"),l(a,{to:"/backend/database/base/mysql_basic_12.html"},{default:d(()=>[s("点击跳转")]),_:1})]),i])}const g=t(r,[["render",y],["__file","create_management_table.html.vue"]]);export{g as default};
