import{_ as t,j as r,o as d,c as i,f as a,i as e,g as n,a as o}from"./app-0d603fc9.js";const c={},h={href:"https://redis.io/docs/data-types/",target:"_blank",rel:"noopener noreferrer"},p=a("br",null,null,-1),l={href:"https://mrjokersince1997.github.io/My-Notes/#/%E5%85%B6%E5%AE%83/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis",target:"_blank",rel:"noopener noreferrer"},k=o(`<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><p>① 在 Redis 中单个指令都是原子性操作，通过指令操作 Redis 数据时无需担心线程安全问题。<br> ② Redis 以 key-value 的形式保存数据：key 值一定为 string 类型，而 value 值支持多种类型。</p><h3 id="存储区域" tabindex="-1"><a class="header-anchor" href="#存储区域" aria-hidden="true">#</a> 存储区域</h3><p>  Redis 将数据存储分为多个相互独立的区域，将 Redis 操作局限在自己的存储区域内。通常划分为 16 个（编号 0-15），默认使用编号 0 。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">select</span> <span class="token number">1</span>          <span class="token comment"># 改用 1 号存储区域</span>

dbsize            <span class="token comment"># 返回当前区域 key 数量</span>
move key <span class="token number">2</span>        <span class="token comment"># 将当前 key 迁移到 2 号存储区域</span>
flushdb           <span class="token comment"># 清空当前存储区域(慎重)</span>
flushall          <span class="token comment"># 清空全部存储区域(慎重)</span>
</code></pre></div><h3 id="key-操作" tabindex="-1"><a class="header-anchor" href="#key-操作" aria-hidden="true">#</a> key 操作</h3><h4 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作" aria-hidden="true">#</a> 基本操作</h4><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>del key                 <span class="token comment"># 删除 key</span>
exists key              <span class="token comment"># 判断是否存在 key</span>
<span class="token builtin class-name">type</span> key                <span class="token comment"># 返回 key 对应的 value 类型</span>

<span class="token function">rename</span> key newkey       <span class="token comment"># 重命名</span>
renamenx key newkey     <span class="token comment"># 重命名（返回 1），新名称已存在则失败（返回 0）</span>
<span class="token function">sort</span>                    <span class="token comment"># 对 key 排序</span>
</code></pre></div><h4 id="时效性操作" tabindex="-1"><a class="header-anchor" href="#时效性操作" aria-hidden="true">#</a> 时效性操作</h4><p>Redis 中可以为 key 设置有效期，key 过期后会由 Redis 执行删除策略回收内存空间。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>expire key <span class="token number">10</span>           <span class="token comment"># key 10s 内有效</span>
expireat key <span class="token number">1355292000</span> <span class="token comment"># key 截至时间戳有效</span>
persist key             <span class="token comment"># key 永久有效</span>

ttl key                 <span class="token comment"># 返回 key 剩余有效时间，若不存在返回 -2 ，永久返回 -1</span>
</code></pre></div><h4 id="查询操作" tabindex="-1"><a class="header-anchor" href="#查询操作" aria-hidden="true">#</a> 查询操作</h4><p>Redis 支持查询存储区域内含有的 key，且允许使用以下通配符：</p><p><code>-</code> 表示任意数量字符<br><code>?</code> 表示任意一个字符<br><code>[]</code> 表示一个指定字符</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>keys *                <span class="token comment"># 查询所有 key</span>
keys user:*           <span class="token comment"># 查询所有 user 的 key</span>
keys id:75??          <span class="token comment"># 查询 ID 为 7500-7599 的 key</span>
keys id:7<span class="token punctuation">[</span><span class="token number">2345</span><span class="token punctuation">]</span><span class="token number">55</span>     <span class="token comment"># 查询 ID 为 7255/7355/7455/7555 的 key</span>
</code></pre></div><h2 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string" aria-hidden="true">#</a> 字符串(String)</h2><p>  string 是 redis 最基本的数据类型，一个 key 对应一个 value。它是二进制安全的，意思是 redis 的 string 可以包含任何数据，比如 jpg 图片或者序列化对象等；一个 redis 中字符串 value 最多可以是 512M。</p><h2 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list" aria-hidden="true">#</a> 列表(List)</h2><p>  列表是简单的字符串列表，按照插入顺序排列。你可以添加一个元素到列表的头部(左边)或者尾部(右边)。它的底层实际是个双端链表，最多可以包含 2<sup>32</sup>-1 个元素(4294967295，每个列表超过 40 亿个元素)。</p><h2 id="哈希表-hash" tabindex="-1"><a class="header-anchor" href="#哈希表-hash" aria-hidden="true">#</a> 哈希表(Hash)</h2><p>  redis hash 是一个 string 类型的 field(字段)和 value(值)的映射表，hash 特别适合用于存储对象。redis 中每个 hash 可以存储 2<sup>32</sup>-1 键值对(40 多亿)。</p><h2 id="集合-set" tabindex="-1"><a class="header-anchor" href="#集合-set" aria-hidden="true">#</a> 集合(Set)</h2><h2 id="有序集合-zset" tabindex="-1"><a class="header-anchor" href="#有序集合-zset" aria-hidden="true">#</a> 有序集合(ZSet)</h2><h2 id="地理空间-geo" tabindex="-1"><a class="header-anchor" href="#地理空间-geo" aria-hidden="true">#</a> 地理空间(GEO)</h2><h2 id="基数统计-hyperloglog" tabindex="-1"><a class="header-anchor" href="#基数统计-hyperloglog" aria-hidden="true">#</a> 基数统计(HyperLogLog)</h2><h2 id="位图-bitmap" tabindex="-1"><a class="header-anchor" href="#位图-bitmap" aria-hidden="true">#</a> 位图(bitmap)</h2><h2 id="位域-bitfield" tabindex="-1"><a class="header-anchor" href="#位域-bitfield" aria-hidden="true">#</a> 位域(bitfield)</h2><h2 id="流-stream" tabindex="-1"><a class="header-anchor" href="#流-stream" aria-hidden="true">#</a> 流(Stream)</h2>`,28);function m(u,y){const s=r("ExternalLinkIcon");return d(),i("div",null,[a("p",null,[e("  数据类型参考："),a("a",h,[e("https://redis.io/docs/data-types/"),n(s)]),p,e("   Java学习笔记："),a("a",l,[e("https://mrjokersince1997.github.io/My-Notes/#/其它/数据库/Redis"),n(s)])]),k])}const g=t(c,[["render",m],["__file","data_types.html.vue"]]);export{g as default};
