import{_ as c,j as r,o as l,c as d,g as i,w as n,a as t,i as s,f as a}from"./app-db88340f.js";const k="/assets/dir_config-e7ca3460.png",m="/assets/dir_5_7-c6d39d20.png",u={},h=t(`<h2 id="mysql8-的主要目录结构" tabindex="-1"><a class="header-anchor" href="#mysql8-的主要目录结构" aria-hidden="true">#</a> MySQL8 的主要目录结构</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@zhangxj ~<span class="token punctuation">]</span> % <span class="token function">find</span> / <span class="token parameter variable">-name</span> mysql
</code></pre></div><h3 id="数据库文件的存放路径" tabindex="-1"><a class="header-anchor" href="#数据库文件的存放路径" aria-hidden="true">#</a> 数据库文件的存放路径</h3><p><strong>MySQL 数据库文件的存放路径</strong>：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;datadir&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------+-------------------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span>             <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-------------------+</span>
<span class="token operator">|</span> datadir       <span class="token operator">|</span> <span class="token operator">/</span>www<span class="token operator">/</span>server<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------+-------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre></div><blockquote><p>此处以自己实际情况为准，我的存放在<code>/www/server/data/</code>路径下</p></blockquote><h3 id="相关命令目录" tabindex="-1"><a class="header-anchor" href="#相关命令目录" aria-hidden="true">#</a> 相关命令目录</h3><p><strong>相关命令目录</strong>：<code>/usr/bin（mysqladmin、mysqlbinlog、mysqldump等命令）和/usr/sbin</code></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># cd /usr/bin</span>
<span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># find . -name &#39;mysqladmin*&#39;</span>
./mysqladmin
<span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># find . -name &#39;mysqldump*&#39;</span>
./mysqldump
./mysqldumpslow
</code></pre></div><h3 id="配置文件目录" tabindex="-1"><a class="header-anchor" href="#配置文件目录" aria-hidden="true">#</a> 配置文件目录</h3><p><strong>配置文件目录</strong>：<code>/usr/share/mysql-8.0（命令及配置文件），/etc/mysql（如my.cnf）</code></p><figure><img src="`+k+`" alt="配置文件目录.png" tabindex="0" loading="lazy"><figcaption>配置文件目录.png</figcaption></figure><h2 id="数据库和文件系统的关系" tabindex="-1"><a class="header-anchor" href="#数据库和文件系统的关系" aria-hidden="true">#</a> 数据库和文件系统的关系</h2><h3 id="查看默认数据库" tabindex="-1"><a class="header-anchor" href="#查看默认数据库" aria-hidden="true">#</a> 查看默认数据库</h3><p>查看当前主机上有哪些数据库：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
</code></pre></div><p>可以看到有 4 个数据库是属于 MySQL 自带的系统数据库：</p><p>① <code>mysql</code></p><p>  MySQL 系统自带的核心数据库，它存储了 MySQL 的用户账号和权限信息，一些存储过程、事件的定义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。</p><p>② <code>information_schema</code></p><p>  MySQL 系统自带的数据库，这个数据库保存着 MySQL 服务器<mark>维护的所有其他数据库的信息</mark>，比如有哪些表、哪些视图、哪些触发器、哪些列、哪些索引等等。这些信息并不是真实的用户数据，而是一些描述性信息，有时候也称之为<mark>元数据</mark>。在系统数据库<code>information_schema</code>中提供了一些以<code>innodb_sys</code>开头的表，用户表示内部系统表。</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span> <span class="token operator">LIKE</span> <span class="token string">&#39;innodb_sys%&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">--------------------------------------------+</span>
<span class="token operator">|</span> Tables_in_information_schema <span class="token punctuation">(</span>innodb_sys<span class="token operator">%</span><span class="token punctuation">)</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">--------------------------------------------+</span>
<span class="token operator">|</span> INNODB_SYS_DATAFILES                       <span class="token operator">|</span>
<span class="token operator">|</span> INNODB_SYS_VIRTUAL                         <span class="token operator">|</span>
<span class="token operator">|</span> INNODB_SYS_INDEXES                         <span class="token operator">|</span>
<span class="token operator">|</span> INNODB_SYS_TABLES                          <span class="token operator">|</span>
<span class="token operator">|</span> INNODB_SYS_FIELDS                          <span class="token operator">|</span>
<span class="token operator">|</span> INNODB_SYS_TABLESPACES                     <span class="token operator">|</span>
<span class="token operator">|</span> INNODB_SYS_FOREIGN_COLS                    <span class="token operator">|</span>
<span class="token operator">|</span> INNODB_SYS_COLUMNS                         <span class="token operator">|</span>
<span class="token operator">|</span> INNODB_SYS_FOREIGN                         <span class="token operator">|</span>
<span class="token operator">|</span> INNODB_SYS_TABLESTATS                      <span class="token operator">|</span>
 <span class="token operator">+</span><span class="token comment">--------------------------------------------+</span>
<span class="token number">10</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre></div><p>③ <code>performance_schema</code></p><p>  MySQL 系统自带的数据库，这个数据库主要保存 MySQL 服务器运行过程中的一些状态信息，可以用来<mark>监控 MySQL 服务的各类性能指标</mark>。包括统计最新执行了哪些语句，在执行过程中的每个阶段都花费了多长时间，内存的使用情况等信息。</p><p>④ <code>sys</code></p><p>  MySQL 系统自带的数据库。这个数据库主要是通过<mark>视图</mark>的形式把<code>information_schema</code>和<code>performance_schema</code>结合起来，帮助系统管理员和开发人员监控 MySQL 的技术性能。</p><h3 id="数据库在文件系统中的表示" tabindex="-1"><a class="header-anchor" href="#数据库在文件系统中的表示" aria-hidden="true">#</a> 数据库在文件系统中的表示</h3><p>我的主机上数据目录如下：</p><figure><img src="`+m+'" alt="数据目录(MySQL 5.7).png" tabindex="0" loading="lazy"><figcaption>数据目录(MySQL 5.7).png</figcaption></figure><p>  这个数据目录下的文件和子目录比较多，除了<code>information_schema</code>这个系统数据库外，其他的数据库在<mark>数据目录</mark>下都有对应的子目录。</p><p>以<code>learn</code>这个数据库为例：</p>',31),b=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[a("span",{class:"token punctuation"},"["),s("root@localhost data"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token comment"},"# cd learn"),s(`
`),a("span",{class:"token punctuation"},"["),s("root@localhost learn"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token comment"},"# ll"),s(`
总用量 `),a("span",{class:"token number"},"300"),s(`
-rw-r----- `),a("span",{class:"token number"},"1"),s(" mysql mysql     "),a("span",{class:"token number"},"61"),s(),a("span",{class:"token number"},"3"),s("月  "),a("span",{class:"token number"},"22"),s(` 09:52 db.opt
-rw-r----- `),a("span",{class:"token number"},"1"),s(" mysql mysql   "),a("span",{class:"token number"},"8982"),s(),a("span",{class:"token number"},"4"),s("月  "),a("span",{class:"token number"},"10"),s(` 09:17 employees.frm
-rw-r----- `),a("span",{class:"token number"},"1"),s(" mysql mysql "),a("span",{class:"token number"},"180224"),s(),a("span",{class:"token number"},"4"),s("月  "),a("span",{class:"token number"},"11"),s(),a("span",{class:"token number"},"12"),s(`:04 employees.ibd
-rw-r----- `),a("span",{class:"token number"},"1"),s(" mysql mysql   "),a("span",{class:"token number"},"8684"),s(),a("span",{class:"token number"},"3"),s("月  "),a("span",{class:"token number"},"29"),s(` 09:14 student.frm
-rw-r----- `),a("span",{class:"token number"},"1"),s(" mysql mysql  "),a("span",{class:"token number"},"98304"),s(),a("span",{class:"token number"},"3"),s("月  "),a("span",{class:"token number"},"29"),s(` 09:13 student.ibd
`)])])],-1),y=a("div",{class:"language-bash","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[a("span",{class:"token punctuation"},"["),s("root@localhost data"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token comment"},"# cd learn"),s(`
`),a("span",{class:"token punctuation"},"["),s("root@localhost learn"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token comment"},"# ll"),s(`
总用量 `),a("span",{class:"token number"},"280"),s(`
-rw-r----- `),a("span",{class:"token number"},"1"),s(" mysql mysql "),a("span",{class:"token number"},"180224"),s(),a("span",{class:"token number"},"4"),s("月  "),a("span",{class:"token number"},"11"),s(),a("span",{class:"token number"},"12"),s(`:04 employees.ibd
-rw-r----- `),a("span",{class:"token number"},"1"),s(" mysql mysql  "),a("span",{class:"token number"},"98304"),s(),a("span",{class:"token number"},"3"),s("月  "),a("span",{class:"token number"},"29"),s(` 09:13 student.ibd
`)])])],-1),g=t(`<h3 id="表在文件系统中的表示" tabindex="-1"><a class="header-anchor" href="#表在文件系统中的表示" aria-hidden="true">#</a> 表在文件系统中的表示</h3><h4 id="innodb-存储引擎模式" tabindex="-1"><a class="header-anchor" href="#innodb-存储引擎模式" aria-hidden="true">#</a> InnoDB 存储引擎模式</h4><h5 id="表结构-innodb" tabindex="-1"><a class="header-anchor" href="#表结构-innodb" aria-hidden="true">#</a> 表结构(InnoDB)</h5><p>  为了保存表结构，<code>InnoDB</code>在数据目录下对应的数据库子目录下创建了一个专门用于描述表结构的文件，文件名是这样的：<code>表名.frm</code></p><p>例如：我们在<code>learn</code>数据库下创建一个名为<code>test</code>的表：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span>
  col <span class="token keyword">INT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>  那么在数据库<code>learn</code>对应的子目录下就会创建一个名为<code>test.frm</code>的用于描述表结构的文件。<code>.frm</code>文件的格式在不同的平台上都是相同的。这个是以二进制格式存储的，直接打开是乱码。</p><h5 id="表中数据和索引-innodb" tabindex="-1"><a class="header-anchor" href="#表中数据和索引-innodb" aria-hidden="true">#</a> 表中数据和索引(InnoDB)</h5><p>① 系统表空间(system tablespace)</p><p>  默认情况下，InnoDB 会在数据库目录下创建一个名为<code>ibdata1</code>、大小为<code>12M</code>的文件，这个文件就是对应的<code>系统表空间</code>在文件系统上的表示。注意这个文件是<mark>自扩展文件</mark>，当不够用的时候会自己增加文件大小。</p><p>  如果你想让系统表空间对应文件系统上多个实际文件，或者仅仅觉得原来的<code>ibdata1</code>这个文件名难听，那么可以在 MySQL 启动时配置对应的文件路径以及它们的大小，比如修改<code>my.cnf</code>配置如下：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>[server]
# 分别创建大小512M，文件名为data1、data2的两个文件
innodb_data_file_path=data1:512M;data2:512M:autoextend
</code></pre></div><p>② 独立表空间(file-per-table tablespace)</p><p>  在 MySQL 5.6 以及之后的版本中，InnoDB 并不会默认的把各个表的数据存储在系统表空间中，而是<mark>为每一个表建立一个独立表空间</mark>，也就是说我们创建多少个表，就有多少个独立表空间。使用独立表空间来存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表名相同，只不过添加了一个<code>.ibd</code>的扩展名而已，所以完整的名称为：<code>表名.ibd</code>。</p><p>例如：我们在<code>learn</code>数据库下创建一个名为<code>test</code>的表：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test <span class="token punctuation">(</span>
  col <span class="token keyword">INT</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>  在对应的子目录下就会生成<code>test.frm</code>、<code>test.ibd</code>的两个文件，其中<code>test.ibd</code>文件就用来存储<code>test</code>表中的数据和索引。</p><p>③ 系统表空间与独立表空间的设置</p><p>  可以自己指定使用<mark>系统表空间</mark>还是<mark>独立表空间</mark>来存储数据，这个功能由启动参数<code>innodb_file_per_table</code>控制，比如说我们想刻意将表数据都存储到系统表空间时，可以在启动 MySQL 服务器的时候这样配置：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>[server]
# 0：代表使用系统表空间； 1：代表使用独立表空间
innodb_file_per_table=0
</code></pre></div><p>默认情况：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;innodb_file_per_table&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-----------------------+-------+</span>
<span class="token operator">|</span> Variable_name         <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------------------+-------+</span>
<span class="token operator">|</span> innodb_file_per_table <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-----------------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre></div><p>④ 其它类型的表空间</p><p>  随着 MySQL 的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用表空间（general tablespace）、临时表空间（temporary tablespace）等。</p><h4 id="myisam-存储引擎模式" tabindex="-1"><a class="header-anchor" href="#myisam-存储引擎模式" aria-hidden="true">#</a> MyISAM 存储引擎模式</h4><h5 id="表结构-myisam" tabindex="-1"><a class="header-anchor" href="#表结构-myisam" aria-hidden="true">#</a> 表结构(MyISAM)</h5><p>  在存储表结构方面，<code>MyISAM</code>和<code>InnoDB</code>一样，也是在数据目录下对应子目录下创建一个专门用于描述表结构的文件：<code>表名.frm</code></p><h5 id="表中数据和索引-myisam" tabindex="-1"><a class="header-anchor" href="#表中数据和索引-myisam" aria-hidden="true">#</a> 表中数据和索引(MyISAM)</h5><p>  在 MyISAM 中的索引全部都是<mark>二级索引</mark>，该存储引擎的<mark>数据和索引是分开存放</mark>的。所以在文件系统中也是使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。假如<code>test</code>表使用<code>MyISAM</code>存储引擎的话，那么在它所在数据库对应的目录下会为<code>test</code>表创建这三个文件：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>test.frm 存储表结构
test.MYD 存储数据(MYData)
test.MYI 存储索引(MYIndex)
</code></pre></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>举例：<code>数据库a</code>，<code>表b</code></p><p>① 如果表<code>b</code>采用<code>InnoDB</code>，对应数据目录的子目录下会产生一个或两个文件：</p><p>  <code>b.frm</code>：描述表结构文件，字段长度等</p><p>  如果采用<mark>系统表空间</mark>模式，数据信息和索引都存储在<code>ibdata1</code>中</p><p>  如果采用<mark>独立表空间</mark>模式，对应子目录下还会生成一个<code>b.ibd</code>文件，用于存储数据信息和索引信息</p><p>② 如果表<code>b</code>采用<code>MyISAM</code>，对应数据目录的子目录下会产生三个文件：</p><p>  MySQL 5.7 中：<code>b.frm</code>：描述表结构文件，字段长度等；<br>   MySQL 8.0 中：<code>b.xxx.sdi</code>：描述表结构文件，字段长度等</p><p>  <code>b.MYD</code>：数据信息文件，存储数据信息(如果采用独立表空间结构)</p><p>  <code>b.MYI</code>：存放索引信息文件</p>`,40);function _(S,f){const p=r("CodeTabs");return l(),d("div",null,[h,i(p,{id:"85",data:[{id:"MySQL 5.7"},{id:"MySQL 8.0"}],"tab-id":"shell"},{title0:n(({value:e,isActive:o})=>[s("MySQL 5.7")]),title1:n(({value:e,isActive:o})=>[s("MySQL 8.0")]),tab0:n(({value:e,isActive:o})=>[b]),tab1:n(({value:e,isActive:o})=>[y]),_:1}),g])}const x=c(u,[["render",_],["__file","dir_of_mysql.html.vue"]]);export{x as default};
