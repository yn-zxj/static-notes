import{_ as a,o as n,c as s,a as e}from"./app-fpN15tNc.js";const t={},p=e(`<h2 id="数据排序" tabindex="-1"><a class="header-anchor" href="#数据排序"><span>数据排序</span></a></h2><h3 id="排序规则" tabindex="-1"><a class="header-anchor" href="#排序规则"><span>排序规则</span></a></h3><p>  要在一个不明确顺序的查询结果中对行进行排序，可以使用<code>ORDER BY</code>子句，它必须位于 SQL 语句的最后。指定一个表达式或者一个字段名作为排序条件。<code>ORDER BY</code>子句的语法形式如下：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> {<span class="token keyword">column</span><span class="token punctuation">,</span> expr<span class="token punctuation">,</span> number} <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token punctuation">,</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span>
</code></pre></div><p>  其中，<code>ORDER BY {column, expr, number}</code>指定需要排序的字段、表达式或序号，ASC 以升序排序，DESC 以降序排序，<mark>默认以升序排序</mark>。<br> 针对不同的数据类型，其默认升序的含义如下：</p><ul><li>对于数字类型，小的值在前面显示</li><li>对于日期类型，早的日期在前面显示</li><li>对于字符串类型，依字母顺序显示，a 在前，z 在最后</li><li>对于空值，升序排序时显示在最后，降序排序时显示在最前面</li></ul><h3 id="单列排序" tabindex="-1"><a class="header-anchor" href="#单列排序"><span>单列排序</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 按照雇佣日期升序排序</span>
<span class="token keyword">SELECT</span> job_id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> salary <span class="token keyword">FROM</span> employees <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> hire_date<span class="token punctuation">;</span>

<span class="token comment"># 按照SQL语句中第三个字段排序(即：salary)</span>
<span class="token keyword">SELECT</span> job_id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> salary <span class="token keyword">FROM</span> employees <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment"># 按照雇佣日期降序排序</span>
<span class="token keyword">SELECT</span> job_id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> salary <span class="token keyword">FROM</span> employees <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> hire_date <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="多列排序" tabindex="-1"><a class="header-anchor" href="#多列排序"><span>多列排序</span></a></h3><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 先按照雇佣日期升序排序，再按照薪水降序排序</span>
<span class="token keyword">SELECT</span> job_id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> salary <span class="token keyword">FROM</span> employees <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> hire_date<span class="token punctuation">,</span> salary <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>多列排序也叫多重排序，即先以一个字段对查询结果进行排序，然后在这个排序的基础上再对另一个字段排序，最终显示经多次排序后的查询结果。</p></div><h2 id="分页" tabindex="-1"><a class="header-anchor" href="#分页"><span>分页</span></a></h2><p><strong>格式</strong>：</p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">LIMIT</span> <span class="token punctuation">[</span>位置偏移量<span class="token punctuation">,</span><span class="token punctuation">]</span> 行数
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>第一个&quot;位置偏移量&quot;参数指示 MySQL 从哪一行开始显示，是一个可选参数，如果不指定&quot;位置偏移量&quot;，将会从表中的第一条记录开始(第一条记录的位置偏移量是 0，第二条记录的位置偏移量是 1，以此类推)；第二个参数&quot;行数&quot;指示返回的记录条数。</p></div><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 前 10 条记录：</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment"># 或者</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment"># 第 11 至 20 条记录：</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment"># 第 21 至 30 条记录：</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>MySQL 8.0 中可以使用<code>LIMIT 3 OFFSET 4</code>，意思是获取从第 5 条记录开始后面的 3 条记录，和<code>LIMIT 4, 3</code>返回的结果相同。</p></blockquote><p><strong>分页</strong>：</p><p>分页显示公式：<code>(当前页数 - 1) * 每页条数, 每页条数</code></p><div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">LIMIT</span> <span class="token punctuation">(</span>pageNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">,</span> pageSize<span class="token punctuation">;</span>

<span class="token comment"># 每页10条记录，取第三页的记录</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">LIMIT</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment"># 即</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">LIMIT</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre></div>`,20),o=[p];function c(l,r){return n(),s("div",null,o)}const i=a(t,[["render",c],["__file","sorting_paging.html.vue"]]),d=JSON.parse('{"path":"/backend/database/base/sorting_paging.html","title":"排序与分页","lang":"zh-CN","frontmatter":{"title":"排序与分页","icon":"order","order":5,"author":"Mr.Zhang","editLink":false,"category":["数据库"],"tag":["MySQL"],"date":"2023-03-05T00:00:00.000Z","description":"数据排序 排序规则 要在一个不明确顺序的查询结果中对行进行排序，可以使用ORDER BY子句，它必须位于 SQL 语句的最后。指定一个表达式或者一个字段名作为排序条件。ORDER BY子句的语法形式如下： 其中，ORDER BY {column, expr, number}指定需要排序的字段、表达式或序号，ASC 以升序排序，DESC 以降序排序，默认...","head":[["meta",{"property":"og:url","content":"https://doc.bt66.cn/backend/database/base/sorting_paging.html"}],["meta",{"property":"og:title","content":"排序与分页"}],["meta",{"property":"og:description","content":"数据排序 排序规则 要在一个不明确顺序的查询结果中对行进行排序，可以使用ORDER BY子句，它必须位于 SQL 语句的最后。指定一个表达式或者一个字段名作为排序条件。ORDER BY子句的语法形式如下： 其中，ORDER BY {column, expr, number}指定需要排序的字段、表达式或序号，ASC 以升序排序，DESC 以降序排序，默认..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-22T09:18:25.000Z"}],["meta",{"property":"article:author","content":"Mr.Zhang"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2023-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-22T09:18:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"排序与分页\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-22T09:18:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Zhang\\"}]}"]]},"headers":[{"level":2,"title":"数据排序","slug":"数据排序","link":"#数据排序","children":[{"level":3,"title":"排序规则","slug":"排序规则","link":"#排序规则","children":[]},{"level":3,"title":"单列排序","slug":"单列排序","link":"#单列排序","children":[]},{"level":3,"title":"多列排序","slug":"多列排序","link":"#多列排序","children":[]}]},{"level":2,"title":"分页","slug":"分页","link":"#分页","children":[]}],"git":{"createdTime":1680105107000,"updatedTime":1690017505000,"contributors":[{"name":"ynzxj","email":"ynzxj@qq.com","commits":2}]},"readingTime":{"minutes":2.31,"words":694},"filePathRelative":"backend/database/base/sorting_paging.md","localizedDate":"2023年3月5日","autoDesc":true}');export{i as comp,d as data};
