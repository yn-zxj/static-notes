import{_ as o,M as p,Y as r,a0 as a,a1 as n,Z as t,a2 as s,C as c}from"./framework-0d8205ef.js";const d={},l=s('<h2 id="_1-mysql-8-新特性概述" tabindex="-1"><a class="header-anchor" href="#_1-mysql-8-新特性概述" aria-hidden="true">#</a> 1. MySQL 8 新特性概述</h2><p>  MySQL 从 5.7 版本直接跳跃发布了 8.0 版本，可见这是一个令人兴奋的里程碑版本。MySQL 8 版本在功能上做了显著的改进与增强，开发者对 MySQL 的源代码进行了重构，最突出的一点是多 MySQL Optimizer 优化器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p><h2 id="_2-新特性-窗口函数" tabindex="-1"><a class="header-anchor" href="#_2-新特性-窗口函数" aria-hidden="true">#</a> 2. 新特性-窗口函数</h2><h3 id="_2-1-窗口函数分类" tabindex="-1"><a class="header-anchor" href="#_2-1-窗口函数分类" aria-hidden="true">#</a> 2.1 窗口函数分类</h3><p>  MySQL 8.0 版本开始支持窗口函数。它的作用类型与在查询中对数据进行的分组，不同的是，分组操作会把分组的结果聚合成一条记录，而窗口函数是将结果置于每一条数据记录中。</p><p>窗口函数可以分为静态窗口函数和动态窗口函数：<br>  静态窗口函数的窗口大小是固定的，不会因为记录的不同而不同<br>  动态窗口函数的窗口大小会随记录的不同而变化</p>',6),i={href:"https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html",target:"_blank",rel:"noopener noreferrer"},k=s('<p>窗口函数总体可以分为：</p><table><thead><tr><th>分类</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="_3-新特性-公用表表达式" tabindex="-1"><a class="header-anchor" href="#_3-新特性-公用表表达式" aria-hidden="true">#</a> 3. 新特性-公用表表达式</h2><p>  公用表表达式（或通用表表达式）简称为 CTE（Common Table Expressions）。CTE 是一个命名的临时结果集，作用范围是当前语句。CTE 可以理解成一个可以复用的子查询，当然跟子查询还是有点区别的，CTE 可以引用其他 CTE，但子查询不能引用其他子查询。所以可以考虑代替子查询。</p>',4),h=a("p",null,[n("依据语法结构和执行方式的不同，公用表表达式分为"),a("mark",null,"普通公用表表达式"),n("和"),a("mark",null,"递归公用表表达式"),n(" 2 种。")],-1),u={href:"https://dev.mysql.com/doc/refman/8.0/en/with.html",target:"_blank",rel:"noopener noreferrer"},_=s(`<h3 id="_3-1-普通公用表表达式" tabindex="-1"><a class="header-anchor" href="#_3-1-普通公用表表达式" aria-hidden="true">#</a> 3.1 普通公用表表达式</h3><p>语法结构：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> cte_name
<span class="token keyword">AS</span> <span class="token punctuation">(</span>subquery<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> <span class="token operator">|</span> <span class="token keyword">DELETE</span> <span class="token operator">|</span> <span class="token keyword">UPDATE</span> query<span class="token punctuation">;</span>
</code></pre></div><p>示例：查询员工所在的部门的详细信息</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 方式一</span>
<span class="token keyword">SELECT</span>
  <span class="token operator">*</span>
<span class="token keyword">FROM</span> departments
<span class="token keyword">WHERE</span> departmant_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> departmant_id <span class="token keyword">FROM</span> employees<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># 方式二</span>
<span class="token keyword">WITH</span> emp_dept_id
<span class="token keyword">AS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id <span class="token keyword">FROM</span> departments<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> departments d<span class="token punctuation">,</span> emp_dept_id e
<span class="token keyword">WHERE</span> d<span class="token punctuation">.</span>department_id <span class="token operator">=</span> e<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
</code></pre></div><p>  公用表表达式可以起到子查询的作用。以后如果遇到需要使用子查询的场景，你可以在查询之前，先定义公用表表达式，然后在查询中用它来代替子查询。而且，跟子查询相比，公用表表达式有一个优点，就是定义过公用表表达式之后的查询，可以像一个表一样多次引用公用表表达式，而子查询则不能。</p><h3 id="_3-2-递归公用表表达式" tabindex="-1"><a class="header-anchor" href="#_3-2-递归公用表表达式" aria-hidden="true">#</a> 3.2 递归公用表表达式</h3><p>语法结构：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> RECURSIVE cte_name
<span class="token keyword">AS</span> <span class="token punctuation">(</span>subquery<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> <span class="token operator">|</span> <span class="token keyword">DELETE</span> <span class="token operator">|</span> <span class="token keyword">UPDATE</span> query<span class="token punctuation">;</span>
</code></pre></div><h3 id="_3-3-小结" tabindex="-1"><a class="header-anchor" href="#_3-3-小结" aria-hidden="true">#</a> 3.3 小结</h3><p>  公用表表达式的作用是可以替代子查询，而且可以被多次引用。递归公用表表达式对查询有一个共同根节点的树形结构数据非常高效，可以轻松搞定其它查询方式难以处理的查询。</p>`,11);function m(y,E){const e=c("ExternalLinkIcon");return p(),r("div",null,[l,a("blockquote",null,[a("p",null,[n("官网介绍："),a("a",i,[n("https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html"),t(e)])])]),k,a("blockquote",null,[h,a("p",null,[n("官网介绍："),a("a",u,[n("https://dev.mysql.com/doc/refman/8.0/en/with.html"),t(e)])])]),_])}const f=o(d,[["render",m],["__file","new_features.html.vue"]]);export{f as default};
